//===================================================================
// *** AGS ROOM SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Room:    Factory Looping Room
//              
// Author:  Kairus (Kairus)
//          Rick Jafrate (RickJ)    
//
// Abstract
// This  room  illustrates  how  to make a room continously scroll or
// loop in the horizontal directions.  
//
// Description
// The essence of this  technique is to create a background where the
// image  is repeated twice.  If such a  background were divide in to 
// a left and a right  half, both halves would contain the exact same 
// image.  A  custom  walk  function that replaces the normal walking 
// behaviour, for this  room only, adjusts the viewport and character 
// position when the character nears the left or  right  edge  of the 
// background image.
//
// AGS now allows the on_mouse_click() event handler to be used in a 
// room  script  as well as the global script.  This feature was not 
// available at the  time the  original script was created by Kairus.
// So the script required to make this room "loop" was originally in
// the global script. For this  version, this  code has been removed 
// from the global script and placed in this room's script.
//
// The original description, with a few minor corrections, formating
// changes, etc, follows.  
//
// Looping Town by System Error
// This  demo is intended to show how a room which scroll is loopable
// can be made in AGS, Adventure Game Studio. If you are a programmer 
// and don't know about this engine, you can check it at the this URL
// www.adventurgamestudio.co.uk. 
//
// The  concept  to  make a looping room is easy. In this game I have
// changed the original Walk  Mode for a walking script. I added some 
// features. I don't know if it works exactly  as Chris Jones' script, 
// that's  why I think it  is advisable not to use this script in any 
// other room than the looping ones.
//
// In order to create a room that can be scrolled loopingly you must 
// do the following:
//
// - Copy  the  first 480 pixels of your background bitmap at the end
//   of  the image. You should do it with your hotspot, walkable area
//   and walk-behind images if necessary.
//
// - Inside the function on_mouse_click() you must add a line before
//   the ProcessClick as follows:
//
//      if (GetCursorMode()==0) walk(mouse.x,mouse.y,GetViewportX());
//
//   This is the line I used for running my own walking script, there 
//   might be some other perhaps simpler ways of making it. 
//
// - Create a function such as called walk(int mx, int my, int ox) or
//   whatever  you would need to make your loop, this function is the
//   one I used.The first two lines of this functions check where has 
//   the mouse clicked (where  the player chose to move his character
//   to). If  the  click  is done amongst the first 160 pixels of the 
//   room, the character must be teleported the size of a room to the
//   right, but it doesn't mean an expanded room but the original one. 
//   It means that, if  your  background  was 640 pixels wide and you 
//   widened it to a total of 1120 pixels, your  character  should be 
//   teleported just 640 pixels to the right.  This  line should look 
//   like the following:
//
//      if (mx+ox <= 160) character[EGO].x = character[EGO].x + 640;
//   
//   Where mx means the x position where the mouse was when the click
//   happened. ox  was  the x offset of the background when the click
//   happened.  Notice that  when  you  change the x position of your 
//   character it will change the offset, also, so later on you won't 
//   be able to use ox anymore.  The next line should be the same but 
//   when  the player clicks  to  walk in the last 160  pixels of the 
//   screen. It should look like this:
//
//      if (mx+ox >= 980) character[EGO].x = character[EGO].x - 640;
//
//   This  last  line  should be an else if instead of an if to avoid 
//   any errors that could happen if the player  could  be located in 
//   an intermediate position between both ranges (not very often).
//
//   Remember that the numbers 640 and 980 should be changed to 
//   YOURIMAGESIZE and YOURIMAGESIZE-160. The last line will always be 
//   run wether the click was in the important zones or not, it is the 
//   common process of the click and goes:
//
//      MoveCharacter(EGO,mx+GetViewportX(),my);
//
//   Notice this time you can't use ox insted of GetViewPortX because 
//   your offset may have been changed by the two previous lines.
//
// That's  more  or less  about  it.  Remember  that this walk script 
// shouldn't be used always because I don't know how  stable it is (I 
// think if Chris Jones' one is different, it should be  more stable). 
// You should then add to the function on_mouse_click where  you have 
// written:
//
//    if (GetCursorMode() == 0) walk(mouse.x,mouse.y,GetViewportX());
//
// there should be something like:
//
//    if ((GetCursorMode() == 0) && (character[EGO].room = 69))
//    walk(mouse.x,mouse.y,GetViewportX());
//
// You can add as many looping rooms as you want,but you must control
// each one's size from inside the walk function and also add another 
// && (character[EGO].room = whatever) to the if line.
//
// Thanks  for  your kind attention, now you have my permission to go
// back to your normal lives ;)
//
// Sincerely,
// Kairus
//
// Scipting Hint -
//
// Revision History
// 05-Mar-15 RickJ,		update for AGS 2.7
// yy-mmm-dd Kairus,		original version
// 
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Constant Definitions
//-------------------------------------------------------------------


//===================================================================
// Static Variable Definitions
//-------------------------------------------------------------------
int InitFlag;

//===================================================================
// Utility Functions
//-------------------------------------------------------------------


//===================================================================
// Application Functions
//-------------------------------------------------------------------
function Walk(int mx, int my, int ox) {

	// Special walk mode used in looping room
	if (mx+ox >= 1342) player.x = player.x-1022;
	else if (mx+ox <= 160) player.x = player.x+1022;
	player.Walk(mx+GetViewportX(),my);
}


//===================================================================
// Mouse - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE
function on_mouse_click(int button) {
	// Called when a mouse button is clicked.
	if (IsGamePaused() == 1) {
		// If the game is paused, don't react to mouse clicks
		// so do nothing
	}
	else if ((button==eMouseLeft)&&(mouse.Mode==eModeWalkto)) {	
		// Call special walk function for looping room
		Walk(mouse.x,mouse.y,GetViewportX());
		ClaimEvent();
	}
}
#sectionend on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Room - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {
  // script for Room: Player enters screen (before fadein)
  
	// Animate objects
	oPendulum.SetView(VOFACTORY,0);
	oPendulum.Animate(0,3,eRepeat,eNoBlock);
	oDog.SetView(VOFACTORY,1);
	oDog.Animate(1,2,eRepeat,eNoBlock);

	// Setup help GUI
	gHelpTitle.Text = "Factory Looping Room";
	gHelpDescription.Text = "This room illustrates how to make a room continously scroll or loop in the horizontal directions.";
	gHelpReference.Text = "Manual Reference:[GetViewPortX/Y, SetViewPort";  
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_c  // DO NOT EDIT OR REMOVE THIS LINE
function room_c() {
	// script for Room: Player enters screen (after fadein)
	player.Walk(982,188,eBlock,eWalkableAreas);
	player.FaceCharacter(cLoopy,eBlock);
	cLoopy.SayBackground("I'm Loopy");  
	cLoopy.Say("Welcome to Looping Town");
	cLoopy.Say("Want to see a Looping room?");
	cLoopy.Say("Just walk along one direction and wait until you see the same things in the background!");
	player.Say("You're scary!");
}
#sectionend room_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot12_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot12_a() {
	// script for hotspot12: INTERACT WITH HOTSPOT
	player.ChangeRoom(crmFactoryAdvanced,280,134);  
}
#sectionend hotspot12_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// House - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_a() {
	// script for hotspot1: LOOK AT HOTSPOT
	player.Say("It's a house");  
}
#sectionend hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Trees - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot2_a() {
	// script for hotspot2: LOOK AT HOTSPOT
	player.Say("Some trees");  
}
#sectionend hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Bird Bath - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_a() {
	// script for hotspot3: LOOK AT HOTSPOT
	player.Say("That's where birds have their bath");  
	player.Say("and also where kids drink water");  
}
#sectionend hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Church - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_a() {
	// script for hotspot4: LOOK AT HOTSPOT
	player.Say("The Looping church");
	player.Say("Just besides the graveyard");
}
#sectionend hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Graveyard - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot5_a() {
	// script for hotspot5: LOOK AT HOTSPOT
	player.Say("It reads ROOP");
	player.Say("Which stands for Return On Other Person");
	player.Say("It's a reminder of the giant loop of life");
}
#sectionend hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Loopus - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot6_a() {
	// script for hotspot6: LOOK AT HOTSPOT
	player.Say("It's a statue of Loopus");
	player.Say("He's Looping God");
}
#sectionend hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_a() {
	// script for hotspot8: LOOK AT HOTSPOT
	player.Say("It reads:");
	player.Say("'Great Loopus, lord of the Looping world");
	player.Say("Let us loop around you per omni secula secularum'");
}
#sectionend hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Store - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot9_a() {
	// script for hotspot9: LOOK AT HOTSPOT
	player.Say("There's where we buy stuff for everyday life");  
}
#sectionend hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Mailbox - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot10_a() {
	// script for hotspot10: LOOK AT HOTSPOT
	player.Say("Have you ever sent an email from an auto-answering address");
	player.Say("to another auto-answering address?");
	player.Say("Looping mail is what you get!");
}
#sectionend hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Sign - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot11_a() {
	// script for hotspot11: LOOK AT HOTSPOT
	player.Say("'Looping allowed'");  
}
#sectionend hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Pendulum - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart object0_a  // DO NOT EDIT OR REMOVE THIS LINE
function object0_a() {
	// script for object0: LOOK AT OBJECT
	player.Say("It's one of the most common looping movements");  
}
#sectionend object0_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Dog - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart object1_a  // DO NOT EDIT OR REMOVE THIS LINE
function object1_a() {
	// script for object1: LOOK AT OBJECT
	player.Say("A huge dog is wagging its tail loopingly.");
}
#sectionend object1_a  // DO NOT EDIT OR REMOVE THIS LINE

function hExit_Look()
{
DisplayMessage(0);
}
