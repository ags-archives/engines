<HTML>
<head><title>Game / Global functions</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic50"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags28.htm#topic38"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags55.htm#topic49"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags57.htm#GUIFuncsAndProps"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Game / Global functions</H2>
<P>
<A HREF="#AbortGame">AbortGame</A><BR>
<A HREF="#CallRoomScript">CallRoomScript</A><BR>
<A HREF="#Game.ChangeTranslation">ChangeTranslation</A><BR>
<A HREF="#ClaimEvent">ClaimEvent</A><BR>
<A HREF="#Debug">Debug</A><BR>
<A HREF="#DeleteSaveSlot">DeleteSaveSlot</A><BR>
<A HREF="#DisableInterface">DisableInterface</A><BR>
<A HREF="#Game.DoOnceOnly">DoOnceOnly</A><BR>
<A HREF="#EnableInterface">EnableInterface</A><BR>
<A HREF="#EndCutscene">EndCutscene</A><BR>
<A HREF="#Game.GetColorFromRGB">GetColorFromRGB</A><BR>
<A HREF="#Game.GetFrameCountForLoop">GetFrameCountForLoop</A><BR>
<A HREF="#GetGameOption">GetGameOption</A><BR>
<A HREF="#GetGameParameter">GetGameParameter</A><BR>
<A HREF="#GetGameSpeed">GetGameSpeed</A><BR>
<A HREF="#GetGlobalInt">GetGlobalInt</A><BR>
<A HREF="#GetGraphicalVariable">GetGraphicalVariable</A><BR>
<A HREF="#Game.GetLocationName">GetLocationName</A><BR>
<A HREF="#GetLocationType">GetLocationType</A><BR>
<A HREF="#Game.GetLoopCountForView">GetLoopCountForView</A><BR>
<A HREF="#Game.GetRunNextSettingForLoop">GetRunNextSettingForLoop</A><BR>
<A HREF="#Game.GetSaveSlotDescription">GetSaveSlotDescription</A><BR>
<A HREF="#GetTextHeight">GetTextHeight</A><BR>
<A HREF="#GetTextWidth">GetTextWidth</A><BR>
<A HREF="#GetTranslation">GetTranslation</A><BR>
<A HREF="#Game.GetViewFrame">GetViewFrame</A><BR>
<A HREF="#GiveScore">GiveScore</A><BR>
<A HREF="#Game.InputBox">InputBox</A><BR>
<A HREF="#InventoryScreen">InventoryScreen</A><BR>
<A HREF="#IsGamePaused">IsGamePaused</A><BR>
<A HREF="#IsInterfaceEnabled">IsInterfaceEnabled</A><BR>
<A HREF="#IsInteractionAvailable">IsInteractionAvailable</A><BR>
<A HREF="#IsKeyPressed">IsKeyPressed</A><BR>
<A HREF="#IsTimerExpired">IsTimerExpired</A><BR>
<A HREF="#IsTranslationAvailable">IsTranslationAvailable</A><BR>
<A HREF="#MoveCharacterToHotspot">MoveCharacterToHotspot</A><BR>
<A HREF="#MoveCharacterToObject">MoveCharacterToObject</A><BR>
<A HREF="#PauseGame">PauseGame</A><BR>
<A HREF="#ProcessClick">ProcessClick</A><BR>
<A HREF="#QuitGame">QuitGame</A><BR>
<A HREF="#Random">Random</A><BR>
<A HREF="#RestartGame">RestartGame</A><BR>
<A HREF="#RestoreGameDialog">RestoreGameDialog</A><BR>
<A HREF="#RestoreGameSlot">RestoreGameSlot</A><BR>
<A HREF="#RunAGSGame">RunAGSGame</A><BR>
<A HREF="#SaveGameDialog">SaveGameDialog</A><BR>
<A HREF="#SaveGameSlot">SaveGameSlot</A><BR>
<A HREF="#SaveScreenShot">SaveScreenShot</A><BR>
<A HREF="#SetAmbientTint">SetAmbientTint</A><BR>
<A HREF="#SetGameOption">SetGameOption</A><BR>
<A HREF="#SetGameSpeed">SetGameSpeed</A><BR>
<A HREF="#SetGlobalInt">SetGlobalInt</A><BR>
<A HREF="#SetGraphicalVariable">SetGraphicalVariable</A><BR>
<A HREF="#SetMultitaskingMode">SetMultitaskingMode</A><BR>
<A HREF="#SetRestartPoint">SetRestartPoint</A><BR>
<A HREF="#Game.SetSaveGameDirectory">SetSaveGameDirectory</A><BR>
<A HREF="#SetTextWindowGUI">SetTextWindowGUI</A><BR>
<A HREF="#SetTimer">SetTimer</A><BR>
<A HREF="#SkipUntilCharacterStops">SkipUntilCharacterStops</A><BR>
<A HREF="#StartCutscene">StartCutscene</A><BR>
<A HREF="#UpdateInventory">UpdateInventory</A><BR>
<A HREF="#UnPauseGame">UnPauseGame</A><BR>
<A HREF="#Wait">Wait</A><BR>
<A HREF="#WaitKey">WaitKey</A><BR>
<A HREF="#WaitMouseKey">WaitMouseKey</A><BR>
<A HREF="#Game.CharacterCount">CharacterCount property</A><BR>
<A HREF="#Game.DialogCount">DialogCount property</A><BR>
<A HREF="#Game.FileName">FileName property</A><BR>
<A HREF="#Game.FontCount">FontCount property</A><BR>
<A HREF="#Game.GlobalMessages">GlobalMessages property</A><BR>
<A HREF="#Game.GlobalStrings">GlobalStrings property</A><BR>
<A HREF="#Game.GUICount">GUICount property</A><BR>
<A HREF="#Game.IgnoreUserInputAfterTextTimeoutMs">IgnoreUserInputAfterTextTimeoutMs property</A><BR>
<A HREF="#Game.InSkippableCutscene">InSkippableCutscene property</A><BR>
<A HREF="#Game.InventoryItemCount">InventoryItemCount property</A><BR>
<A HREF="#Game.MinimumTextDisplayTimeMs">MinimumTextDisplayTimeMs property</A><BR>
<A HREF="#Game.MouseCursorCount">MouseCursorCount property</A><BR>
<A HREF="#Game.Name">Name property (game)</A><BR>
<A HREF="#Game.NormalFont">NormalFont property</A><BR>
<A HREF="#Game.SkippingCutscene">SkippingCutscene property</A><BR>
<A HREF="#Game.SpeechFont">SpeechFont property</A><BR>
<A HREF="#Game.SpriteHeight">SpriteHeight property</A><BR>
<A HREF="#Game.SpriteWidth">SpriteWidth property</A><BR>
<A HREF="#Game.TextReadingSpeed">TextReadingSpeed property</A><BR>
<A HREF="#Game.TranslationFilename">TranslationFilename property</A><BR>
<A HREF="#Game.UseNativeCoordinates">UseNativeCoordinates property</A><BR>
<A HREF="#Game.ViewCount">ViewCount property</A><BR>
<P>

<HR>
<A NAME="AbortGame"></A>
<H3>AbortGame</H3>
<PRE>
AbortGame(string message, ...)
</PRE>
Aborts the game and returns to the operating system.<P>
The standard AGS error dialog is displayed, with the script line numbers and call stack,
along with <I>message</I> (which can include <TT>%d</TT> and <TT>%s</TT> Display-style tokens).<P>
You can use this function rather than QuitGame if you are writing some debugging checks
into your script, to make sure that the user calls your functions in the correct way.<P>
This command should ideally never be called in the final release of a game.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
function MakeWider(int newWidth) {
  if (newWidth &lt; 10)
    AbortGame("newWidth expects a width of at least 10!");
}
</PRE>
will abort the game if MakeWider is called with a parameter less than 10.<P>
SeeAlso: <A HREF="ags56.htm#QuitGame">QuitGame</A><P>


<HR>
<A NAME="CallRoomScript"></A>
<H3>CallRoomScript</H3>
<PRE>
CallRoomScript (int value)
</PRE>
Calls the <TT>on_call</TT> function in the current room script. This is useful for things
like the text parser, where you want to check for general game sentences, and then ask
the current room if the sentence was relevant to it.<P>
The on_call function will be called in the current room script, with its <TT>value</TT>
parameter having the value you pass here. This allows it to distinguish between different
tasks, and saves you having to use a GlobalInt to tell it what to do.<P>
If the current room has no on_call function, nothing will happen. No error will occur.<P>
You write the on_call function into the room script ("Edit script" button on Room Settings
pane), similar to the way you do dialog_request in the global script:
<PRE>
function on_call (int value) {
  if (value == 1) {
    // Check text input
    if (Parser.Said("get apple"))
      Display("No, leave the tree alone.");
  }
}
</PRE>
The function doesn't get called immediately; instead, the engine will run it in due course,
probably during the next game loop, so you can't use any values set by it immediately.<P>
Once the on_call function has executed (or not if there isn't one), the
game.roomscript_finished  variable will be set to 1, so you can check for that in your
repeatedly_execute script if you need to do something afterwards.<P>
SeeAlso: <A HREF="ags17.htm#TextParser">The text parser documentation</A><P>


<HR>
<A NAME="Game.ChangeTranslation"></A>
<H3>ChangeTranslation</H3>
<PRE>
static bool Game.ChangeTranslation(string newTranslationName)
</PRE>
Changes the active translation to <I>newTranslationName</I>. This must be the file name without
the extension, for example "French" or "Spanish". It can also be a blank string, in which case
the current translation will be switched off and the game will revert to the default language.<P>
Returns <I>true</I> if the translation was changed successfully, or <I>false</I> if there was a
problem (for example, you specified an invalid translation).<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example below.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.ChangeTranslation("Spanish") == true)
{
  Display("Changed the translation to Spanish!");
}
else
{
  Display("Unable to change the translation");
}
</PRE>
will attempt to change the translation to Spanish<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.0</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.TranslationFilename">Game.TranslationFilename</A>,
<A HREF="ags56.htm#IsTranslationAvailable">IsTranslationAvailable</A><P>


<HR>
<A NAME="ClaimEvent"></A>
<H3>ClaimEvent</H3>
<PRE>
ClaimEvent()
</PRE>
This command is used in a room script or script module's <I>on_key_press</I> or
<I>on_mouse_click</I> function, and it tells AGS not to run the global script afterwards.<P>
For example, if your room script responds to the player pressing the space bar, and
you don't want the global script's on_key_press to handle it as well, then use this
command.<P>
This is useful if you have for example a mini-game in the room, and you want to use
some keys for a different purpose to what they normally do.<P>
The normal order in which scripts are called for <I>on_key_press</I> and <I>on_mouse_click</I>
is as follows:
<UL>

<LI> room script
<LI> script modules, in order
<LI> global script
</UL>

If any of these scripts calls ClaimEvent, then the chain is aborted at that point.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (keycode == ' ') {
  Display("You pressed space in this room!");
  ClaimEvent();
}
</PRE>
prevents the global script on_key_press from running if the player pressed the space bar.<P>
SeeAlso: <A HREF="ags42.htm#TextScriptEvents">Script events</A><P>
<P>

<HR>
<A NAME="Debug"></A>
<H3>Debug</H3>
<PRE>
Debug (int command, int data)
</PRE>
This function provides all the debug services in the system. It performs
various different tasks, depending on the value of the COMMAND parameter.
If debug mode is off, then this function does nothing. This allows you to
leave your script unaltered when you distribute your game, so you just have
to turn off debug mode in the AGS Editor.<P>
The DATA parameter depends on the command - pass 0 if it is not used.
All the valid values for the COMMAND parameter are listed below along with
what they do:
<PRE>
0   All inventory - gives the current player character one of every
    inventory item. This is useful for testing so that you don't have to
    go and pick up items every time you test part of the game where they
    are required.
1   Display interpreter version - the engine will display its version
    number and build date.
2   Walkable from here - fills in the parts of the screen where the player
    can walk from their current location. This is useful if you think the
    path-finder is not working properly. All walkable areas are drawn in
    their respective colours, but with blocking areas at characters feet
    removed.
3   Teleport - displays a dialog box asking for what room you want to go
    to, and then calls ChangeRoom to teleport you there. Useful for skipping
    parts of the game or going to a specific point to test something.
4   Show FPS - toggles whether the current frames per second is displayed
    on the screen. Pass DATA as 1 to turn this on, 0 to turn it off.
</PRE>
<I>See Also:</I> <A HREF="ags24.htm#Debuggingfeatures">Debugging features</A><P>


<HR>
<A NAME="DeleteSaveSlot"></A>
<H3>DeleteSaveSlot</H3>
<PRE>
DeleteSaveSlot (int slot)
</PRE>
Deletes the save game in save slot number SLOT.<P>
NOTE: if you specify one of the standard slots (1-50), then AGS will rearrange the other
save games to make sure there is a sequence of slots from 1 upwards. Therefore, you will
need to refresh any save game lists you have after calling this function.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DeleteSaveSlot (130);
</PRE>
deletes save game slot 130 (which we should have saved earlier).<P>
<I>See Also:</I> <A HREF="ags56.htm#RestoreGameSlot">RestoreGameSlot</A>, <A HREF="ags56.htm#SaveGameSlot">SaveGameSlot</A><P>


<HR>
<A NAME="DisableInterface"></A>
<H3>DisableInterface</H3>
<PRE>
DisableInterface ()
</PRE>
Disables the player interface. This works the same way as it is disabled
while an animation is running: the mouse cursor is changed to the Wait
cursor, and mouse clicks will not be sent through to the "on_mouse_click"
function. Also, all interface buttons will be disabled.<P>
<B>NOTE:</B> AGS keeps a count of the number of times DisableInterface is called. Every
call to DisableInterface must be matched by a later call to EnableInterface, otherwise
the interface will get permanently disabled.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DisableInterface();
</PRE>
will disable the user's interface.<P>
<I>See Also:</I> <A HREF="ags56.htm#EnableInterface">EnableInterface</A>, <A HREF="ags56.htm#IsInterfaceEnabled">IsInterfaceEnabled</A><P>


<HR>
<A NAME="Game.DoOnceOnly"></A>
<H3>DoOnceOnly</H3>
<PRE>
static bool Game.DoOnceOnly(const string token)
</PRE>
This function gives you an easy way of making some code run only the first time that
the player encounters it. It is commonly used for awarding points.<P>
The <I>token</I> parameter is an arbitrary string. You can pass whatever you like in
for this, but <B>IT MUST BE UNIQUE</B>. It is this string that allows AGS to determine
whether this section of code has been run before, therefore you should make sure
that <B>you do not use the same token string in two different places in your game</B>.<P>
Returns <I>true</I> the first time that it is called with this token, and <I>false</I> thereafter.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example below.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.DoOnceOnly("open cupboard")) {
  GiveScore(5);
}
</PRE>
will give the player 5 points the first time this script is run.<P>
<I>See Also:</I> <A HREF="ags56.htm#GiveScore">GiveScore</A><P>


<HR>
<A NAME="EnableInterface"></A>
<H3>EnableInterface</H3>
<PRE>
EnableInterface ()
</PRE>
Re-enables the player interface, which was previously disabled with
the DisableInterface function. Everything which was disabled is returned
to normal.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
EnableInterface();
</PRE>
will enable the user's interface.<P>
<I>See Also:</I> <A HREF="ags56.htm#DisableInterface">DisableInterface</A>, <A HREF="ags56.htm#IsInterfaceEnabled">IsInterfaceEnabled</A><P>


<HR>
<A NAME="EndCutscene"></A>
<H3>EndCutscene</H3>
<PRE>
EndCutscene()
</PRE>
Marks the end of a cutscene. If the player skips the cutscene, the game will
fast-forward to this point. This function returns 0 if the player watched the cutscene,
or 1 if they skipped it.<P>
<I>See Also:</I> <A HREF="ags56.htm#StartCutscene">StartCutscene</A>,
<A HREF="ags56.htm#Game.InSkippableCutscene">Game.InSkippableCutscene</A>,
<A HREF="ags56.htm#Game.SkippingCutscene">Game.SkippingCutscene</A><P>


<HR>
<A NAME="Game.GetColorFromRGB"></A>
<H3>GetColorFromRGB</H3>
<I>(Formerly known as RawSetColorRGB, which is now obsolete)</I><P>
<PRE>
static int Game.GetColorFromRGB(int red, int green, int blue)
</PRE>
Gets the AGS Colour Number for the specified RGB colour. The red, green and blue
components are values from 0 to 255. This function gives you a run-time equivalent
to the Colour Finder in the editor.<P>
This command is slow in 256-colour games, since the palette has to be scanned to find the
nearest matching colour.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example below.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
surface.DrawingColor = Game.GetColorFromRGB(0, 255, 0);
surface.DrawLine(0, 0, 50, 50);
surface.Release();
</PRE>
will draw a bright green line onto the room background<P>
<I>See Also:</I> <A HREF="ags53.htm#DrawingSurface.DrawingColor">DrawingSurface.DrawingColor</A><P>


<HR>
<A NAME="Game.GetFrameCountForLoop"></A>
<H3>GetFrameCountForLoop</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
static int Game.GetFrameCountForLoop(int view, int loop)
</PRE>
Returns the number of frames in the specified loop of the specified view.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example for more.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int frameCount = Game.GetFrameCountForLoop(SWIMMING, 2);
Display("Loop 2 in SWIMMING view has %d frames.", frameCount);
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.GetLoopCountForView">Game.GetLoopCountForView</A>,
<A HREF="ags56.htm#Game.GetRunNextSettingForLoop">Game.GetRunNextSettingForLoop</A>,
<A HREF="ags56.htm#Game.GetViewFrame">Game.GetViewFrame</A><P>


<HR>
<A NAME="GetGameOption"></A>
<H3>GetGameOption</H3>
<PRE>
GetGameOption (option)
</PRE>
Gets the current setting of one of the game options, originally set in the AGS Editor
Game Settings pane.<P>
OPTION specifies which option to get, and its current value is returned.<P>
The valid values for OPTION are listed in <A HREF="ags56.htm#SetGameOption">SetGameOption</A>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetGameOption(OPT_PIXELPERFECT) == 1) {
  Display("pixel-perfect click deteciton is on!");
}
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#SetGameOption">SetGameOption</A><P>
<P>

<HR>
<A NAME="GetGameParameter"></A>
<H3>GetGameParameter</H3>
The <I>GetGameParameter</I> function is now obsolete.<P>
It has been replaced with the following functions and properties:<P>
<A HREF="ags56.htm#Game.SpriteWidth">Game.SpriteWidth</A> (was GP_SPRITEWIDTH) <br> 
<A HREF="ags56.htm#Game.SpriteHeight">Game.SpriteHeight</A> (was GP_SPRITEHEIGHT) <br> 
<A HREF="ags56.htm#Game.GetLoopCountForView">Game.GetLoopCountForView</A> (was GP_NUMLOOPS) <br> 
<A HREF="ags56.htm#Game.GetFrameCountForLoop">Game.GetFrameCountForLoop</A> (was GP_NUMFRAMES) <br> 
<A HREF="ags56.htm#Game.GetRunNextSettingForLoop">Game.GetRunNextSettingForLoop</A> (was GP_ISRUNNEXTLOOP) <br> 
<A HREF="ags56.htm#Game.GetViewFrame">Game.GetViewFrame</A> (was GP_FRAMExxx, GP_ISFRAMEFLIPPED) <br> 
<A HREF="ags56.htm#Game.GUICount">Game.GUICount</A> (was GP_NUMGUIS) <br> 
<A HREF="ags75.htm#Room.ObjectCount">Room.ObjectCount</A> (was GP_NUMOBJECTS) <br> 
<A HREF="ags56.htm#Game.CharacterCount">Game.CharacterCount</A> (was GP_NUMCHARACTERS) <br> 
<A HREF="ags56.htm#Game.InventoryItemCount">Game.InventoryItemCount</A>(was GP_NUMINVITEMS) <P>


<HR>
<A NAME="GetGameSpeed"></A>
<H3>GetGameSpeed</H3>
<PRE>
GetGameSpeed ()
</PRE>
Returns the current game speed (number of cycles per second).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetGameSpeed() &gt; 40) {
  SetGameSpeed(40);
}
</PRE>
will always keep the game speed at 40 cycles per second (in case the user has raised it ) <P>
<I>See Also:</I> <A HREF="ags56.htm#SetGameSpeed">SetGameSpeed</A><P>


<HR>
<A NAME="GetGlobalInt"></A>
<H3>GetGlobalInt</H3>
<PRE>
GetGlobalInt (int index)
</PRE>
Returns the value of global int INDEX.<P>
<B>NOTE:</B> GlobalInts are now considered obsolete. Consider using
<A HREF="ags19.htm#GlobalVariables">global variables</A> instead, which allow you to name
the variables.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetGlobalInt(20) == 1) {
  // code here
}
</PRE>
will execute the code only if Global Integer 20 is 1.<P>
<I>See Also:</I> <A HREF="ags56.htm#SetGlobalInt">SetGlobalInt</A>, <A HREF="ags56.htm#Game.GlobalStrings">Game.GlobalStrings</A><P>
<P>

<HR>
<A NAME="GetGraphicalVariable"></A>
<H3>GetGraphicalVariable</H3>
<PRE>
GetGraphicalVariable (string variable_name);
</PRE>
Returns the value of the interaction editor VARIABLE_NAME variable. This allows your
script to access the values of variables set in the interaction editor.<P>
<B>NOTE:</B> This command is obsolete, and is only provided for backwards compatibility
with AGS 2.x. When writing new code, use <A HREF="ags19.htm#GlobalVariables">global variables</A>
instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetGraphicalVariable("climbed rock")==1)
   { code here }
</PRE>
will execute the code only if interaction variable "climbed rock" is 1.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGlobalInt">GetGlobalInt</A>, <A HREF="ags56.htm#SetGraphicalVariable">SetGraphicalVariable</A><P>


<HR>
<A NAME="Game.GetLocationName"></A>
<H3>GetLocationName</H3>
<I>(Formerly known as global function GetLocationName, which is now obsolete)</I><P>
<PRE>
static String Game.GetLocationName(int x, int y)
</PRE>
Returns the name of whatever is on the screen at (X,Y). This allows you to
create the Lucasarts-style status lines reading "Look at xxx" as the player
moves the cursor over them.<P>
<B>NOTE:</B> Unlike ProcessClick, this function actually works on what the player can
see on the screen - therefore, if the co-ordinates are on a GUI, a blank string is returned.<P>
<B>NOTE:</B> The co-ordinates are SCREEN co-ordinates, NOT ROOM co-ordinates. This
means that with a scrolling room, the co-ordinates you pass are relative to
the screen's current position, and NOT absolute room co-ordinates. This
means that this function is suitable for use with the mouse cursor position
variables.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String location = Game.GetLocationName(mouse.x, mouse.y);
</PRE>
will get the name of whatever the mouse is over into the string variable.<P>
<I>See Also:</I> <A HREF="ags65.htm#Hotspot.Name">Hotspot.Name</A>, <A HREF="ags66.htm#InventoryItem.Name">InventoryItem.Name</A>,
<A HREF="ags56.htm#GetLocationType">GetLocationType</A>, <A HREF="ags70.htm#Object.Name">Object.Name</A><P>


<HR>
<A NAME="GetLocationType"></A>
<H3>GetLocationType</H3>
<PRE>
GetLocationType(int x, int y)
</PRE>
Returns what type of thing is at location (X,Y); whether it is a character,
object, hotspot or nothing at all. This may be useful if you want to
process a mouse click differently depending on what the player clicks on.<P>
<B>NOTE:</B> The co-ordinates are screen co-ordinates, NOT room co-ordinates. See
description of GetLocationName for more info.<P>
The value returned is one of the following:
<PRE>
eLocationNothing    nothing, GUI or inventory
eLocationHotspot    a hotspot
eLocationCharacter  a character
eLocationObject     an object
</PRE>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetLocationType(mouse.x,mouse.y) == eLocationCharacter)
    mouse.Mode = eModeTalk;
</PRE>
will set the cursor mode to talk if the cursor is over a character.<P>
<I>See Also:</I> <A HREF="ags65.htm#Hotspot.GetAtScreenXY">Hotspot.GetAtScreenXY</A>,
<A HREF="ags56.htm#Game.GetLocationName">Game.GetLocationName</A>,
<A HREF="ags70.htm#Object.GetAtScreenXY">Object.GetAtScreenXY</A><P>


<HR>
<A NAME="Game.GetLoopCountForView"></A>
<H3>GetLoopCountForView</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
static int Game.GetLoopCountForView(int view)
</PRE>
Returns the number of loops in the specified view.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example for more.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int loops = Game.GetLoopCountForView(SWIMMING);
Display("The SWIMMING view (view %d) has %d loops.", SWIMMING, loops);
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.GetRunNextSettingForLoop">Game.GetRunNextSettingForLoop</A>,
<A HREF="ags56.htm#Game.GetFrameCountForLoop">Game.GetFrameCountForLoop</A>,
<A HREF="ags56.htm#Game.GetViewFrame">Game.GetViewFrame</A><P>


<HR>
<A NAME="Game.GetRunNextSettingForLoop"></A>
<H3>GetRunNextSettingForLoop</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
static bool Game.GetRunNextSettingForLoop(int view, int loop)
</PRE>
Returns whether the specified loop in the specified view has the "Run the next loop after this one" option checked.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example for more.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.GetRunNextSettingForLoop(SWIMMING, 5) == true) {
  Display("Loop 5 in view SWIMMING does have Run Next Loop set.");
}
else {
  Display("Loop 5 in view SWIMMING does not have Run Next Loop set.");
}
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.GetLoopCountForView">Game.GetLoopCountForView</A>,
<A HREF="ags56.htm#Game.GetFrameCountForLoop">Game.GetFrameCountForLoop</A>,
<A HREF="ags56.htm#Game.GetViewFrame">Game.GetViewFrame</A><P>


<HR>
<A NAME="Game.GetSaveSlotDescription"></A>
<H3>GetSaveSlotDescription</H3>
<I>(Formerly known as global function GetSaveSlotDescription, which is now obsolete)</I><P>
<PRE>
static String Game.GetSaveSlotDescription(int slot)
</PRE>
Gets the text description of save game slot SLOT.<P>
If the slot number provided does not exist, returns <I>null</I>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String description = Game.GetSaveSlotDescription(10);
</PRE>
will get the description of save slot 10 into the variable.<P>
<I>See Also:</I> <A HREF="ags54.htm#DynamicSprite.CreateFromSaveGame">DynamicSprite.CreateFromSaveGame</A>,
<A HREF="ags56.htm#RestoreGameSlot">RestoreGameSlot</A>, <A HREF="ags56.htm#SaveGameSlot">SaveGameSlot</A><P>


<HR>
<A NAME="GetTextHeight"></A>
<H3>GetTextHeight</H3>
<PRE>
GetTextHeight(string text, FontType font, int width)
</PRE>
Calculates the height on the screen that drawing TEXT in FONT within an area of WIDTH
would take up.<P>
This allows you to work out how tall a message displayed with a command like
<A HREF="ags53.htm#DrawingSurface.DrawMessageWrapped">DrawMessageWrapped</A> will be. WIDTH is
the width of the area in which the text will be displayed.<P>
The height is returned in normal 320-resolution pixels, so it can be used with the
screen display commands.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int height = GetTextHeight("The message on the GUI!", Game.NormalFont, 100);
gBottomLine.SetPosition(0, 200 - height);
</PRE>
will move the BOTTOMLINE GUI so that it can display the text within the screen.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetTextWidth">GetTextWidth</A>, <A HREF="ags53.htm#DrawingSurface.DrawString">DrawingSurface.DrawString</A><P>
<P>

<HR>
<A NAME="GetTextWidth"></A>
<H3>GetTextWidth</H3>
<PRE>
GetTextWidth(string text, FontType font)
</PRE>
Returns the width on the screen that drawing TEXT in FONT on one line would take up.<P>
This could be useful if you manually need to centre or right-align some text, for
example with the raw drawing routines. <P>
The width is returned in normal 320-resolution pixels, so it can be used with the
screen display commands.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
surface.DrawingColor = 14;
int width = GetTextWidth("Hello!", Game.NormalFont);
surface.DrawString(160 - (width / 2), 100, Game.NormalFont, "Hello!");
surface.Release();
</PRE>
will print "Hello!" onto the middle of the background scene.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetTextHeight">GetTextHeight</A>, <A HREF="ags53.htm#DrawingSurface.DrawString">DrawingSurface.DrawString</A><P>


<HR>
<A NAME="GetTranslation"></A>
<H3>GetTranslation</H3>
<PRE>
String GetTranslation(string original)
</PRE>
Gets the translated equivalent of the supplied string. You do not normally
need to use this since the game translates most things for you. However,
if you have used an InputBox or other form of user input, and want to
compare the user's input to a particular string, it cannot be translated
automatically. So, you can do this instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String buffer = Game.InputBox("Enter the password:");
if (buffer.CompareTo(GetTranslation("secret")) == 0) {
  // it matched the current translation of "secret"
}
</PRE>
If there is no translation for the supplied string, it will be returned
unchanged, so it is always safe to use this function.<P>
<I>See Also:</I> <A HREF="ags56.htm#IsTranslationAvailable">IsTranslationAvailable</A><P>


<HR>
<A NAME="Game.GetViewFrame"></A>
<H3>GetViewFrame</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
static ViewFrame* Game.GetViewFrame(int view, int loop, int frame)
</PRE>
Returns a <I>ViewFrame</I> instance for the specified frame in the specified loop of the specified view.<P>
This instance allows you to query properties of the frame itself, such as its graphic, its frame-linked
sound setting, and so forth.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example for more.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
ViewFrame *frame = Game.GetViewFrame(SWIMMING, 2, 3);
Display("Frame 3 in loop 2 of view SWIMMING has sprite slot %d.", frame.Graphic);
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.GetLoopCountForView">Game.GetLoopCountForView</A>,
<A HREF="ags56.htm#Game.GetRunNextSettingForLoop">Game.GetRunNextSettingForLoop</A>,
<A HREF="ags56.htm#Game.GetFrameCountForLoop">Game.GetFrameCountForLoop</A>,
<A HREF="ags80.htm#ViewFrame.Graphic">ViewFrame.Graphic</A>, <A HREF="ags80.htm#ViewFrame.Speed">ViewFrame.Speed</A><P>


<HR>
<A NAME="GiveScore"></A>
<H3>GiveScore</H3>
<PRE>
GiveScore (int score)
</PRE>
Adds SCORE to the player's score. This is preferable to directly modifying
the variable since it will play the score sound, update any status lines
and call the GOT_SCORE on_event function.<P>
Note that SCORE can be negative, in which case the score sound is NOT played.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
GiveScore(5);
</PRE>
will give 5 points to the player.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.DoOnceOnly">Game.DoOnceOnly</A><P>


<HR>
<A NAME="Game.InputBox"></A>
<H3>InputBox</H3>
<I>(Formerly known as global function InputBox, which is now obsolete)</I><P>
<PRE>
static String Game.InputBox(string prompt)
</PRE>
Pops up a window asking the user to type in a string, with PROMPT as the
text in the window. Whatever they type in will be returned from this function.<P>
This command displays a very basic input box, mainly useful for debugging
purposes. Due to the size of the window, only small strings up to about 20
characters can be typed in.<P>
The recommended way to obtain user input is to create your own GUI with a text
box on it, which allows you full customization of the look of the window.<P>
<B>TIP:</B> If you add a '!' character to the start of the prompt, then a Cancel button will be
available in the input box. If the player presses this Cancel button (or the ESC key),
a blank string is returned.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String name = Game.InputBox("!What is your name?");
</PRE>
will prompt the user for his name and store it in the string NAME. If the user presses Cancel,
the NAME string will be blank.<P>
<I>See Also:</I> <A HREF="ags77.htm#String.AsInt">String.AsInt</A><P>


<HR>
<A NAME="InventoryScreen"></A>
<H3>InventoryScreen</H3>
<PRE>
InventoryScreen ()
</PRE>
This command is obsolete. <P>
<B>This command was used for displaying a default inventory window
in previous versions of AGS, but is no longer supported.</B><P>
Instead of using this command, you should create your own Inventory GUI.
The Default Game template comes with an example.<P>


<HR>
<A NAME="IsGamePaused"></A>
<H3>IsGamePaused</H3>
<PRE>
IsGamePaused ()
</PRE>
Returns <I>true</I> if the game is currently paused, or <I>false</I> otherwise.
The game is paused when either the icon bar interface has been popped up,
or a "script-only" interface has been displayed with GUI.Visible=true. While
the game is paused, no animations or other updates take place.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsGamePaused()) UnPauseGame();
</PRE>
will unpause the game if it's paused.<P>
<I>See Also:</I> <A HREF="ags57.htm#GUI.Visible">GUI.Visible</A><P>


<HR>
<A NAME="IsInterfaceEnabled"></A>
<H3>IsInterfaceEnabled</H3>
<PRE>
IsInterfaceEnabled()
</PRE>
Returns 1 if the player interface is currently enabled, 0 if it is disabled.
The user interface is disabled while the cursor is set to the Wait cursor -
ie. while the character is performing a blocking Walk, or other blocking
action.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsInterfaceEnabled())
    DisableInterface();
</PRE>
will disable the user interface if it's enabled.<P>
<I>See Also:</I> <A HREF="ags56.htm#DisableInterface">DisableInterface</A>, <A HREF="ags56.htm#EnableInterface">EnableInterface</A><P>


<HR>
<A NAME="IsInteractionAvailable"></A>
<H3>IsInteractionAvailable</H3>
<PRE>
IsInteractionAvailable (int x, int y, int mode)
</PRE>
Checks whether there is an interaction defined for clicking on the screen at (X,Y)
in cursor mode MODE.<P>
This function is very similar to ProcessClick, except that rather than carry out any
interactions it encounters, it simply returns 1 if something would have happened, or 0 if
unhandled_event would have been run.<P>
This is useful for enabling options on a verb-coin style GUI, for example.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsInteractionAvailable(mouse.x,mouse.y, eModeLookat) == 0)
  Display("looking here would not do anything.");
</PRE>
<I>See Also:</I> <A HREF="ags66.htm#InventoryItem.IsInteractionAvailable">InventoryItem.IsInteractionAvailable</A>,
<A HREF="ags56.htm#ProcessClick">ProcessClick</A><P>


<HR>
<A NAME="IsKeyPressed"></A>
<H3>IsKeyPressed</H3>
<PRE>
IsKeyPressed(eKeyCode)
</PRE>
Tests whether the supplied key on the keyboard is currently pressed down
or not. You could use this to move an object while the player holds an
arrow key down, for instance.<P>
KEYCODE is one of the <A HREF="ags86.htm#ASCIIcodes">ASCII codes</A>, with some limitations:
since it tests the raw state of the key, you CANNOT pass the Ctrl+(A-Z)
or Alt+(A-Z) codes (since they are key combinations). You can, however,
use some extra codes which are listed at the bottom of the section.<P>
Returns 1 if the key is currently pressed, 0 if not.<P>
<B>NOTE:</B> The numeric keypad can have inconsistent keycodes between IsKeyPressed
and on_key_press. With IsKeyPressed, the numeric keypad always uses keycodes in the 370-381
range. on_key_press, however, passes different values if Num Lock is on since the key
presses are interpreted as the number key rather than the arrow key.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsKeyPressed(eKeyUpArrow) == 1)
  cEgo.Walk(cEgo.x, cEgo.y+3);
</PRE>
will move the character EGO upwards 3 pixels when the up arrow is pressed.<P>
<I>See Also:</I> <A HREF="ags68.htm#Mouse.IsButtonDown">Mouse.IsButtonDown</A><P>


<HR>
<A NAME="IsTimerExpired"></A>
<H3>IsTimerExpired</H3>
<PRE>
bool IsTimerExpired(int timer_id)
</PRE>
Checks whether the timer TIMER_ID has expired.
If the timeout set with SetTimer has elapsed, returns <I>true</I>.
Otherwise, returns <I>false</I>.<P>
Note that this function will only return <I>true</I> once - after that, the timer
is placed into an OFF state where it will always return <I>false</I> until restarted.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsTimerExpired(1)) {
  Display("Timer 1 expired");
}
</PRE>
will display a message when timer 1 expires.<P>
<I>See Also:</I> <A HREF="ags56.htm#SetTimer">SetTimer</A><P>


<HR>
<A NAME="IsTranslationAvailable"></A>
<H3>IsTranslationAvailable</H3>
<PRE>
IsTranslationAvailable ()
</PRE>
Finds out whether the player is using a game translation or not.<P>
Returns 1 if a translation is in use, 0 if not.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetTranslation">GetTranslation</A>,
<A HREF="ags56.htm#Game.ChangeTranslation">Game.ChangeTranslation</A>,
<A HREF="ags56.htm#Game.TranslationFilename">Game.TranslationFilename</A><P>


<HR>
<A NAME="MoveCharacterToHotspot"></A>
<H3>MoveCharacterToHotspot</H3>
<B>This function is now obsolete. Use Character.Walk instead</B><P>
<PRE>
MoveCharacterToHotspot (CHARID, int hotspot)
</PRE>
Moves the character CHARID from its current location to the walk-to point
for the specified hotspot. If the hotspot has no walk-to point, nothing
happens.<P>
This is a blocking call - control is not returned to the script until the
character has reached its destination.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
MoveCharacterToHotspot(EGO,6);
</PRE>
will move the character EGO to the hotspot's 6 "walk to point".<P>
<I>See Also:</I> <A HREF="ags65.htm#Hotspot.WalkToX">Hotspot.WalkToX</A>, <A HREF="ags65.htm#Hotspot.WalkToY">Hotspot.WalkToY</A>, 
<A HREF="ags49.htm#Character.Walk">Character.Walk</A>, <A HREF="ags56.htm#MoveCharacterToObject">MoveCharacterToObject</A><P>


<HR>
<A NAME="MoveCharacterToObject"></A>
<H3>MoveCharacterToObject</H3>
<B>This function is now obsolete. Use Character.Walk instead</B><P>
<PRE>
MoveCharacterToObject (CHARID, int object)
</PRE>
Moves the character CHARID from its current location to a position just below
the object OBJECT. This is useful for example, if you want the man to pick
up an object. 
This is a blocking call - control is not returned to the script until the
character has reached its destination.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
MoveCharacterToObject (EGO, 0);
object[0].Visible = false;
</PRE>
Will move the character EGO below object number 0, then turn off object 0.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Walk">Character.Walk</A>,
<A HREF="ags56.htm#MoveCharacterToHotspot">MoveCharacterToHotspot</A><P>
<P>

<HR>
<A NAME="PauseGame"></A>
<H3>PauseGame</H3>
<PRE>
PauseGame ()
</PRE>
Stops AGS processing character movement and animations. This has the same
effect on the game as happens when a modal GUI is popped up. Game processing
will not resume until you call the UnPauseGame function.<P>
<B>NOTE:</B> When the game is paused, game cycles will continue to run but
no animations or movement will be performed, and timers will not count down. Apart
from that, your scripts will continue to run as normal.<P>
<B>NOTE:</B> GUI button animations will not be paused by this command, so that
you can run animations on a pop-up GUI while the rest of the game is paused.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsKeyPressed(32)==1) PauseGame();
</PRE>
will pause the game if the player presses the space bar<P>
<I>See Also:</I> <A HREF="ags56.htm#UnPauseGame">UnPauseGame</A><P>


<HR>
<A NAME="ProcessClick"></A>
<H3>ProcessClick</H3>
<PRE>
ProcessClick (int x, int y, CursorMode)
</PRE>
Simulates clicking the mouse on the location (X,Y) on the screen, in the
specified cursor mode. Any conditions attached will be executed. For example,
<PRE>
ProcessClick (100, 50, eModeLookat);
</PRE>
will simulate clicking the mouse on co-ordinates (100,50) in the Look mode.<P>
<B>NOTE:</B> This function ignores all interfaces and acts as though the point is
directly visible. In other words, if the co-ordinates you pass happen to
lie on a button on an interface, what actually happens will be as if the
user clicked behind the interface onto the actual screen.<P>
The available cursor modes are the ones you define on your Cursors tab (but with eMode
prepended to them). Usually these are eModeWalkto, eModeLookat, etc.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
ProcessClick(mouse.x,mouse.y, eModeLookat);
</PRE>
will simulate a click in the LOOK MODE where the cursor is.<P>
<I>See Also:</I> <A HREF="ags56.htm#IsInteractionAvailable">IsInteractionAvailable</A>,
<A HREF="ags65.htm#Hotspot.RunInteraction">Hotspot.RunInteraction</A><P>


<HR>
<A NAME="QuitGame"></A>
<H3>QuitGame</H3>
<PRE>
QuitGame(int ask_first)
</PRE>
Exits the game and returns to the operating system.<P>
If ASK_FIRST is zero, it will exit immediately. If ASK_FIRST is not zero,
it will first display a message box asking the user if they are sure they
want to quit.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
QuitGame(0);
</PRE>
will quit the game without asking the player to confirm.<P>
<I>See Also:</I> <A HREF="ags56.htm#AbortGame">AbortGame</A><P>


<HR>
<A NAME="Random"></A>
<H3>Random</H3>
<PRE>
Random (int max)
</PRE>
Returns a random number between 0 and MAX. This could be useful to do
various effects in your game.<P>
<B>NOTE:</B> The range returned is inclusive - ie. if you do  Random(3);  then it
can return 0, 1, 2 or 3.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int ran=Random(2);
if (ran==0) cEgo.ChangeRoom(1);
else if (ran==1) cEgo.ChangeRoom(2);
else cEgo.ChangeRoom(3);
</PRE>
will change the current room to room 1,2 or 3 depending on a random result.<P>


<HR>
<A NAME="RestartGame"></A>
<H3>RestartGame</H3>
<PRE>
RestartGame ()
</PRE>
Restarts the game from the beginning.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsKeyPressed(365) == 1) RestartGame(); 
</PRE>
will restart the game if the player presses the F7 key.<P>
<I>SeeAlso:</I> <A HREF="ags56.htm#SetRestartPoint">SetRestartPoint</A><P>


<HR>
<A NAME="RestoreGameDialog"></A>
<H3>RestoreGameDialog</H3>
<PRE>
RestoreGameDialog ()
</PRE>
Displays the restore game dialog, where the player can select a previously
saved game position to restore.<P>
The dialog is not displayed immediately; instead, it will be displayed when
the script function finishes executing.<P>

<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsKeyPressed(363) == 1) RestoreGameDialog();
</PRE>
will bring up the restore game dialog if the player presses the F5 key.<P>
<I>See Also:</I> <A HREF="ags56.htm#RestoreGameSlot">RestoreGameSlot</A>, <A HREF="ags56.htm#SaveGameDialog">SaveGameDialog</A><P>


<HR>
<A NAME="RestoreGameSlot"></A>
<H3>RestoreGameSlot</H3>
<PRE>
RestoreGameSlot (int slot)
</PRE>
Restores the game position saved into slot number SLOT. You might want to
use these specific slot functions if for example you only want to allow the
player to have one save game position rather than the usual 20. If this slot
number does not exist, an error message is displayed to the player but the
game continues. To avoid the error, use the GetSaveSlotDescription function
to see if the position exists before restoring it.<P>
<B>NOTE:</B> The game will not be restored immediately; instead, it will be
restored when the script function finishes executing.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
RestoreGameSlot(30);
</PRE>
will restore game slot 30 if this slot number exists.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.GetSaveSlotDescription">Game.GetSaveSlotDescription</A>,
<A HREF="ags56.htm#RestoreGameDialog">RestoreGameDialog</A>, <A HREF="ags56.htm#SaveGameSlot">SaveGameSlot</A><P>


<HR>
<A NAME="RunAGSGame"></A>
<H3>RunAGSGame</H3>
<PRE>
RunAGSGame (string filename, int mode, int data)
</PRE>
Quits the current game, and loads up FILENAME instead. FILENAME must be an AGS game EXE
or AC2GAME.AGS file, and it must be in the current directory.<P>
MODE specifies various options about how you want to run the game. Currently the supported
values are:
<PRE>
0   Current game is completely exited, new game runs as if it had been launched separately
1   GlobalInt values are preserved and are not set to 0 for the new game.
</PRE>
DATA allows you to pass an integer through to the next game. The value you pass here
will be accessible to the loaded game by it reading the  game.previous_game_data  variable.<P>
The save game slots are shared between the two games, and if you load a save slot that
was saved in the other game, it will automatically be loaded.<P>
Bear in mind that because the games must be in the same folder, they will also share
the audio.vox, speech.vox and so forth. This is a limitation of this command.<P>
<B>NOTE:</B> The game you run will be loaded at the same resolution and colour depth as the
current game; if you mismatch colour depths some nasty results will occur.<P>
<B>NOTE:</B> Make sure that the game you want to run has a filename of 8 characters or less,
or this command will fail in the DOS engine.<P>
<B>NOTE:</B> The game you want to launch must have been created with the same point-version
of AGS as the one you are launching it from. (version 2.xy - the X must be the same version
between the two games).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
RunAGSGame ("MyGame.exe", 0, 51);
</PRE>
will run the MyGame game, passing it the value 51.<P>


<HR>
<A NAME="SaveGameDialog"></A>
<H3>SaveGameDialog</H3>
<PRE>
SaveGameDialog ()
</PRE>
Displays the save game dialog, where the player can save their current
game position. If they select to save, then the game position will be saved.<P>
<B>NOTE:</B> The dialog will not be displayed immediately; instead, it will be
shown when the script function finishes executing.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (keycode == 361) SaveGameDialog();
</PRE>
will bring up the save game dialog if the player presses the F3 key.<P>
<I>See Also:</I> <A HREF="ags56.htm#RestoreGameDialog">RestoreGameDialog</A>, <A HREF="ags56.htm#SaveGameSlot">SaveGameSlot</A><P>


<HR>
<A NAME="SaveGameSlot"></A>
<H3>SaveGameSlot</H3>
<PRE>
SaveGameSlot (int slot, string description)
</PRE>
Saves the current game position to the save game number specified by SLOT,
using DESCRIPTION as the textual description of the save position.
Be careful using this function, because you could overwrite one of the
player's save slots if you aren't careful.<P>
The SaveGameDialog function uses slots numbered from 1 to 20, so if you
don't want to interfere with the player's saves, I would recommend saving
to slot numbers of 100 and above.<P>
<B>NOTE:</B> The game will not be saved immediately; instead, it will be
saved when the script function finishes executing.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SaveGameSlot(30, "save game");
</PRE>
will save the current game position to slot 30 with the description "Save game".<P>
<I>See Also:</I> <A HREF="ags56.htm#DeleteSaveSlot">DeleteSaveSlot</A>, <A HREF="ags56.htm#RestoreGameSlot">RestoreGameSlot</A>, <A HREF="ags56.htm#SaveGameDialog">SaveGameDialog</A><P>


<HR>
<A NAME="SaveScreenShot"></A>
<H3>SaveScreenShot</H3>
<PRE>
SaveScreenShot (string filename)
</PRE>
Takes a screen capture and saves it to disk. The FILENAME must end in
either ".BMP" or ".PCX", as those are the types of files which can be saved.
Returns 1 if the shot was successfully saved, or 0 if an invalid file
extension was provided.<P>
<B>NOTE:</B> The screenshot will be saved to the Saved Games folder.<P>
<B>NOTE:</B> This command can be slow when using the Direct3D graphics driver.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String input = Game.InputBox("Type the filename:");
input = input.Append(".pcx");
SaveScreenShot(input);
</PRE>
will prompt the player for a filename and then save the screenshot with the filename the player typed.<P>
<I>See Also:</I> <A HREF="ags54.htm#DynamicSprite.SaveToFile">DynamicSprite.SaveToFile</A><P>


<HR>
<A NAME="SetAmbientTint"></A>
<H3>SetAmbientTint</H3>
<PRE>
SetAmbientTint(int red, int green, int blue, int saturation, int luminance)
</PRE>
Tints all objects and characters on the screen to (RED, GREEN, BLUE) with SATURATION percent
saturation.<P>
This allows you to apply a global tint to everything on the screen. The RED, GREEN and BLUE
parameters are from 0-255, and specify the colour of the tint.<P>
The SATURATION parameter defines how much the tint is applied, and is from 0-100. A
saturation of 100 will completely re-colourize the sprites to the supplied colour, and a
saturation of 1 will give them a very minor tint towards the specified colour.<P>
The LUMINANCE parameter allows you to adjust the brightness of the sprites at the same time.
It ranges from 0-100. Passing 100 will draw the sprites at normal brightness. Lower
numbers will darken the images accordingly, right down to 0 which will draw everything black.<P>
The tint applied by this function is global. To turn it off, call this command again but
pass the saturation as 0.<P>
<B>NOTE:</B> This function only works in hi-colour games and with hi-colour sprites.<P>
<B>NOTE:</B> This function overrides any specific region light levels or tints on the screen.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetAmbientTint(0, 0, 250, 30, 100);
</PRE>
will tint everything on the screen with a hint of blue.<P>
<I>See Also:</I> <A HREF="ags53.htm#DrawingSurface.DrawSurface">DrawingSurface.DrawSurface</A>,
<A HREF="ags49.htm#Character.Tint">Character.Tint</A>, <A HREF="ags70.htm#Object.Tint">Object.Tint</A><P>
<P>

<HR>
<A NAME="SetGameOption"></A>
<H3>SetGameOption</H3>
<PRE>
SetGameOption (option, int value)
</PRE>
Changes one of the game options, originally set in the AGS Editor Game Settings pane.<P>
OPTION specifies which option to change, and VALUE is its new value. Valid OPTIONs are
listed below:<P>
<TABLE BORDER>

<TR>
<TD ALIGN=LEFT> <B> Option </B></TD>
<TD ALIGN=LEFT><B> Values </B>
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_WALKONLOOK </TD>
<TD ALIGN=LEFT> Walk to hotspot in look mode (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_DIALOGOPTIONSGUI </TD>
<TD ALIGN=LEFT> Dialog options on GUI (0=none, otherwise GUI name/number) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_DIALOGOPTIONSGAP </TD>
<TD ALIGN=LEFT> Pixel gap between options (0=none, otherwise num pixels) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_WHENGUIDISABLED </TD>
<TD ALIGN=LEFT> When GUI is disabled, 0=grey out, 1=go black, 2=unchanged, 3=turn off 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_ALWAYSSPEECH </TD>
<TD ALIGN=LEFT> Always display text as speech (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_PIXELPERFECT </TD>
<TD ALIGN=LEFT> Pixel-perfect click detection (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_NOWALKMODE </TD>
<TD ALIGN=LEFT> Don't automatically move character in Walk mode (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_FIXEDINVCURSOR </TD>
<TD ALIGN=LEFT> Don't use inventory graphics as cursors (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_DONTLOSEINV </TD>
<TD ALIGN=LEFT> Don't automatically lose inventory items (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_TURNBEFOREWALK </TD>
<TD ALIGN=LEFT> Characters turn before walking (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_HANDLEINVCLICKS </TD>
<TD ALIGN=LEFT> Handle inventory clicks in script (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_MOUSEWHEEL </TD>
<TD ALIGN=LEFT> Enable mouse wheel support (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_DIALOGNUMBERED </TD>
<TD ALIGN=LEFT> Number dialog options (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_DIALOGUPWARDS </TD>
<TD ALIGN=LEFT> Dialog options go upwards on GUI (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_CROSSFADEMUSIC </TD>
<TD ALIGN=LEFT> Crossfade music tracks (0=no, 1=slow, 2=slowish, 3=medium, 4=fast) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_ANTIALIASFONTS </TD>
<TD ALIGN=LEFT> Anti-alias rendering of TTF fonts (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_THOUGHTGUI </TD>
<TD ALIGN=LEFT> Thought uses bubble GUI (GUI name/number) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_TURNWHENFACING </TD>
<TD ALIGN=LEFT> Characters turn to face direction (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_LIPSYNCTEXT </TD>
<TD ALIGN=LEFT> Whether lip-sync text reading is enabled (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_RIGHTTOLEFT </TD>
<TD ALIGN=LEFT> Right-to-left text writing (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_MULTIPLEINV </TD>
<TD ALIGN=LEFT> Display multiple inv items multiple times (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_SAVEGAMESCREENSHOTS </TD>
<TD ALIGN=LEFT> Save screenshots into save games (0 or 1) 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> OPT_PORTRAITPOSITION </TD>
<TD ALIGN=LEFT> Speech portrait side (0=left, 1=right, 2=alternate, 3=xpos) 
</TD>
</TR>
</TABLE>
<P>
The game settings which are not listed here either have a separate command to change them
(such as SetSpeechStyle), or simply cannot be changed at run-time (such as Letterbox Mode).<P>
This command returns the old value of the setting.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetGameOption (OPT_PIXELPERFECT, 0);
</PRE>
will disable pixel-perfect click detection.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGameOption">GetGameOption</A>,
<A HREF="ags79.htm#SetSpeechStyle">SetSpeechStyle</A>, <A HREF="ags56.htm#SetTextWindowGUI">SetTextWindowGUI</A><P>


<HR>
<A NAME="SetGameSpeed"></A>
<H3>SetGameSpeed</H3>
<PRE>
SetGameSpeed (int new_speed)
</PRE>
Sets the maximum game frame rate to NEW_SPEED frames per second, or as near as possible
to that speed. The default frame rate is 40 fps, but you can speed up or
slow down the game by using this function. Note that this speed is also the
rate at which the Repeatedly_Execute functions are triggered.<P>
The NEW_SPEED must lie between 10 and 1000. If it does not, it will be rounded
to 10 or 1000. Note that if you set a speed which the player's computer cannot
handle (for example, a 486 will not be able to manage 80 fps), then it will
go as fast as possible.<P>
NOTE: Because the mouse cursor is repainted at the game frame rate, at very
low speeds, like 10 to 20 fps, the mouse will appear to be jumpy and not
very responsive.<P>
NOTE: If you set the <A HREF="ags78.htm#System.VSync">System.VSync</A> property to <I>true</I>, the game speed will be capped
at the screen's refresh rate, so you will be unable to set it higher than 60-85 (depending
on the player's screen refresh).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetGameSpeed(80);
</PRE>
will set the game speed to 80.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGameSpeed">GetGameSpeed</A><P>


<HR>
<A NAME="SetGlobalInt"></A>
<H3>SetGlobalInt</H3>
<PRE>
SetGlobalInt (int index, int value)
</PRE>
Sets the global int INDEX to VALUE. You can then retrieve this value
from any other script using GetGlobalInt.<P>
There are 500 available global variables, from index 0 to 499.<P>
<B>NOTE:</B> GlobalInts are now considered obsolete. Consider using
<A HREF="ags19.htm#GlobalVariables">global variables</A> instead, which allow you to name
the variables.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetGlobalInt(10,1);
</PRE>
will set the Global Integer 10 to 1.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGlobalInt">GetGlobalInt</A><P>


<HR>
<A NAME="SetGraphicalVariable"></A>
<H3>SetGraphicalVariable</H3>
<PRE>
SetGraphicalVariable(string variable_name, int value);
</PRE>
Sets the interaction editor VARIABLE_NAME variable to VALUE. This allows your
script to change the values of variables set in the interaction editor.<P>
<B>NOTE:</B> This command is obsolete, and is only provided for backwards compatibility
with AGS 2.x. When writing new code, use <A HREF="ags19.htm#GlobalVariables">global variables</A>
instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetGraphicalVariable("climbed rock", 1);
</PRE>
will set the interaction editor "climbed rock" variable to 1.<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGraphicalVariable">GetGraphicalVariable</A><P>


<HR>
<A NAME="SetMultitaskingMode"></A>
<H3>SetMultitaskingMode</H3>
<PRE>
SetMultitaskingMode (int mode)
</PRE>
Allows you to set what happens when the user switches away from your game.<P>
If MODE is 0 (the default), then if the user Alt+Tabs out of your game, or clicks
on another window, the game will pause and not continue until they switch back into
the game.<P>
If MODE is 1, then the game will continue to run in the background if the user
switches away (useful if, for example, you are just making some sort of jukebox
music player with AGS).<P>
Note that mode 1 does not work with some graphics cards in full-screen mode, so you
should only rely on it working when your game is run in windowed mode.<P>
<B>Cross-Platform Support</B><P>
Windows: <B> Yes </B><br> 
MS-DOS: <B> No </B><br> 
Linux: <B> Yes </B><br> 
MacOS: <B> Yes </B><P>

<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetMultitaskingMode (1);
</PRE>
will mean that the game continues to run in the background.<P>


<HR>
<A NAME="SetRestartPoint"></A>
<H3>SetRestartPoint</H3>
<PRE>
SetRestartPoint ()
</PRE>
Changes the game restart point to the current position. This means that
from now on, if the player chooses the Restart Game option, it will return
here.<P>
This function is useful if the default restart point doesn't work properly
in your game - just use this function to move it.<P>
<B>NOTE:</B> The restart point cannot be set while a script is running -- therefore,
when you call this it will actually set the restart point at the next game
loop where there is not a blocking script running in the background.<P>
<I>SeeAlso:</I> <A HREF="ags56.htm#RestartGame">RestartGame</A><P>


<HR>
<A NAME="Game.SetSaveGameDirectory"></A>
<H3>SetSaveGameDirectory</H3>
<PRE>
static bool Game.SetSaveGameDirectory(string directory)
</PRE>
Changes the directory where save game files are stored to the supplied <I>directory</I>.
If the directory does not exist, AGS will attempt to create it. <P>
You cannot use fully qualified directories with this command (eg. <TT>C:\Games\Cool\Saves</TT>), because
the player might have installed your game to any folder, and they might not be running Windows.<P>
Therefore, only two types of path are supported: <br> 
1. Relative paths (eg. "Saves"). This will create a "Saves" folder inside your game folder <br> 
2. The special tag <TT>$MYDOCS$</TT> which allows you to create a folder for your save games
inside the user's documents folder. On Vista, this is the "Saved Games" folder;
on Windows XP and earlier, this is "My Documents". On Mac and Linux, currently this just points
to the game folder.<P>
Returns <I>true</I> if the save game directory has been changed successfully; <I>false</I> if not.<P>
<B>NOTE:</B> It is recommended that you do not use this function. Instead, set the "Save games
folder name" property in the General Settings of the editor, which allows the save games to be
detected by Vista's Game Explorer, and avoids problems writing to the Program Files folder.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.SetSaveGameDirectory("$MYDOCS$/My Cool Game Saves");
</PRE>
will change the save game directory to "My Cool Game Saves" in My Documents, and create the
folder if it does not exist (might be useful to do this in game_start).<P>
<I>See Also:</I> <A HREF="ags62.htm#ListBox.FillSaveGameList">ListBox.FillSaveGameList</A>,
<A HREF="ags56.htm#RestoreGameDialog">RestoreGameDialog</A><P>


<HR>
<A NAME="SetTextWindowGUI"></A>
<H3>SetTextWindowGUI</H3>
<PRE>
SetTextWindowGUI (int gui)
</PRE>
Changes the GUI used for text windows to the specified GUI. This overrides
the "text windows use GUI" setting in the editor.<P>
You can pass -1 as the GUI number to go back to using the default white text box.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetTextWindowGUI (4);
</PRE>
will change Textwindow GUI 4 to be used for displaying text windows in future.<P>


<HR>
<A NAME="SetTimer"></A>
<H3>SetTimer</H3>
<PRE>
SetTimer (int timer_id, int timeout)
</PRE>
Starts timer TIMER_ID ticking - it will tick once every game loop (normally
40 times per second), until TIMEOUT loops, after which it will stop.
You can check whether the timer has finished by calling the IsTimerExpired
function.<P>
Pass TIMEOUT as 0 to disable a currently running timer.<P>
There are 20 available timers, with TIMER_IDs from 1 to 20.<P>
<B>NOTE:</B> the timer will not tick while the game is paused.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
SetTimer(1,1000); 
</PRE>
will set the timer 1 to expire after 1000 game cycles.<P>
<I>See Also:</I> <A HREF="ags56.htm#IsTimerExpired">IsTimerExpired</A><P>


<HR>
<A NAME="SkipUntilCharacterStops"></A>
<H3>SkipUntilCharacterStops</H3>
<PRE>
SkipUntilCharacterStops(CHARID)
</PRE>
Skips through the game until the specified character stops walking, a blocking
script runs, or a message box is displayed.<P>
The purpose of this command is to mimic the functionality in games such as The Longest Journey,
where the player can press ESC to instantly get the character to its destination. It serves
as a handy feature to allow you to give the player character a relatively slow walking speed,
without annoying the player by making them wait ages just to get from A to B.<P>
If the specified character is not moving when this function is called, nothing happens.<P>
<FONT COLOR="#FF0000">Example: (in on_key_press)</FONT>
<PRE>
if (keycode == eKeyEscape) SkipUntilCharacterStops(EGO);
</PRE>
This means that if the player presses ESC, the game will skip ahead until EGO finishes
moving, or is interrupted by a Display command or a blocking cutscene.<P>
<I>See Also:</I> <A HREF="ags56.htm#StartCutscene">StartCutscene</A><P>
<P>

<HR>
<A NAME="StartCutscene"></A>
<H3>StartCutscene</H3>
<PRE>
StartCutscene(CutsceneSkipType)
</PRE>
Marks the start of a cutscene. Once your script passes this point, the player can
choose to skip a portion by pressing a key or the mouse button. This is useful for
things like introduction sequences, where you want the player to be able to skip
over an intro that they've seen before.<P>
The CutsceneSkipType determines how they can skip the cutscene:
<PRE>
eSkipESCOnly
  by pressing ESC only
eSkipAnyKey
  by pressing any key
eSkipMouseClick
  by clicking a mouse button
eSkipAnyKeyOrMouseClick
  by pressing any key or clicking a mouse button
eSkipESCOrRightButton
  by pressing ESC or clicking the right mouse button
</PRE>
You need to mark the end of the cutscene with the EndCutscene command.<P>
Be <B>very careful</B> with where you place the corresponding EndCutscene command.
The script <B>must</B> pass through EndCutscene in its normal run in order for the skipping
to work - otherwise, when the player presses ESC the game could appear to hang.<P>
<I>See Also:</I> <A HREF="ags56.htm#EndCutscene">EndCutscene</A>,
<A HREF="ags56.htm#SkipUntilCharacterStops">SkipUntilCharacterStops</A>,
<A HREF="ags56.htm#Game.InSkippableCutscene">Game.InSkippableCutscene</A>,
<A HREF="ags56.htm#Game.SkippingCutscene">Game.SkippingCutscene</A><P>


<HR>
<A NAME="UpdateInventory"></A>
<H3>UpdateInventory</H3>
<PRE>
UpdateInventory ()
</PRE>
Updates the on-screen inventory display. If you add or remove inventory
items manually (ie. by using the InventoryQuantity array rather than
the AddInventory/LoseInventory functions), the display may not get updated.
In this case call this function after making your changes, to update
what is displayed to the player.<P>
Note that using this function will reset the order that items are displayed
in the inventory window to the same order they were created in the editor.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AddInventory">Character.AddInventory</A>,
<A HREF="ags49.htm#Character.LoseInventory">Character.LoseInventory</A>,
<A HREF="ags49.htm#Character.InventoryQuantity">Character.InventoryQuantity</A><P>


<HR>
<A NAME="UnPauseGame"></A>
<H3>UnPauseGame</H3>
<PRE>
UnPauseGame ()
</PRE>
Resumes the game.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (IsGamePaused() == 1)
    UnPauseGame();
</PRE>
will unpause the game if it is paused.<P>
<I>See Also:</I> <A HREF="ags56.htm#PauseGame">PauseGame</A><P>

<HR>
<A NAME="Wait"></A>
<H3>Wait</H3>
<PRE>
Wait (int time)
</PRE>
Pauses the script and lets the game continue for TIME loops. There are
normally 40 loops/second (unless you change it with SetGameSpeed), so using
a value of 80 will wait 2 seconds. Note that no other scripts can
run while the Wait function is in the background.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Walk(120, 140, eBlock, eWalkableAreas);
Wait(80);
cEgo.FaceLocation(1000,100);
</PRE>
will move the character EGO to 120,140, wait until he gets there then wait for 2 seconds (80 game cycles) and then face right.<P>
<I>See Also:</I> <A HREF="ags56.htm#WaitKey">WaitKey</A>, <A HREF="ags56.htm#WaitMouseKey">WaitMouseKey</A><P>

<HR>
<A NAME="WaitKey"></A>
<H3>WaitKey</H3>
<PRE>
WaitKey (int time)
</PRE>
Pauses the script and lets the game continue until EITHER:<P>
(a) TIME loops have elapsed, or<P>
(b) the player presses a key<P>
Returns 0 if the time elapsed, or 1 if the player interrupted it.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
WaitKey(200);
</PRE>
will pause the script and wait until 5 seconds have passed or the player presses a key.<P>
<I>See Also:</I> <A HREF="ags56.htm#Wait">Wait</A>, <A HREF="ags56.htm#WaitMouseKey">WaitMouseKey</A><P>

<HR>
<A NAME="WaitMouseKey"></A>
<H3>WaitMouseKey</H3>
<PRE>
WaitMouseKey (int time)
</PRE>
Pauses the script and lets the game continue until EITHER:<P>
(a) TIME loops have elapsed, or<P>
(b) the player presses a key, or<P>
(c) the player clicks a mouse button<P>
Returns 0 if the time elapsed, or 1 if the player interrupted it.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
WaitMouseKey(200);
</PRE>
will pause the script and wait until 5 seconds have passed or the player presses a key or
clicks the mouse.<P>
<I>See Also:</I> <A HREF="ags56.htm#Wait">Wait</A>, <A HREF="ags56.htm#WaitKey">WaitKey</A><P>


<HR>
<A NAME="Game.CharacterCount"></A>
<H3>CharacterCount property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.CharacterCount
</PRE>
Returns the number of characters in the game.<P>
This is useful for script modules if you need to iterate through all the characters for some reason.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d characters.", Game.CharacterCount);
</PRE>


<HR>
<A NAME="Game.DialogCount"></A>
<H3>DialogCount property</H3>
<PRE>
readonly static int Game.DialogCount
</PRE>
Returns the number of dialogs in the game.<P>
This is useful for script modules if you need to iterate through all the dialogs for some reason.
Valid dialogs are numbered from 0 to DialogCount - 1.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d dialogs.", Game.DialogCount);
</PRE>
<I>Compatibility:</I> Supported by <B>AGS 3.0.2</B> and later versions.<P>


<HR>
<A NAME="Game.FileName"></A>
<H3>FileName property</H3>
<PRE>
readonly static String Game.FileName
</PRE>
Gets the filename that the game is running from. This will usually be the name of the EXE file,
but could also be "ac2game.dat" if you are just running the game using ACWIN.EXE.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The main game file is: %s", Game.FileName);
</PRE>
will display the game filename.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.Name">Game.Name</A><P>


<HR>
<A NAME="Game.FontCount"></A>
<H3>FontCount property</H3>
<PRE>
readonly static int Game.FontCount
</PRE>
Returns the number of fonts in the game.<P>
This is useful for script modules if you need to iterate through all the fonts for some reason.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d fonts.", Game.FontCount);
</PRE>


<HR>
<A NAME="Game.GlobalMessages"></A>
<H3>GlobalMessages property</H3>
<I>(Formerly known as global function GetMessageText, which is now obsolete)</I><P>
<PRE>
readonly static String Game.GlobalMessages[int message]
</PRE>
Gets the text of the specified global message. The message number is one of the global
message numbers from 500 to 999.<P>
If an invalid message number is supplied, <I>null</I> will be returned. Otherwise, the
message contents will be returned.<P>
<B>NOTE:</B> Global Messages were a feature of AGS 2.x and are now obsolete. You will not
need to use this property in new games.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String message = Game.GlobalMessages[997];
Display("Global message 997 says: %s", message);
</PRE>
will display global message 997.<P>


<HR>
<A NAME="Game.GlobalStrings"></A>
<H3>GlobalStrings property</H3>
<I>(Formerly known as GetGlobalString, which is now obsolete)</I> <br> 
<I>(Formerly known as SetGlobalString, which is now obsolete)</I><P>
<PRE>
static String Game.GlobalStrings[index]
</PRE>
Gets/sets global string <I>index</I>. Global strings provide you with an easy way to share
string variables between scripts. There are 50 available global strings, with <I>index</I>
values from 0 to 49.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.GlobalStrings[15] = "Joe";
Display("Global string 15 is now: %s", Game.GlobalStrings[15]);
</PRE>
will set global string 15 to contain "Joe".<P>
<I>See Also:</I> <A HREF="ags56.htm#GetGlobalInt">GetGlobalInt</A>, <A HREF="ags56.htm#SetGlobalInt">SetGlobalInt</A><P>


<HR>
<A NAME="Game.GUICount"></A>
<H3>GUICount property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.GUICount
</PRE>
Returns the number of GUIs in the game.<P>
This is useful for script modules if you need to iterate through all the GUIs for some reason.
Valid GUIs are numbered from 0 to GUICount minus 1.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d GUIs.", Game.GUICount);
</PRE>


<HR>
<A NAME="Game.IgnoreUserInputAfterTextTimeoutMs"></A>
<H3>IgnoreUserInputAfterTextTimeoutMs property</H3>
<PRE>
static int Game.IgnoreUserInputAfterTextTimeoutMs;
</PRE>
Gets/sets the length of time for which user input is ignored after some text is automatically
removed from the screen.<P>
When AGS is configured to automatically remove text after a certain time on the screen,
sometimes the player might try to manually skip the text by pressing a key just as it
is removed automatically, and thus they end up skipping the next text line by accident.
This property is designed to eliminate this problem.<P>
This property is specified in milliseconds (1000 = 1 second), and is set to 500 by default.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.IgnoreUserInputAfterTextTimeoutMs = 1000;
</PRE>
will tell AGS to ignore mouse clicks and key presses for 1 second after text is automatically
removed from the screen.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.2.0</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.MinimumTextDisplayTimeMs">Game.MinimumTextDisplayTimeMs</A>,
<A HREF="ags56.htm#Game.TextReadingSpeed">Game.TextReadingSpeed</A>, <A HREF="ags79.htm#SetSkipSpeech">SetSkipSpeech</A><P>


<HR>
<A NAME="Game.InSkippableCutscene"></A>
<H3>InSkippableCutscene property</H3>
<I>(Formerly known as game.in_cutscene, which is now obsolete)</I><P>
<PRE>
static bool Game.InSkippableCutscene
</PRE>
Returns whether the game is currently between a StartCutscene and EndCutscene, and therefore
whether the player is able to skip over this part of the game.<P>
When the player chooses to skip a cutscene all of the script code is run as usual,
but any blocking commands are run through without the usual game cycle delays. Therefore, you
should never normally need to use this property since cutscenes should all be handled automatically,
but it could be useful for script modules.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example below.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.InSkippableCutscene)
{
  Display("The player might never see this message!");
}
</PRE>
will display a message if we are within a cutscene<P>
<I>Compatibility:</I> Supported by <B>AGS 3.0.1</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags56.htm#StartCutscene">StartCutscene</A>, <A HREF="ags56.htm#EndCutscene">EndCutscene</A>,
<A HREF="ags56.htm#Game.SkippingCutscene">Game.SkippingCutscene</A><P>


<HR>
<A NAME="Game.InventoryItemCount"></A>
<H3>InventoryItemCount property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.InventoryItemCount
</PRE>
Returns the number of inventory items in the game. This is the total number of items that you
created in the Inventory Items pane of the editor, not how many the player is currently carrying.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d inventory items.", Game.InventoryItemCount);
</PRE>


<HR>
<A NAME="Game.MinimumTextDisplayTimeMs"></A>
<H3>MinimumTextDisplayTimeMs property</H3>
<PRE>
static int Game.MinimumTextDisplayTimeMs;
</PRE>
Gets/sets the minimum length of time that text is displayed on the screen. AGS automatically
adjusts the length of time that text is displayed for depending on the length of the text
(and you can customize this calculation with <A HREF="ags56.htm#Game.TextReadingSpeed">Game.TextReadingSpeed</A>),
but for very short statements like "Hi!", you might want the text to remain for longer.<P>
This property is specified in milliseconds (1000 = 1 second), and is set to 1000 by default.<P>
<B>NOTE:</B> This property is ignored if lip-sync is enabled, or if the General Settings
are set not to allow text to be automatically removed.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.MinimumTextDisplayTimeMs = 2000;
</PRE>
will ensure that even the shortest "Hi!" text line will be displayed for at least 2 seconds<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.2</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SpeechAnimationDelay">Character.SpeechAnimationDelay</A>,
<A HREF="ags56.htm#Game.IgnoreUserInputAfterTextTimeoutMs">Game.IgnoreUserInputAfterTextTimeoutMs</A>
<A HREF="ags56.htm#Game.TextReadingSpeed">Game.TextReadingSpeed</A><P>


<HR>
<A NAME="Game.MouseCursorCount"></A>
<H3>MouseCursorCount property</H3>
<PRE>
readonly static int Game.MouseCursorCount
</PRE>
Returns the number of mouse cursors in the game.<P>
This is useful for script modules if you need to iterate through all the cursors for some reason.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d cursors.", Game.MouseCursorCount);
</PRE>


<HR>
<A NAME="Game.Name"></A>
<H3>Name property (game)</H3>
<PRE>
static String Game.Name
</PRE>
Gets/sets the game's name. This is initially set in the General Settings pane of the editor,
but you can change it at run-time in order to change the window title of your game.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game name is: %s", Game.Name);
</PRE>
will display the game name.<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.FileName">Game.FileName</A><P>


<HR>
<A NAME="Game.NormalFont"></A>
<H3>NormalFont property</H3>
<I>(Formerly known as global function SetNormalFont, which is now obsolete)</I><P>
<PRE>
static FontType Game.NormalFont
</PRE>
Gets/sets the font used for all in-game text, except speech.
The font number must be a valid number from the Fonts pane of the editor.<P>
More specifically, AGS uses the Normal Font for the following:
<UL>

<LI> Display
<LI> DisplayTopBar
<LI> dialog options text
<LI> the built-in save and restore dialogs
</UL>
<P>
The Normal Font is font 0 by default.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.NormalFont = eFontSpecial;
</PRE>
will change the normal font to the font "Special".<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.SpeechFont">Game.SpeechFont</A><P>


<HR>
<A NAME="Game.SkippingCutscene"></A>
<H3>SkippingCutscene property</H3>
<I>(Formerly known as game.skipping_cutscene, which is now obsolete)</I><P>
<PRE>
static bool Game.SkippingCutscene
</PRE>
Returns whether the player has elected to skip the current cutscene. This will return true
if the game is between a StartCutscene and EndCutscene command, and the player has chosen to
skip it.<P>
Although cutscene skipping is handled automatically by AGS, you can use this property to optimise
the process by bypassing any lengthy blocks of code that don't need to be run if the cutscene is
being skipped over.<P>
<B>NOTE:</B> This is a static function, and thus need to be called with <TT>Game.</TT> in front of it. See
the example below.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (!Game.SkippingCutscene)
{
  aScaryMusic.Play();
  Wait(100);
  Game.StopAudio();
}
</PRE>
will only attempt to play the music if the player is not skipping the cutscene.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.0.1</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags56.htm#StartCutscene">StartCutscene</A>, <A HREF="ags56.htm#EndCutscene">EndCutscene</A>,
<A HREF="ags56.htm#Game.InSkippableCutscene">Game.InSkippableCutscene</A><P>


<HR>
<A NAME="Game.SpeechFont"></A>
<H3>SpeechFont property</H3>
<I>(Formerly known as global function SetSpeechFont, which is now obsolete)</I><P>
<PRE>
static FontType Game.SpeechFont;
</PRE>
Gets/sets the font used for character speech. The font number you
supply must be a valid number from the Fonts pane of the editor.<P>
The Speech Font is font 1 by default.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.SpeechFont = eFontStandard;
</PRE>
will change the speech font to "Standard".<P>
<I>See Also:</I> <A HREF="ags56.htm#Game.NormalFont">Game.NormalFont</A><P>


<HR>
<A NAME="Game.SpriteHeight"></A>
<H3>SpriteHeight property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.SpriteHeight[int slot]
</PRE>
Returns the height of the specified sprite.<P>
The height will be returned in the usual 320x200-resolution co-ordinates. If an invalid
sprite slot is supplied, 0 will be returned.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("Object 0's sprite is sized %d x %d.", Game.SpriteWidth[object[0].Graphic],
                                               Game.SpriteHeight[object[0].Graphic]);
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.SpriteWidth">Game.SpriteWidth</A><P>


<HR>
<A NAME="Game.SpriteWidth"></A>
<H3>SpriteWidth property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.SpriteWidth[int slot]
</PRE>
Returns the width of the specified sprite.<P>
The width will be returned in the usual 320x200-resolution co-ordinates. If an invalid
sprite slot is supplied, 0 will be returned.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("Object 0's sprite is sized %d x %d.", Game.SpriteWidth[object[0].Graphic],
                                               Game.SpriteHeight[object[0].Graphic]);
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.SpriteHeight">Game.SpriteHeight</A><P>


<HR>
<A NAME="Game.TextReadingSpeed"></A>
<H3>TextReadingSpeed property</H3>
<I>(Formerly known as game.text_speed, which is now obsolete)</I><P>
<PRE>
static int Game.TextReadingSpeed;
</PRE>
Gets/sets the speed at which AGS assumes the player can read text, and therefore how
long speech stays on the screen before it is automatically removed.<P>
Specifically, the TextReadingSpeed is the number of characters of text that the player
can read in a second. It is 15 by default. A higher number will therefore lead to the
text being removed more quickly.<P>
It is useful to link this setting to a GUI Slider on some sort of Control Panel GUI
so that the player can adjust it depending on their reading speed.<P>
<B>NOTE:</B> This property is ignored if lip-sync is enabled, or if the General Settings
are set not to allow text to be automatically removed.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Game.TextReadingSpeed = 7;
</PRE>
sets the text reading speed to half the default, which will leave speech on-screen
for twice as long as usual.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.2</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SpeechAnimationDelay">Character.SpeechAnimationDelay</A>,
<A HREF="ags56.htm#Game.MinimumTextDisplayTimeMs">Game.MinimumTextDisplayTimeMs</A>,
<A HREF="ags79.htm#SetSkipSpeech">SetSkipSpeech</A><P>


<HR>
<A NAME="Game.TranslationFilename"></A>
<H3>TranslationFilename property</H3>
<I>(Formerly known as GetTranslationName, which is now obsolete)</I><P>
<PRE>
readonly static String Game.TranslationFilename;
</PRE>
Gets the name of the current translation filename (without the ".tra" extension).
This may be useful if you want to use a different graphic somewhere depending on
which translation is being used.<P>
If no translation is in use, a blank string is returned.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.TranslationFilename == "German") {
  Display("You are using the German translation.");
}
</PRE>
<I>See Also:</I> <A HREF="ags56.htm#Game.ChangeTranslation">Game.ChangeTranslation</A>,
<A HREF="ags56.htm#IsTranslationAvailable">IsTranslationAvailable</A><P>


<HR>
<A NAME="Game.UseNativeCoordinates"></A>
<H3>UseNativeCoordinates property</H3>
<PRE>
readonly static bool Game.UseNativeCoordinates
</PRE>
Returns whether the game is using native co-ordinates. If native co-ordinates are in use,
then all X, Y, Top, Bottom, Width and Height variables in the game will be expected to
reflect the resolution of the game.<P>
If this is <I>false</I>, then the game is operating in backwards-compatible mode where
all co-ordinates are low-res.<P>
If the game resolution is 320x200 or 320x240, this setting has no effect.<P>
This property is read-only; it is not possible to change this setting at run-time.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Game.UseNativeCoordinates)
{
  Display("The player is at %d, %d -- REALLY!", player.x, player.y);
}
else
{
  Display("The player is at %d, %d in the old-school system", player.x, player.y);
}
</PRE>
<I>Compatibility:</I> Supported by <B>AGS 3.1.0</B> and later versions.<P>


<HR>
<A NAME="Game.ViewCount"></A>
<H3>ViewCount property</H3>
<I>(Formerly part of GetGameParameter, which is now obsolete)</I><P>
<PRE>
readonly static int Game.ViewCount
</PRE>
Returns the number of views in the game.<P>
This is useful for script modules if you need to iterate through all the views for some reason.
Valid views are numbered from 1 to ViewCount.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The game has %d views.", Game.ViewCount);
</PRE>
<P>

</BODY></HTML>
