//===================================================================
// *** AGS ROOM SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Room:    Broken Curb Street
//              
// Author:  Allan Menefe (Holister_Man)
//          Rick Jafrate (RickJ)    
//
// Abstract
// In this room the interaction editor is used to display many of the
// "Look at" messages. The remainder of the programmng is done in the 
// Room Script.  
//
// The  room  contains  some toxic slime, the Beman character, an AGS
// terminal, and a door that can be programmed to lead to anywhere.
//  
// Description
// There  are a number of things going on in this room. A man-hole is
// inaccessable  because  of a toxic green slime blocking the way. To 
// step in it is to surely die.  Still  you wonder were it leads, and 
// perhaps later in the game you will learn it's secrets.
//
// Talk to Beman  to learn as much as you can. He is a bit out of his
// mind so you may have  to come back and talk to hime more than once 
// to get everything out of him.  
//
// You need an access card to work the terminal.  Once you get access
// simply type the number of the room you wish to enter and then open
// the door and go through.  The inside of the door changes according
// to  your  selection.  You  will also need a key to unlock the door, 
// which you will find laying in the street.
// 
// Scipting Hint - Interaction Handler Functions
// The  interaction  handler  functions are created and deleted using
// the Interaction  Editor. These functions are organized into groups 
// in the Room Script to make them easier to locate and maintain.Each
// grouping represents  some game such as a door, terminal, etc.  All 
// interaction functions for a  given entity are then collected under 
// the same grouping.  Of course this  makes no difference to AGS but 
// it often makes things much easier for the game designer.
//
// Todo List
// - Additional Beman dialog refinements
//
// Revision History
// 05-Mar-15 RickJ,        update for AGS 2.7
// 04-Dec-01 Holister_Man, original version
// 
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Constant Definitions
//-------------------------------------------------------------------


//===================================================================
// Static Variable Definitions
//-------------------------------------------------------------------
int	MagicDoorState=LOCKED;
int	State=0;

//===================================================================
// Utility Functions
//-------------------------------------------------------------------


//===================================================================
// Application Functions
//-------------------------------------------------------------------
//===================================================================
   function OperateMagicDoor() {
//
// This function checks to see if the player has the key to the door.
// If so the  door  opens to reveal what's on the other side, and as 
// Beman says it's wonderful. This door is programable via the handy 
// Ags terminal disguised as a harmless ATM machine.  
//-------------------------------------------------------------------
   // Walk to the door
	player.Walk(237,87,eBlock);							

	// Operate the door
	if (MagicDoorState==LOCKED) {
		// If the player has the key, open the door
		if (player.InventoryQuantity[iKey.ID]>0) {
			oInsidedoor.Graphic = AgsTerm[AgsTermId[0]].DoorSpr;
			RestoreWalkableArea(3);
			player.LoseInventory(iKey);				
			player.Walk(237,87,eBlock);
			aDoorLock.Play();
			Wait(1);
			aDoorOpen.Play();
			oDoor.SetView(24,0);								// Setup object for animation
			oDoor.Animate(0,6,eOnce,eBlock,eForwards);// and then run the animation 
			DisplayMessage(13);
			MagicDoorState = OPENED;
		}
		// Otherwise just tell him that he needs a key
		else {
			Display("It's locked! You'll need a key to open it.");
		}	
	}
	else if (MagicDoorState==CLOSED) {
		aDoorOpen.Play();
		oInsidedoor.Graphic = AgsTerm[AgsTermId[0]].DoorSpr;
		oDoor.SetView(24,0);								// Setup object for animation
		oDoor.Animate(0,6,eOnce,eBlock,eForwards);// and then run the animation 
		MagicDoorState = OPENED;
		RestoreWalkableArea(3);
	}
	else if (MagicDoorState==OPENED) {
		aDoorClose.Play();
		oDoor.Animate(0,6,eOnce,eBlock,eBackwards);	// and then run the animation 
		MagicDoorState = CLOSED;
		RemoveWalkableArea(3);
	}
}

//===================================================================
   function ConverseWithBeman() {
//
// This  function initiates a conversation with Beman, after which he
// ignores further attempts to communicate.
//-------------------------------------------------------------------
	if (BemanIgnoresYou==true) {
		Display("I think he's ignoring you.");
	}
	else {                                // Move the player to stand next to the man
		player.Walk(cBman.x-30, cBman.y, eBlock);      
		player.FaceCharacter(cBman);       // Make them look at each other
		cBman.FaceCharacter(player);
		dMeetBman.Start();                 // Start the conversation
	}
}

//===================================================================
// Global - Interaction Handler Functions
//
// Events normally picked up in the Global Script can be processed in
// the Room Script by executing the CallRoomScript() function with an
// event number.  Event 4001, for  example, is  generated from dialog 
// topic #4.  In this dialog a "run-script 4001" command is  executed
// casing an the dialog_request() function to be called in the Global 
// Script. A value of 4001 is passed to this function as a parameter.
// The dialog_request() function then  executes  the CallRoomScript()
// function,  passing 4001 as the parameter. That cause the on_call()
// function below  to  be executed with the EVENT parameters having a
// value of 4001.  
//-------------------------------------------------------------------
function on_call(int event) {
	if (event==evtStartConversation) {
		ConverseWithBeman();
	}
}


//===================================================================
// Room - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart room_a  // DO NOT EDIT OR REMOVE THIS LINE
function room_a() {
	// script for room: Player enters screen (before fadein)

	// Run animation of terminal
	oTerminal.SetView(24,1);
	oTerminal.Animate(1,6,eRepeat,eNoBlock);
	
	// Initialize door
	oDoor.SetView(24,0,0);								// Setup graphic
	RemoveWalkableArea(3);
	if (MagicDoorState==OPENED) MagicDoorState = CLOSED;

   // Setup Help GUI 
	gHelpTitle.Text = "Broken Curb Street";
	gHelpDescription.Text = "This room illustrates hot to use a key to open a door and how to conduct dialog with another character.";
	gHelpReference.Text = "Manual Reference:[Conversations, RunDialog, Animate (object), LoseInventory";  
	gButtonbar.Visible = true;
}
#sectionend room_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {
	// script for room: First time player enters screen

	// Initialize Ags Terminal
	AgsTermId[0] = crmFactoryEntrance;

	//Initialize Magic Door
	RemoveWalkableArea(3);
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region1_a  // DO NOT EDIT OR REMOVE THIS LINE
function region1_a() {
	// script for region1: Player walks onto region

	// Player steps onto slime and dies
	Display("That was a silly last step, walking in toxic slime.");
	QuitGame(0); 
}
#sectionend region1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart region2_a  // DO NOT EDIT OR REMOVE THIS LINE
function region2_a() {
	// script for region2: Player walks onto region
	if (AgsTerm[AgsTermId[0]].Exists) {
		player.ChangeRoom(AgsTermId[0],AgsTerm[AgsTermId[0]].X,AgsTerm[AgsTermId[0]].Y);
	}
	else {
		player.ChangeRoom(crmEmptyRoom,AgsTerm[AgsTermId[0]].X,AgsTerm[AgsTermId[0]].Y);
	}
}
#sectionend region2_a  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Magic Door - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart object0_b  // DO NOT EDIT OR REMOVE THIS LINE
function object0_b() {
	// script for object0: Interact with object
	OperateMagicDoor();	// Try to open or close it
}
#sectionend object0_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object0_c  // DO NOT EDIT OR REMOVE THIS LINE
function object0_c() {
	// script for object0: Look at object
   Display("It's a door.");
}
#sectionend object0_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object0_d  // DO NOT EDIT OR REMOVE THIS LINE
function object0_d() {
	// script for object0: Use inventory on object
	// Unlock the door
	if (player.ActiveInventory==iKey) OperateMagicDoor();	
}
#sectionend object0_d  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object3_a  // DO NOT EDIT OR REMOVE THIS LINE
function object3_a() {
	// script for object3: Interact object (inside of door)
	OperateMagicDoor();	// Try to open or close it
}
#sectionend object3_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object3_b  // DO NOT EDIT OR REMOVE THIS LINE
function object3_b() {
	// script for object3: Look at object (inside of door)
	Display("Looking through the doorway, you can now see what's on the other side.");
	Display("Hmmmm...it all, somehow, looks vaguely familiar. ");
}
#sectionend object3_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Ags Terminal - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart object1_a  // DO NOT EDIT OR REMOVE THIS LINE
function object1_a() {
	// script for object1: Interact object
	player.Walk(190,90,eBlock);
	AgsTermLocation = 0;
	AgsTermRequired = NONE;	
	player.ChangeRoom(crmAgsTerminal);
	
}
#sectionend object1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object1_b  // DO NOT EDIT OR REMOVE THIS LINE
function object1_b() {
   // script for object1: Look at object
	Display("It looks like an ordinary  ATM terminal. ");
}
#sectionend object1_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Blood - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_a() {
	// script for hotspot1: Look at hotspot
	Display("Looks like somebody, or something, has had a nasty accident!");
}
#sectionend hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_b() {
	// script for hotspot1: Interact hotspot
	Display("Why do you want some blood?");
}
#sectionend hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Toxic Slime - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_a() {
	// script for hotspot3: Look at hotspot
	Display("It is some wierd looking green liquid.");
}
#sectionend hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot3_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_b() {
	// script for hotspot3: Interact hotspot
	Display("You touch it and feel a twinge of pain in your hand!");
}
#sectionend hotspot3_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Wall- Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_a() {
	// script for hotspot4: Look at hotspot
	Display("It is a wall with graffiti on it.");
}
#sectionend hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_a() {
	// script for hotspot8: Look at hotspot
	Display("It is a wall. Walls are generally used to provide structural integrity to a building, and to keep people outside from seeing in and the other way round. This message is just showing off long messages.");
}
#sectionend hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Road- Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot5_a() {
	// script for hotspot5: Look at hotspot
	Display("It's a road, what a surprise. ");
}
#sectionend hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Curb - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot6_a() {
	// script for hotspot6: Look at hotspot
	Display("It is a curb!");
}
#sectionend hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot7_a() {
	// script for hotspot7: Look at hotspot
	Display("The curb is broken here.");
}
#sectionend hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Sidewalk - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot9_a() {
	// script for hotspot9: Look at hotspot
	Display("It's is a sidewalk with a few drops of blood on it.");
}
#sectionend hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE
#sectionstart hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot11_a() {
	// script for hotspot11: Interact hotspot
	MiniGame.iSet("Money",player.InventoryQuantity[iMoney.ID]);
	MiniGame.Call("_DQSLOT-V100.exe");
}
#sectionend hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot11_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot11_b() {
  // script for Hotspot 11 (barrier): Look at hotspot
Display("Rstore");
	RestoreGameSlot(2);
}
#sectionend hotspot11_b  // DO NOT EDIT OR REMOVE THIS LINE

function room_LeaveLeft()
{
player.ChangeRoomAutoPosition(10);
}

function hManhole_Look()
{
DisplayMessage(29);
}
