//===================================================================
// *** AGS ROOM SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Room:    Windows Hell
//              
// Author:  Rick Jafrate (RickJ)    
//          
// Abstract
// Windows operating systems that have severe problems and are unable 
// to bootup, display a blue screen  with  cryptic  messages in white 
// text.  This is  widely  know as the "Blue Screen of Death" or BSoD 
// for short. 
//
// To many, the Blue Screen represents one aspect of windows hell. So
// this room  shows what windows hell would look like in an adventure 
// game. Entering '666' (i.e. mark of the devil)  on the Ags Terminal
// programs the BrokenCurbStreet door to open into this room.  
//
// Description
// Upon entering windows hell you hear a demonic laugh, most probably 
// comming from the ruler of the Evil Empire (M$) himself. Everything 
// is blue, including  the  fires  of hell raging about you.  You are 
// informed  that this hell  is the Blue Screen of Death and that one 
// get out by speaking the truth.In this case speaking is the same as
// typing.
//
// So you must type in the "truth" to excape windows hell. Un-truths 
// are answered with hints that are interpreted as follows.
// 
// - "Truth has a name and you do not know it."
//      This informs us that we are looking for a single word and 
//      that it is the name of someone or something.
//
// - "Hey you, nix those feeble attempts at escape."
//      The words "you"+"nix" perhaps bring to mind "unix"
//
// - "The source of truth is open."
//      The words "open"+"source" perhaps bring to mind "open source 
//      software"
//
// - "If only penguins could fly?"
//      A reference to Tux the Linux mascot
//
// - "The truth is in the ether and available to all."
//      A reference to ethernet/internet and to open source software 
//      that can be downloaded from the internet.
//
// - "Truth wears a red hat and goes around with Suse."
//      A refenrence to Red Hat Linux and Suse Linux, two preeminent
//      Linux distributions
//
// - "Big Blue has seen the truth."
//      A reference to IBM and their current Linux initiative
//
// - "Can you spell unix with an 'L'?"
//      A reference to Linux which is a Unix based OS
//
// So the botttom line is that the only way out of windows hell is to
// switch over to linux. Type "linux" and enter key to get out. 
//
// If the game is being run from Linux then the player is not welcome
// in Windows Hell  and  is  told what to do to get out and that they 
// are not welcome. 
//
// Scipting Hint - Operating System Specific Actions
// Linux users don't get stuck in windows hell and so get extra  help
// in getting out. There is a system variable, system.os, whose value 
// identifies under which operating system the game is running as 
// follows:
//    
// - system.os==1 DOS
// - system.os==2 Windows
// - system.os==3 Linux
//
// Scipting Hint - Text Overlays
// The  Overlay.CreateTextual(...)  function creates a screen overlay
// containing the specified text at the specified position.  A screen 
// overlay  looks  identical  to  the way speech text is displayed in 
// conversations, except that with this command the text stays on the 
// screen until it is removed with  the Remove command, or the player 
// goes to a different room, in which case it's automatically removed.
// The function returns the Overlay which is later used to reposition 
// and remove the overlay.
//
// Scipting Hint - Intercepting Keyboard Input
// Normally  keyboard  inoput is  handled in the Global Script by the 
// on_key_press() interaction function.  The  room script can be made
// to also  respond to  keyboard  input by using the same interaction 
// function.So the on_keyPress() function in the Room Script is first
// called and then the on_keyPress() function in the Global Script is
// called. If  the  ClaimEvent()  function  is  called then the event 
// function in the Global Script is never called.
//
// Scipting Hint - Animating Objects
// Before an object can be animated, it must be assigned an animation
// view. The objects being animated in this room are the blue flames.
// The  same  sprites and animation loop is used for all the objects. 
// If they were all synchronized then it would be apparent that they 
// were  all using exactly  the same sprites and animation  loop. By 
// executing  a  random wait before starting each object's animation 
// the synchronization effect is broken. 
//
// Scipting Hint - Organization 
// All though this room contains a fair number of line of script code
// custom Application and Utility functions have not been utilized as
// they have been in the AgsTerminal room. This may seem inconsistent
// at first glance.  The creation of custom functions is  very useful
// in managing  the complexity of a program  but not necessarily it's 
// size. Although they often go hand in hand, size and complexity are
// not the same thing.  
// 
// Although there  isn't  any  one way of measuring a complexity, one 
// indication of complexity is the number  of  possible memory states
// in a program.  The more memory state the more complex the program.  
// Consider a door for example.  If the door could be either OPEN or
// CLOSED then it has only two memory states. If a lock is added then 
// there would be three memory states OPEN, CLOSED, or LOCKED.  
//
// In the script code below there are no memory states.  There are a
// number of if-else structures by the operate only on current input.
// The only thing close is the keyboard input processing which appends 
// a character to a buffer and analyses the buffer when the return key 
// is pressed. Creating a custom function for this bit would have been 
// considered if this were not the only canidate.
//
// Revision History
// 05-Mar-15 RickJ,        original version
// 
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Constant Definitions
//-------------------------------------------------------------------
#define TEXT_DELAY 200


//===================================================================
// Static Variable Definitions
//-------------------------------------------------------------------
char	Buf[200];
int	Ix=0;
int	FailCount=0;
Overlay *ScreenText;


//===================================================================
// Utility Functions
//-------------------------------------------------------------------


//===================================================================
// Application Functions
//-------------------------------------------------------------------


//===================================================================
// Interaction Handler Functions
//-------------------------------------------------------------------
function on_key_press(int keycode) {
	if ((keycode>'A')&&(keycode<'z')) {	
		Buf[Ix] = keycode;
		Ix++;
		Buf[Ix] = 0;
		if (ScreenText.Valid) ScreenText.Remove();
		ScreenText = Overlay.CreateTextual(150,50,270,1,15,Buf);
	}
	else if (keycode==13) {			// ReturnKey==13
		Parser.ParseText(Buf);
		Ix = 0;
		Buf[Ix] = 0;
		if (Said("linux")) {		
			if (ScreenText.Valid) ScreenText.Remove();
			ScreenText = Overlay.CreateTextual(50,50,240,1,15,"You have spoken wisely and freedom shall be your reward.");
			WaitMouseKey(TEXT_DELAY);
			ScreenText.Remove();
			player.ChangeRoom(player.PreviousRoom);
		}
		else {
			aEvilLaugh.Play();
			if (ScreenText.Valid) ScreenText.Remove();
			if (FailCount==0)      
				ScreenText = Overlay.CreateTextual(50,50,240,1,15,"Truth has a name and you do not know it.");
			else if (FailCount==1) 
				ScreenText = Overlay.CreateTextual(40,50,280,1,15,"Hey you, nix those feeble attempts at escape.");
			else if (FailCount==2) 
				ScreenText = Overlay.CreateTextual(80,50,240,1,15,"The source of truth is open.");
			else if (FailCount==3) 
				ScreenText = Overlay.CreateTextual(85,50,240,1,15,"If only penguins could fly?");
			else if (FailCount==4) 
				ScreenText = Overlay.CreateTextual(40,50,260,1,15,"The truth is in the ether and available to all.");
			else if (FailCount==5) 
				ScreenText = Overlay.CreateTextual(65,50,220,1,15,"Truth wears a red hat and goes around with Suse.");
			else if (FailCount==6) 
				ScreenText = Overlay.CreateTextual(90,50,240,1,15,"Big Blue has seen the truth.");
			else if (FailCount==7) 
				ScreenText = Overlay.CreateTextual(80,50,240,1,15,"Can you spell unix with an 'L'?");
			if (FailCount>=7) FailCount = 0;
			else FailCount++;
			WaitMouseKey(TEXT_DELAY);
			ScreenText.Remove();
		}
	}
	ClaimEvent();
}

#sectionstart room_a  // DO NOT EDIT OR REMOVE THIS LINE
function room_a() {
	// script for room: Player enters screen (before fadein)

	// Initialize help GUI
	gHelpTitle.Text = "Windows Hell";
	gHelpDescription.Text = "This room demonstrates the use of text overlays, object animation, and interception of keyboard input.";
	gHelpReference.Text = "Manual Reference:[Object Animate, Overlay, on_key_press, ClaimEvent";

	// Position player character
	player.StopMoving();
	player.x = 115;
	player.y = 180;

	// Play ambient flame sound
  AudioChannel* channel = aFire.Play(eAudioPriorityNormal, eRepeat);
  channel.SetRoomLocation(160, 100);
}
#sectionend room_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {
	// script for room: Player enters screen (after fadein)

	// Initialize flame objects
	oFlame0.SetView(24,4,0);
	oFlame1.SetView(24,4,0);
	oFlame2.SetView(24,4,0);
	oFlame3.SetView(24,4,0);
	oFlame4.SetView(24,4,0);
	oFlame5.SetView(24,4,0);
	oFlame6.SetView(24,4,0);
	oFlame7.SetView(24,4,0);
	oFlame8.SetView(24,4,0);
	oFlame9.SetView(24,4,0);
	oFlame10.SetView(24,4,0);
	oFlame11.SetView(24,4,0);

	// Animate flame objects
	oFlame0.Animate(4,2,eRepeat,eNoBlock,eForwards);	
	Wait(Random(6)+1);
	oFlame1.Animate(4,2,eRepeat,eNoBlock,eBackwards);
	Wait(Random(6)+1);
	oFlame2.Animate(4,2,eRepeat,eNoBlock,eBackwards);
	Wait(Random(6)+1);
	oFlame3.Animate(4,2,eRepeat,eNoBlock,eForwards);
	Wait(Random(6)+1);
	oFlame4.Animate(4,2,eRepeat,eNoBlock,eBackwards);
	Wait(Random(6)+1);
	oFlame5.Animate(4,2,eRepeat,eNoBlock,eForwards);
	Wait(Random(6)+1);
	oFlame6.Animate(4,2,eRepeat,eNoBlock,eForwards);
	Wait(Random(6)+1);
	oFlame7.Animate(4,2,eRepeat,eNoBlock,eBackwards);
	Wait(Random(6)+1);
	oFlame8.Animate(4,2,eRepeat,eNoBlock,eForwards);
	Wait(Random(6)+1);
	oFlame9.Animate(4,2,eRepeat,eNoBlock,eForwards);
	Wait(Random(6)+1);
	oFlame10.Animate(4,2,eRepeat,eNoBlock,eBackwards);
	Wait(Random(6)+1);
	oFlame11.Animate(4,2,eRepeat,eNoBlock,eForwards);	

	// Display introductory messages
	aEvilLaugh.Play();
	ScreenText = Overlay.CreateTextual(50,50,240,1,15,"Abandon all hope, Ye who shall enter here!");
	WaitMouseKey(TEXT_DELAY);
	ScreenText.SetText(240,1,15,"   For this be the Blue Screen of Death...");
	WaitMouseKey(TEXT_DELAY);
	ScreenText.SetText(240,1,15,"Press any key in despair, for there is but one reprieve from the Blue Screen.");
	WaitMouseKey(TEXT_DELAY);
	ScreenText.SetText(240,1,15,"Speak the truth, if you dare, and be delivered from the evil empire.");
	WaitMouseKey(TEXT_DELAY);

	// Display operating system dependent introductory messages
	if (system.os==3) {
		ScreenText.SetText(240,1,15,"So!! You already know the truth ...");
		WaitMouseKey(TEXT_DELAY);
		ScreenText.SetText(240,1,15,"... the truth that is Linux.");
		WaitMouseKey(TEXT_DELAY);
		ScreenText.SetText(240,1,15,"Type 'Linux' then get out, your kind is not welcome here.");
		WaitMouseKey(TEXT_DELAY);
	}
	ScreenText.Remove();
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

function hHotspot1_AnyClick()
{
player.ChangeRoomAutoPosition(666);
}
