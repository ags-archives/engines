<HTML>
<head><title>Character functions and properties</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic45"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags28.htm#topic38"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags48.htm#AudioClipCommands"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags50.htm#topic46"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Character functions and properties</H2>

<A HREF="#Character.AddInventory">AddInventory</A><BR>
<A HREF="#Character.AddWaypoint">AddWaypoint</A><BR>
<A HREF="#Character.Animate">Animate (character)</A><BR>
<A HREF="#Character.ChangeRoom">ChangeRoom</A><BR>
<A HREF="#Character.ChangeRoomAutoPosition">ChangeRoomAutoPosition</A><BR>
<A HREF="#Character.ChangeView">ChangeView</A><BR>
<A HREF="#Character.FaceCharacter">FaceCharacter</A><BR>
<A HREF="#Character.FaceLocation">FaceLocation</A><BR>
<A HREF="#Character.FaceObject">FaceObject</A><BR>
<A HREF="#Character.FollowCharacter">FollowCharacter</A><BR>
<A HREF="#Character.GetAtScreenXY">GetAtScreenXY (character)</A><BR>
<A HREF="#Character.GetProperty">GetProperty (character)</A><BR>
<A HREF="#Character.GetTextProperty">GetTextProperty (character)</A><BR>
<A HREF="#Character.HasInventory">HasInventory</A><BR>
<A HREF="#Character.IsCollidingWithChar">IsCollidingWithChar</A><BR>
<A HREF="#Character.IsCollidingWithObject">IsCollidingWithObject (character)</A><BR>
<A HREF="#Character.LockView">LockView</A><BR>
<A HREF="#Character.LockViewAligned">LockViewAligned</A><BR>
<A HREF="#Character.LockViewFrame">LockViewFrame</A><BR>
<A HREF="#Character.LockViewOffset">LockViewOffset</A><BR>
<A HREF="#Character.LoseInventory">LoseInventory</A><BR>
<A HREF="#Character.Move">Move (character)</A><BR>
<A HREF="#Character.PlaceOnWalkableArea">PlaceOnWalkableArea</A><BR>
<A HREF="#Character.RemoveTint">RemoveTint (character)</A><BR>
<A HREF="#Character.RunInteraction">RunInteraction (character)</A><BR>
<A HREF="#Character.Say">Say</A><BR>
<A HREF="#Character.SayAt">SayAt</A><BR>
<A HREF="#Character.SayBackground">SayBackground</A><BR>
<A HREF="#Character.SetAsPlayer">SetAsPlayer</A><BR>
<A HREF="#Character.SetIdleView">SetIdleView</A><BR>
<A HREF="#Character.SetWalkSpeed">SetWalkSpeed</A><BR>
<A HREF="#Character.StopMoving">StopMoving (character)</A><BR>
<A HREF="#Character.Think">Think</A><BR>
<A HREF="#Character.Tint">Tint (character)</A><BR>
<A HREF="#Character.UnlockView">UnlockView</A><BR>
<A HREF="#Character.Walk">Walk</A><BR>
<A HREF="#Character.WalkStraight">WalkStraight</A><BR>
<A HREF="#Character.ActiveInventory">ActiveInventory property</A><BR>
<A HREF="#Character.Animating">Animating property (character)</A><BR>
<A HREF="#Character.AnimationSpeed">AnimationSpeed property</A><BR>
<A HREF="#Character.Baseline">Baseline property (character)</A><BR>
<A HREF="#Character.BlinkInterval">BlinkInterval property</A><BR>
<A HREF="#Character.BlinkView">BlinkView property</A><BR>
<A HREF="#Character.BlinkWhileThinking">BlinkWhileThinking property</A><BR>
<A HREF="#Character.BlockingHeight">BlockingHeight property (character)</A><BR>
<A HREF="#Character.BlockingWidth">BlockingWidth property (character)</A><BR>
<A HREF="#Character.Clickable">Clickable property (character)</A><BR>
<A HREF="#Character.DiagonalLoops">DiagonalLoops property</A><BR>
<A HREF="#Character.Frame">Frame property (character)</A><BR>
<A HREF="#Character.HasExplicitTint">HasExplicitTint property</A><BR>
<A HREF="#Character.ID">ID property (character)</A><BR>
<A HREF="#Character.IdleView">IdleView property</A><BR>
<A HREF="#Character.IgnoreLighting">IgnoreLighting property</A><BR>
<A HREF="#Character.IgnoreWalkbehinds">IgnoreWalkbehinds property (character)</A><BR>
<A HREF="#Character.InventoryQuantity">InventoryQuantity property</A><BR>
<A HREF="#Character.Loop">Loop property (character)</A><BR>
<A HREF="#Character.ManualScaling">ManualScaling property (character)</A><BR>
<A HREF="#Character.MovementLinkedToAnimation">MovementLinkedToAnimation property</A><BR>
<A HREF="#Character.Moving">Moving property (character)</A><BR>
<A HREF="#Character.Name">Name property (character)</A><BR>
<A HREF="#Character.NormalView">NormalView property</A><BR>
<A HREF="#Character.PreviousRoom">PreviousRoom property</A><BR>
<A HREF="#Character.Room">Room property</A><BR>
<A HREF="#Character.ScaleMoveSpeed">ScaleMoveSpeed property</A><BR>
<A HREF="#Character.ScaleVolume">ScaleVolume property</A><BR>
<A HREF="#Character.Scaling">Scaling property (character)</A><BR>
<A HREF="#Character.Solid">Solid property (character)</A><BR>
<A HREF="#Character.Speaking">Speaking property</A><BR>
<A HREF="#Character.SpeakingFrame">SpeakingFrame property</A><BR>
<A HREF="#Character.SpeechAnimationDelay">SpeechAnimationDelay property</A><BR>
<A HREF="#Character.SpeechColor">SpeechColor property</A><BR>
<A HREF="#Character.SpeechView">SpeechView property</A><BR>
<A HREF="#Character.ThinkView">ThinkView property</A><BR>
<A HREF="#Character.Transparency">Transparency property (character)</A><BR>
<A HREF="#Character.TurnBeforeWalking">TurnBeforeWalking property</A><BR>
<A HREF="#Character.View">View property (character)</A><BR>
<A HREF="#Character.WalkSpeedX">WalkSpeedX property</A><BR>
<A HREF="#Character.WalkSpeedY">WalkSpeedY property</A><BR>
<A HREF="#Character.x">x property (character)</A><BR>
<A HREF="#Character.y">y property (character)</A><BR>
<A HREF="#Character.z">z property (character)</A><BR>
<A HREF="#SetCharacterProperty">SetCharacterProperty</A><BR>
<P>

<HR>
<A NAME="Character.AddInventory"></A>
<H3>AddInventory</H3>
<I>(Formerly known as global function AddInventory, which is now obsolete)</I> <br> 
<I>(Formerly known as global function AddInventoryToCharacter, which is now obsolete)</I><P>
<PRE>
Character.AddInventory(InventoryItem *item, optional int addAtIndex)
</PRE>
Adds the specified item to the character's inventory. This
ensures that the item gets added to the character's inventory list, and that
any on-screen inventory display gets updated if appropriate.<P>
The first parameter is the inventory item's Script O-Name from the editor (for
example, <I>iPoster</I>).<P>
By default, the new item is added to the end of the character's inventory list. However,
you can insert it in a particular position in the list by supplying the second parameter.
The new item is inserted <I>before</I> the current item at <I>addAtIndex</I>. Indexes are
numbered from 0, so to add the item at the start of the list, pass 0 as the second parameter.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.AddInventory(iKey);
</PRE>
will give inventory item iKey to character EGO.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.HasInventory">Character.HasInventory</A>,
<A HREF="ags49.htm#Character.LoseInventory">Character.LoseInventory</A>,
<A HREF="ags56.htm#UpdateInventory">UpdateInventory</A><P>


<HR>
<A NAME="Character.AddWaypoint"></A>
<H3>AddWaypoint</H3>
<I>(Formerly known as MoveCharacterPath, which is now obsolete)</I><P>
<PRE>
Character.AddWaypoint(int x, int y)
</PRE>
Tells the character to move to (X,Y) directly, after it has finished its current
move. This function allows you to queue up a series of moves for the character to make, if
you want them to take a preset path around the screen. Note that any moves made with
this command ignore walkable areas.<P>
This is useful for situations when you might want a townsperson to wander onto the screen
from one side, take a preset route around it and leave again.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cSomeguy.Walk(160, 100);
cSomeguy.AddWaypoint(50, 150);
cSomeguy.AddWaypoint(50, 50);
</PRE>
tells character SOMEGUY to first of all walk to the centre of the screen normally (obeying
walkable areas), then move to the bottom left corner and then top left corner afterwards.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Move">Character.Move</A>
<A HREF="ags49.htm#Character.Walk">Character.Walk</A><P>


<HR>
<A NAME="Character.Animate"></A>
<H3>Animate (character)</H3>
<I>(Formerly known as AnimateCharacter, which is now obsolete)</I> <br> 
<I>(Formerly known as AnimateCharacterEx, which is now obsolete)</I><P>
<PRE>
Character.Animate(int loop, int delay, optional RepeatStyle,
                  optional BlockingStyle, optional Direction)
</PRE>
Starts the character animating, using loop number LOOP of his current view. The
overall speed of the animation is set with DELAY, where 0 is the fastest, and
increasing numbers mean slower. The delay for each frame is worked out as DELAY + FRAME SPD,
so the individual frame speeds are relative to this overall speed.<P>
Before using this command, you should use <A HREF="ags49.htm#Character.LockView">LockView</A> in order
to select the view you want to animate with and prevent any automatic animations (eg.
walking or idle animations) from playing.<P>
The <I>RepeatStyle</I> parameter sets whether the animation will continuously repeat
the cycling through the frames. This can be <I>eOnce</I> (or zero), in which case the animation
will start from the first frame of LOOP, and go through each frame in turn until the
last frame, where it will stop. If RepeatStyle is <I>eRepeat</I> (or 1), then when the last frame
is reached, it will go back to the first frame and start over again with the animation.<P>
<I>direction</I> specifies which way the animation plays. You can either pass eForwards (the
default) or eBackwards.<P>
For <I>blocking</I> you can pass either eBlock (in which case the function will wait
for the animation to finish before returning), or eNoBlock (in which case the animation
will start to play, but your script will continue). The default is eBlock.<P>
If the character is currently moving, it will be stopped.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockView(5);
cEgo.Animate(3, 1, 0, eBlock, eBackwards);
cEgo.UnlockView();
</PRE>
will animate the character once using loop number 3 of view 5 backwards, and
wait until the animation finishes before returning.<P>
<I>See Also:</I> <A HREF="ags70.htm#Object.Animate">Object.Animate</A><P>
<P>

<HR>
<A NAME="Character.ChangeRoom"></A>
<H3>ChangeRoom</H3>
<I>(Formerly known as NewRoom, which is now obsolete)</I> <br> 
<I>(Formerly known as NewRoomEx, which is now obsolete)</I> <br> 
<I>(Formerly known as NewRoomNPC, which is now obsolete)</I><P>
<PRE>
Character.ChangeRoom(int room_number, optional int x, optional int y)
</PRE>
Changes the room that the character is in.<P>
If you call this on the player character, then the game will move into the new
room with them.<P>
<B>IMPORTANT:</B> This command does not change the room immediately; instead, it
will perform the actual room change once your script function has finished
(This is to avoid problems with unloading the script while it is still
running). This means that you should not use any other commands which rely
on the new room (object positionings, and so on) after this command within
the same function.<P>
If you call this on a non-player character, then they are instantly transported
to the new room number.<P>
Optionally, you can include an X and Y co-ordinate (you must include either both
or neither). If you do so, then the character will also be moved to the specified
co-ordinates in the new room.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.ChangeRoom(4, 100, 50); 
</PRE>
will move the player character to room 4 and also place him at coordinates 100,50.
This will also mean that the game moves into room 4.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ChangeRoomAutoPosition">Character.ChangeRoomAutoPosition</A><P>
<P>

<HR>
<A NAME="Character.ChangeRoomAutoPosition"></A>
<H3>ChangeRoomAutoPosition</H3>
<PRE>
Character.ChangeRoomAutoPosition(int room_number, optional int newPosition)
</PRE>
Changes the room that the character is in, and positions him along one of the room edges.<P>
This command simulates the behaviour of the old "Go to room" interaction command from AGS 2.72
and previous versions. If <I>newPosition</I> is not specified or is 0, the character will be
placed on the opposite side of the new room, if he is within 10 pixels of a room edge in the
current room.<P>
Altenatively, you can specify the position where he will get placed in the new room.
<I>newPosition</I> can be 1000 for the left edge, 2000 for the right edge, 3000 for the
bottom edge and 4000 for the top edge. Then, add on the offset within that edge where
you want to place the character, in normal room co-ordinates.<P>
<B>IMPORTANT:</B> This command does not change the room immediately; instead, it
will perform the actual room change once your script function has finished
(This is to avoid problems with unloading the script while it is still
running). This means that you should not use any other commands which rely
on the new room (object positionings, and so on) after this command within
the same function.<P>
<B>NOTE:</B> This command can only be used with the player character.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.ChangeRoomAutoPosition(4, 2100); 
</PRE>
will move the player character to room 4 and place him half way down the right hand side of the screen.
This will also mean that the game moves into room 4.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ChangeRoom">Character.ChangeRoom</A><P>
<P>

<HR>
<A NAME="Character.ChangeView"></A>
<H3>ChangeView</H3>
<I>(Formerly known as ChangeCharacterView, which is now obsolete)</I><P>
<PRE>
Character.ChangeView(int view)
</PRE>
Changes the normal view number of the character to <I>view</I>. This is
useful if, for example, you want the character to change the clothes
they are wearing, and so permanently alter their view number.<P>
<B>NOTE:</B> This command is <B>not</B> intended to change the view temporarily to
perform an animation. If you want to do that, use the LockView command instead. This
ChangeView command permanently changes the character's normal walking view.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ChangeView(5);
</PRE>
will make the EGO character use view number 5 as his walking view.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.LockView">Character.LockView</A>,
<A HREF="ags49.htm#Character.NormalView">Character.NormalView</A><P>


<HR>
<A NAME="Character.FaceCharacter"></A>
<H3>FaceCharacter</H3>
<I>(Formerly known as global function FaceCharacter, which is now obsolete)</I><P>
<PRE>
Character.FaceCharacter(Character* toFace, optional BlockingStyle)
</PRE>
Turns the graphic of the character so that it looks like he is facing
character TOFACE. This involves changing the current loop to the appropriate
loop number, and setting the frame number to 0 (standing).<P>
If the character has Turning enabled (ie. the "Characters turn to face direction" game
option is turned on, and the character does not have the "Do not turn before walking"
option checked), then the character will turn on the spot in order to face the new direction.
In this case, the BlockingStyle parameter determines whether the script waits for the
character to finish turning (eBlock, the default) or whether the script continues immediately
and the character finishes turning later on (eNoBlock).<P>
If the character does not have Turning enabled, he will immediately turn to face the
new direction and the BlockingStyle parameter has no effect. In this case, the screen
will not be refreshed straight away -- if you want to see the character facing his new direction
immediately, call  Wait(1);<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.FaceCharacter(cMan);
</PRE>
will make the character EGO face the character MAN<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.FaceLocation">Character.FaceLocation</A>,
<A HREF="ags49.htm#Character.FaceObject">Character.FaceObject</A>,
<A HREF="ags49.htm#Character.Walk">Character.Walk</A><P>


<HR>
<A NAME="Character.FaceLocation"></A>
<H3>FaceLocation</H3>
<I>(Formerly known as global function FaceLocation, which is now obsolete)</I><P>
<PRE>
Character.FaceLocation(int x, int y, optional BlockingStyle)
</PRE>
Similar to the FaceCharacter function, except that this faces the character
to room co-ordinates (X,Y). This allows him to face not only other characters,
but also hotspots or anything else as well (you can get co-ordinates by
watching the co-ordinates displayed in the Room Settings mode as you move the mouse
over the room background).<P>
If the character has Turning enabled (ie. the "Characters turn to face direction" game
option is turned on, and the character does not have the "Do not turn before walking"
option checked), then the character will turn on the spot in order to face the new direction.
In this case, the BlockingStyle parameter determines whether the script waits for the
character to finish turning (eBlock, the default) or whether the script continues immediately
and the character finishes turning later on (eNoBlock).<P>
If the character does not have Turning enabled, he will immediately turn to face the
new direction and the BlockingStyle parameter has no effect. In this case, the screen
will not be refreshed straight away -- if you want to see the character facing his new direction
immediately, call  Wait(1);<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.FaceLocation(cEgo.x + 50, cEgo.y);
</PRE>
will make the character face to the east.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.FaceCharacter">Character.FaceCharacter</A><P>


<HR>
<A NAME="Character.FaceObject"></A>
<H3>FaceObject</H3>
<PRE>
Character.FaceObject(Object* object, optional BlockingStyle)
</PRE>
Similar to the FaceCharacter function, except that this faces the character
to object OBJECT in the current room.<P>
If the character has Turning enabled (ie. the "Characters turn to face direction" game
option is turned on, and the character does not have the "Do not turn before walking"
option checked), then the character will turn on the spot in order to face the new direction.
In this case, the BlockingStyle parameter determines whether the script waits for the
character to finish turning (eBlock, the default) or whether the script continues immediately
and the character finishes turning later on (eNoBlock).<P>
If the character does not have Turning enabled, he will immediately turn to face the
new direction and the BlockingStyle parameter has no effect. In this case, the screen
will not be refreshed straight away -- if you want to see the character facing his new direction
immediately, call  Wait(1);<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.FaceObject(object[2]);
</PRE>
will make the player character face object 2.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.FaceCharacter">Character.FaceCharacter</A><P>


<HR>
<A NAME="Character.FollowCharacter"></A>
<H3>FollowCharacter</H3>
<I>(Formerly known as global function FollowCharacter, which is now obsolete)</I> <br> 
<I>(Formerly known as global function FollowCharacterEx, which is now obsolete)</I><P>
<PRE>
Character.FollowCharacter(Character* chartofollow, optional int dist,
                          optional int eagerness)
</PRE>
Tells the character to follow CHARTOFOLLOW around, wherever he goes.
You could use this command to have a group of main characters who go around
together, or for example when the hero has rescued someone from the bad
guy, they can follow the hero home.<P>
Pass CHARTOFOLLOW as <I>null</I> to stop the character following.<P>
There are a couple of extra optional parameters:<P>
DIST sets how far away from CHARTOFOLLOW that CHARID will
stand. If DIST is 1, they will try to stand very close; if DIST is for
example 20, they will stand about 20 pixels away.<P>
EAGERNESS sets on average how long the character will stand around before
checking if he needs to move again. Setting this to 0 means that he will
always be on the move until he reaches CHARTOFOLLOW; setting this to 99
means that he will pause and think for a while on route. Values in between
specify different lengths of idle time.<P>
The default values are DIST=10 and EAGERNESS=97.<P>
As a special case, setting DIST=0 and EAGERNESS=0 makes CHARID behave as if
it is chasing CHARTOFOLLOW - it will try and get there as quickly as possible.
Setting EAGERNESS=0 also tells the character not to stop when they reach
CHARTOFOLLOW, but instead to randomly wander around the character - useful
perhaps for a very energetic dog or something.<P>
There is also another special use for this command. You can pass the special
value FOLLOW_EXACTLY as the DIST parameter rather than passing a number. If you
do this, then CHARID will always remain at exactly the same X and Y co-ordinates
as CHARTOFOLLOW. This might be useful for effects such as a temporary halo over 
the character and so forth.<P>
If you use FOLLOW_EXACTLY, then EAGERNESS has another meaning. If you pass 0, CHARID
will be drawn in front of CHARTOFOLLOW; if you pass 1, it will be drawn behind.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cMan.FollowCharacter(cEgo, 5, 80);
</PRE>
will make character MAN follow character EGO standing about 5 pixels near
him and waiting for a while before he makes his move.<P>


<HR>
<A NAME="Character.GetAtScreenXY"></A>
<H3>GetAtScreenXY (character)</H3>
<I>(Formerly known as global function GetCharacterAt, which is now obsolete)</I><P>
<PRE>
static Character* Character.GetAtScreenXY(int x, int y)
</PRE>
Checks if there is a character at SCREEN co-ordinates (X,Y).
Returns the character if there is, or null if there is not.
See the description of GetLocationName for more on screen co-ordinates.<P>
NOTE: Any characters with the "Clickable" property set to false will not be seen
by this function.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Character.GetAtScreenXY(mouse.x, mouse.y) == cEgo) {
  Display("The mouse is over the main character");
}
</PRE>
will display the message if the mouse cursor is over the EGO character<P>
<I>See Also:</I> <A HREF="ags65.htm#Hotspot.GetAtScreenXY">Hotspot.GetAtScreenXY</A>,
<A HREF="ags70.htm#Object.GetAtScreenXY">Object.GetAtScreenXY</A>,
<A HREF="ags56.htm#Game.GetLocationName">Game.GetLocationName</A><P>


<HR>
<A NAME="Character.GetProperty"></A>
<H3>GetProperty (character)</H3>
<I>(Formerly known as GetCharacterProperty, which is now obsolete)</I><P>
<PRE>
Character.GetProperty(string property)
</PRE>
Returns the custom property setting of the PROPERTY for the specified character.<P>
This command works with Number properties (it returns the number), and with Boolean
properties (returns 1 if the box was checked, 0 if not).<P>
Use the equivalent GetTextProperty function to get a text property.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.GetProperty("Value") &gt; 200)
  Display("EGO's value is over 200!");
</PRE>
will print the message if EGO has its "Value" property set to more than 200.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.GetTextProperty">Character.GetTextProperty</A><P>


<HR>
<A NAME="Character.GetTextProperty"></A>
<H3>GetTextProperty (character)</H3>
<I>(Formerly known as GetCharacterPropertyText, which is now obsolete)</I> <br> 
<I>(Formerly known as Character.GetPropertyText, which is now obsolete)</I><P>
<PRE>
String Character.GetTextProperty(string property)
</PRE>
Returns the custom property setting of the PROPERTY for the specified character.<P>
This command works with Text properties only. The property's text will be
returned from this function.<P>
Use the equivalent GetProperty function to get a non-text property.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String description = cEgo.GetTextProperty("Description");
Display("EGO's description: %s", description);
</PRE>
will retrieve EGO's "description" property and display it.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.GetProperty">Character.GetProperty</A><P>


<HR>
<A NAME="Character.HasInventory"></A>
<H3>HasInventory</H3>
<PRE>
bool Character.HasInventory(InventoryItem *item)
</PRE>
Checks whether the character currently has the specified inventory item.
Returns <I>true</I> if they do, or <I>false</I> if they don't.<P>
The parameter is the inventory item's Script O-Name from the editor (for
example, <I>iPoster</I>).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (player.HasInventory(iKey))
{
  Display("The player has the key!!");
}
</PRE>
will display a message if the player has the key.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.0</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AddInventory">Character.AddInventory</A>,
<A HREF="ags49.htm#Character.InventoryQuantity">Character.InventoryQuantity</A>,
<A HREF="ags49.htm#Character.LoseInventory">Character.LoseInventory</A><P>
<P>

<HR>
<A NAME="Character.IsCollidingWithChar"></A>
<H3>IsCollidingWithChar</H3>
<I>(Formerly known as AreCharactersColliding, which is now obsolete)</I><P>
<PRE>
Character.IsCollidingWithChar(Character* otherChar)
</PRE>
Checks if the character is touching OTHERCHAR. This function just checks
the baseline of both characters, so if one is standing a fair distance behind
the other, it will not be marked as colliding.<P>
Returns 1 if the characters feet are touching, 0 otherwise.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.IsCollidingWithChar(cMan) == 1)
   { colliding code here }
</PRE>
will execute the colliding code only if the characters EGO and MAN are colliding. <P>
<I>See Also:</I> <A HREF="ags49.htm#Character.IsCollidingWithObject">Character.IsCollidingWithObject</A>, 
<A HREF="ags70.htm#Object.IsCollidingWithObject">Object.IsCollidingWithObject</A>,
<A HREF="ags75.htm#AreThingsOverlapping">AreThingsOverlapping</A><P>


<HR>
<A NAME="Character.IsCollidingWithObject"></A>
<H3>IsCollidingWithObject (character)</H3>
<I>(Formerly known as AreCharObjColliding, which is now obsolete)</I><P>
<PRE>
Character.IsCollidingWithObject(Object* obj)
</PRE>
Checks whether the character's feet (ie. the bottom third of the character) are
touching OBJ. This can be used to determine if the character is standing on the object.<P>
Returns 1 if they are, and 0 if they are not.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.IsCollidingWithObject(object[3]) == 1) {
  // colliding code here
}
</PRE>
will execute the colliding code only if the character EGO and the object number 3 are colliding. <P>
<I>See Also:</I> <A HREF="ags49.htm#Character.IsCollidingWithChar">Character.IsCollidingWithChar</A>, 
<A HREF="ags70.htm#Object.IsCollidingWithObject">Object.IsCollidingWithObject</A>,
<A HREF="ags75.htm#AreThingsOverlapping">AreThingsOverlapping</A><P>


<HR>
<A NAME="Character.LockView"></A>
<H3>LockView</H3>
<I>(Formerly known as SetCharacterView, which is now obsolete)</I><P>
<PRE>
Character.LockView(int view)
</PRE>
Sets the character's view to VIEW. This can be used to perform animations
with characters, for example bending down to pick something up, which don't
use the default view.<P>
<B>NOTE:</B> This function locks the character's view to the specified view, so
that it can only be changed by other script commands (ie. it won't
automatically be changed by AGS on walkable areas, screen changes,
etc). When you are done with the animation, call UnlockView to allow AGS to
take control back.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockView(12);
cEgo.Animate(0, 0, eOnce, eBlock, eForwards);
cEgo.UnlockView();
</PRE>
will change the character's EGO view to view 12, perform an animation using loop 0,
wait until the animation finishes and then return the character to his normal view.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Animate">Character.Animate</A>,
<A HREF="ags49.htm#Character.ChangeView">Character.ChangeView</A>,
<A HREF="ags49.htm#Character.SpeechView">Character.SpeechView</A>,
<A HREF="ags49.htm#Character.LockViewAligned">Character.LockViewAligned</A>,
<A HREF="ags49.htm#Character.LockViewOffset">Character.LockViewOffset</A>
<A HREF="ags49.htm#Character.UnlockView">Character.UnlockView</A>,<P>


<HR>
<A NAME="Character.LockViewAligned"></A>
<H3>LockViewAligned</H3>
<I>(Formerly known as SetCharacterViewEx, which is now obsolete)</I><P>
<PRE>
Character.LockViewAligned(int view, int loop, Alignment)
</PRE>
Sets the character's view to VIEW, and sets the character's current frame to
the first frame in LOOP of VIEW.<P>
The main purpose of this command is that it can align the new frame to the previous one.
This is particularly useful if you want to go from the character's normal walking view to
a specific animation - since characters have the central point as their 'axis', if
you have a wider animation then it can be difficult to stop yourself getting a jumping
effect when the animation starts.<P>
<I>Alignment</I> can have one of the following values:<P>
<TABLE BORDER>

<TR>
<TD ALIGN=LEFT> <B>align </B></TD>
<TD ALIGN=LEFT><B>Description </B>
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> eAlignLeft </TD>
<TD ALIGN=LEFT> Moves the new frame so that the left hand side is at exactly 
                          the same X co-ordinate as the old one was. 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> eAlignCentre </TD>
<TD ALIGN=LEFT> Leaves the frames centred in the middle. This is the default
                          and using this is equivalent to just calling LockView. 
</TD>
</TR>
<TR>
<TD ALIGN=LEFT> eAlignRight </TD>
<TD ALIGN=LEFT> Moves the new frame so that the right hand side is at exactly
                         the same X co-ordinate as the old one was. 
</TD>
</TR>
</TABLE>
<P>
Note that this only aligns the first frame of the animation, so to get the full benefit
all your frames in the animation loop should be the same width. All following frames will
be shifted by the same amount, until UnlockView is called.<P>
<B>NOTE:</B> This function locks the character's view to the specified view, so
that it can only be changed by other script commands (ie. it won't
automatically be changed by the program on regions, screen changes,
etc). When you are done with the animation, call UnlockView to
allow the program to take control back.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockViewAligned(12, 1, eAlignLeft);
cEgo.Animate(1, 5, eOnce, eBlock, eForwards);
cEgo.UnlockView();
</PRE>
will change the character's EGO view to view 12, perform an animation using loop 1,
wait until the animation finishes and then return the character to his normal view.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.LockView">Character.LockView</A>,
<A HREF="ags49.htm#Character.LockViewOffset">Character.LockViewOffset</A>,
<A HREF="ags49.htm#Character.UnlockView">Character.UnlockView</A><P>


<HR>
<A NAME="Character.LockViewFrame"></A>
<H3>LockViewFrame</H3>
<I>(Formerly known as SetCharacterFrame, which is now obsolete)</I><P>
<PRE>
Character.LockViewFrame(int view, int loop, int frame)
</PRE>
Sets the character's graphic to frame FRAME of loop LOOP of view number VIEW.
This is useful if you don't want an animation, but just want to change the
character to display a specific frame.<P>
The frame will be locked to the one you specify until you call UnlockView.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockViewFrame(AGHAST, 2, 4);
Wait(40);
cEgo.UnlockView();
</PRE>
will change EGO to have frame 4 of loop 2 in the AGHAST view, wait for a second,
then return him to normal.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Animate">Character.Animate</A>,
<A HREF="ags49.htm#Character.LockView">Character.LockView</A>,
<A HREF="ags49.htm#Character.UnlockView">Character.UnlockView</A><P>


<HR>
<A NAME="Character.LockViewOffset"></A>
<H3>LockViewOffset</H3>
<I>(Formerly known as SetCharacterViewOffset, which is now obsolete)</I><P>
<PRE>
Character.LockViewOffset(int view, int xOffset, int yOffset)
</PRE>
Sets the character's view to VIEW, in the same way as LockView does. However,
it also adds a specified offset to all the character's frames until UnlockView
is called.<P>
The XOFFSET and YOFFSET parameters specify <B>in actual game resolution units</B> how much
to move the character's sprite. Positive values for X move right, for Y move down; negative
values do the opposite.<P>
This command is designed to allow you to cope with those niggly situations where animations
don't quite line up with the standing frame, assuming all the frames of the animation are
the same size. Note that LockViewAligned is easier to use if your frames will align at
the left or right hand side.<P>
<B>NOTE:</B> You should only use this command for minor adjustments, since the offsets do not
affect the clickable area of the character, what walkable area he is in, and so forth. You
should limit the use of this command to in-game cutscenes where the player has no control.<P>
<B>NOTE:</B> This is the only command in AGS which uses actual game-resolution co-ordinates.
Therefore, specifying an x offset of 1 will actually move 1 pixel in a 640x400 game, and will
not be multiplied up to 2 (they will be automatically adjusted though if the player chooses
to play the game at another resolution).<P>
<B>NOTE:</B> This function locks the character's view to the specified view, so
that it can only be changed by other script commands (ie. it won't
automatically be changed by AGS on walkable areas, screen changes, etc). When
you are done with the animation, call UnlockView to allow AGS to take control back.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockViewOffset(12, 1, -1);
cEgo.Animate(1, 5, eOnce, eBlock, eForwards);
cEgo.UnlockView();
</PRE>
will change EGO's view to view 12 and animate using loop 1, meanwhile all frames will be
shifted 1 pixel right and 1 pixel up.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.LockView">Character.LockView</A>,
<A HREF="ags49.htm#Character.LockViewAligned">Character.LockViewAligned</A>,
<A HREF="ags49.htm#Character.UnlockView">Character.UnlockView</A><P>


<HR>
<A NAME="Character.LoseInventory"></A>
<H3>LoseInventory</H3>
<I>(Formerly known as global function LoseInventory, which is now obsolete)</I><br> 
<I>(Formerly known as LoseInventoryFromCharacter, which is now obsolete)</I><P>
<PRE>
Character.LoseInventory(InventoryItem *item)
</PRE>
Removes the specified inventory item from the character's inventory.
If they do not have the item, nothing happens.<P>
The parameter is the inventory item's Script O-Name from the editor.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LoseInventory(iKey);
</PRE>
will make the character EGO lose the inventory item iKey from the inventory tab<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AddInventory">Character.AddInventory</A><P>


<HR>
<A NAME="Character.Move"></A>
<H3>Move (character)</H3>
<PRE>
Character.Move(int x, int y, optional BlockingStyle,
                             optional WalkWhere);
</PRE>
Starts the character moving from its current location to (X,Y), but does 
not play the character's walking animation.<P>
The parameters to this command are identical to the <A HREF="ags49.htm#Character.Walk">Character.Walk</A>
command -- see that page for more details. The only difference is that <I>Walk</I>
plays the walking animation whereas <I>Move</I> does not.<P>
In the vast majority of cases, you will use <B>Character.Walk</B> instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Move(155, 122, eBlock);
</PRE>
will make the character move to 155,122 without playing his walking animation.
The script will not continue until the character has reached his destination.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.0</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AddWaypoint">Character.AddWaypoint</A>,
<A HREF="ags49.htm#Character.FaceCharacter">Character.FaceCharacter</A>,
<A HREF="ags49.htm#Character.Walk">Character.Walk</A>,
<A HREF="ags56.htm#MoveCharacterToObject">MoveCharacterToObject</A>,
<A HREF="ags70.htm#Object.Move">Object.Move</A>,
<A HREF="ags49.htm#Character.StopMoving">Character.StopMoving</A><P>


<HR>
<A NAME="Character.PlaceOnWalkableArea"></A>
<H3>PlaceOnWalkableArea</H3>
<I>(Formerly known as MoveToWalkableArea, which is now obsolete)</I><P>
<PRE>
Character.PlaceOnWalkableArea()
</PRE>
Places the character in the nearest walkable area to its current location.
If the character is already on a walkable area, nothing happens.<P>
This is useful for example in the Player Enters Room event of a room, to
make sure the character can move if a ChangeRoom with co-ordinates has been issued to get there.
You could also use this in on_event for eEventEnterRoomBeforeFadein to use whenever a
player enters a room.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.x = Random(320);
cEgo.y = Random(200);
cEgo.PlaceOnWalkableArea();
</PRE>
will move character EGO to a random position but make sure that he is on a walkable area.<P>


<HR>
<A NAME="Character.RemoveTint"></A>
<H3>RemoveTint (character)</H3>
<PRE>
Character.RemoveTint()
</PRE>
Undoes the effects of calling Tint, and returns the character to using the room's ambient tint.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.Tint(0, 250, 0, 30, 100);
Wait(40);
player.RemoveTint();
</PRE>
will tint the player character green for a second, then turn it back to normal.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.HasExplicitTint">Character.HasExplicitTint</A>,
<A HREF="ags49.htm#Character.Tint">Character.Tint</A><P>


<HR>
<A NAME="Character.RunInteraction"></A>
<H3>RunInteraction (character)</H3>
<I>(Formerly known as RunCharacterInteraction, which is now obsolete)</I><P>
<PRE>
Character.RunInteraction(CursorMode)
</PRE>
Fires the event script as if the player had clicked the mouse on the character
in the specified cursor mode. This is one of the mouse cursor
modes, as defined in your Cursors tab in the editor.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cMan.RunInteraction(eModeTalk);
</PRE>
will execute the code defined in the MAN's "TALK TO CHARACTER" event.<P>
<I>See Also:</I> <A HREF="ags56.htm#ProcessClick">ProcessClick</A>, <A HREF="ags65.htm#Hotspot.RunInteraction">Hotspot.RunInteraction</A>,
<A HREF="ags66.htm#InventoryItem.RunInteraction">InventoryItem.RunInteraction</A><P>


<HR>
<A NAME="Character.Say"></A>
<H3>Say</H3>
<I>(Formerly known as DisplaySpeech, which is now obsolete)</I><P>
<PRE>
Character.Say(string message)
</PRE>
Displays the text MESSAGE as speech above the character's head.
The text will remain on screen for a limited time, and the user may or may
not be able to click it away depending on the setting of "Player can't
skip speech text". The text displayed by this function looks identical to
that used by the dialog system.<P>
You can insert the value of variables into the message. For more information,
see the <A HREF="ags36.htm#StringFormats">string formatting</A> section.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Say("My name is ego");
</PRE>
will display the message above the character's EGO head like the LEC games,
whilst playing the character's talking animation.<P>
<I>See Also:</I> <A HREF="ags80.htm#Display">Display</A>, <A HREF="ags49.htm#Character.SayAt">Character.SayAt</A>,
<A HREF="ags49.htm#Character.SayBackground">Character.SayBackground</A>,
<A HREF="ags49.htm#Character.Think">Character.Think</A><P>


<HR>
<A NAME="Character.SayAt"></A>
<H3>SayAt</H3>
<I>(Formerly known as DisplaySpeechAt, which is now obsolete)</I><P>
<PRE>
SayAt(int x, int y, int width, string message)
</PRE>
Similar to <A HREF="ags49.htm#Character.Say">Say</A>, except that the text is displayed with its top
left corner at (X,Y), in an area WIDTH wide.<P>
You can use this function to write the character's speech text anywhere you like, and
AGS will still play the character's talking animation and so on if appropriate.<P>
<B>NOTE:</B> This function does not support Whole-Screen speech.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.SayAt(220, 20, 100, "My name is ego");
</PRE>
will display the message in the top right corner of the screen, whilst playing the
character's talking animation.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Say">Character.Say</A>,
<A HREF="ags49.htm#Character.SayBackground">Character.SayBackground</A><P>


<HR>
<A NAME="Character.SayBackground"></A>
<H3>SayBackground</H3>
<I>(Formerly known as DisplaySpeechBackground, which is now obsolete)</I><P>
<PRE>
Overlay* Character.SayBackground(string message)
</PRE>
Similar to Say, except that this function returns immediately
and the game continues while the character is talking. This allows you
to have characters talking in the background while the player does other
things. Note that the character's talking animation is not played if this
function is used.<P>
This command works by creating a text overlay with an automatic removal time
delay. The overlay is returned by this command, so you can save it for
use later with Overlay.IsValid and Overlay.Remove, if you want to remove the
text prematurely.<P>
If background speech is already on-screen for the character, it will be removed and
replaced with the new MESSAGE.<P>
All background speech is automatically removed when a normal Say command
is used (unless you set the global variable <A HREF="ags41.htm#Gamevariables">game.bgspeech_stay_on_display</A> to 1).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cMan.SayBackground("Hey, why won't you talk to me?");
</PRE>
will display the message above character MAN's head without pausing the game.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Say">Character.Say</A><P>


<HR>
<A NAME="Character.SetAsPlayer"></A>
<H3>SetAsPlayer</H3>
<I>(Formerly known as SetPlayerCharacter, which is now obsolete)</I><P>
<PRE>
Character.SetAsPlayer()
</PRE>
Changes the character which the player controls to the specified character.
This function will also cause the room to change to the room which the
chosen character is currently in (though as with ChangeRoom, the change won't
happen until the end of the script).<P>
Additionally, calling this command will cause the "player" variable to be
updated to point to the specified character.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cMan.SetAsPlayer();
</PRE>
will change the character that the player controls to character MAN and also change to the room
that MAN is in, if he is not in the current room.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ID">Character.ID</A>,
<A HREF="ags49.htm#Character.ChangeRoom">Character.ChangeRoom</A><P>


<HR>
<A NAME="Character.SetIdleView"></A>
<H3>SetIdleView</H3>
<I>(Formerly known as SetCharacterIdle, which is now obsolete)</I><P>
<PRE>
Character.SetIdleView(int idleview, int delay)
</PRE>
Changes the character's idle view to IDLEVIEW, with a timeout of DELAY seconds
of inactivity before it is played. Inactivity is defined as when the character
is not moving and not being animated.<P>
Setting DELAY to 0 causes the idle view to be looped continuously when
the character is not moving - this is useful when for example the character
is swimming and they need to tread water when idle.<P>
Pass IDLEVIEW as -1 to disable the idle view completely.<P>
<B>NOTE:</B> The DELAY is actually relative to the game speed. Setting this to 1 means
a one second delay at the default 40 fps, but if you have adjusted the game speed then
the delay will be adjusted accordingly.<P>
<B>NOTE:</B> Due to a quirk in AGS, you cannot set the Idle View to view 1. In the unlikely event that you
created your idle view in View 1, you'll need to move it to another view number.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.SetIdleView(12, 30);
</PRE>
will change/set the character EGO's idle view to 12. The idle view will be
played if the character is idle for 30 seconds.<P>


<HR>
<A NAME="Character.SetWalkSpeed"></A>
<H3>SetWalkSpeed</H3>
<I>(Formerly known as SetCharacterSpeed, which is now obsolete)</I><br> 
<I>(Formerly known as SetCharacterSpeedEx, which is now obsolete)</I><P>
<PRE>
Character.SetWalkSpeed(int x_speed, int y_speed)
</PRE>
Changes the character to have a walking speed of X_SPEED in the horizontal direction
and Y_SPEED in the vertical direction. The values used for X_SPEED and Y_SPEED are
identical to those set in the AGS Editor for walking speed.<P>
X_SPEED and Y_SPEED can be identical, in which case the character moves with the same
speed in any direction. (the editor calls this "Uniform movement speed")<P>
<B>NOTE:</B> This function CANNOT be called while the character is moving, so
you must stop him first.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.SetWalkSpeed(10, 10);
</PRE>
will change the character EGO's speed to 10.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AnimationSpeed">Character.AnimationSpeed</A>,
<A HREF="ags49.htm#Character.StopMoving">Character.StopMoving</A>,
<A HREF="ags49.htm#Character.Walk">Character.Walk</A>,
<A HREF="ags49.htm#Character.WalkSpeedX">Character.WalkSpeedX</A>,
<A HREF="ags49.htm#Character.WalkSpeedY">Character.WalkSpeedY</A><P>
<P>

<HR>
<A NAME="Character.StopMoving"></A>
<H3>StopMoving (character)</H3>
<I>(Formerly known as global function StopMoving, which is now obsolete)</I><P>
<PRE>
Character.StopMoving()
</PRE>
Stops the character moving and sets its graphic to the standing frame of the current loop.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.x &gt; 299) 
{
  cEgo.StopMoving();
}
</PRE>
will stop the character when he reaches the coordinate x=300.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Walk">Character.Walk</A>, <A HREF="ags70.htm#Object.StopMoving">Object.StopMoving</A><P>


<HR>
<A NAME="Character.Think"></A>
<H3>Think</H3>
<I>(Formerly known as DisplayThought, which is now obsolete)</I><P>
<PRE>
Character.Think(string message, ...)
</PRE>
Displays the text MESSAGE as a thought above the specified character's head.
The text will remain on screen for a limited time, and the user may or may
not be able to click it away depending on the setting of "Player can't
skip speech text".<P>
How this function displays the text depends on a few things: the Speech Style
setting, the 'Thought uses bubble GUI' setting, and whether the character has a thinking
animation or not.<P>
If the "Thought uses bubble GUI" setting is not checked, then the thought will be displayed
in the same way as normal speech - the difference being that the character's thinking animation
will play (or no animation if they don't have one).<P>
If you are using Sierra-style speech and the character doesn't have a thinking animation,
the thought bubble will be displayed in lucasarts-style.<P>
If the "Thought uses bubble GUI" setting has been set, then the thought will be displayed
like normal speech, except that the bubble GUI will be used for the window background.
In Lucasarts-style speech this means above the character's head, in Sierra-style it will
be done along the top of the screen as normal.<P>
If the character has a thinking animation, it will just loop through once (it won't repeat).<P>
You can insert the value of variables into the message. For more information,
see the <A HREF="ags36.htm#StringFormats">string formatting</A> section.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Think("I wonder what's for dinner.");
</PRE>
will display the message above EGO's head and play the character's thinking animation.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlinkWhileThinking">Character.BlinkWhileThinking</A>,
<A HREF="ags49.htm#Character.Say">Character.Say</A>,
<A HREF="ags49.htm#Character.ThinkView">Character.ThinkView</A>,
<A HREF="ags41.htm#Gamevariables">game.speech_bubble_width</A><P>


<HR>
<A NAME="Character.Tint"></A>
<H3>Tint (character)</H3>
<PRE>
Character.Tint(int red, int green, int blue,
               int saturation, int luminance)
</PRE>
Tints the character on the screen to (RED, GREEN, BLUE) with SATURATION percent
saturation.<P>
This function applies a tint to a specific character. For the meaning of all the parameters,
see <A HREF="ags56.htm#SetAmbientTint">SetAmbientTint</A>.<P>
The tint set by this function overrides any ambient tint set for the room. For this
reason, passing the SATURATION as 0 to this function does not turn it off - rather, it
ensures that no tint is applied to the character (even if an ambient tint is set).<P>
To remove the tint set by this function and return to using the ambient tint for this
character, call <A HREF="ags49.htm#Character.RemoveTint">RemoveTint</A>.<P>
<B>NOTE:</B> This function only works in hi-colour games and with hi-colour sprites.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Tint(0, 250, 0, 30, 100);
</PRE>
will tint the EGO character green.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.HasExplicitTint">Character.HasExplicitTint</A>,
<A HREF="ags49.htm#Character.RemoveTint">Character.RemoveTint</A>,
<A HREF="ags56.htm#SetAmbientTint">SetAmbientTint</A><P>


<HR>
<A NAME="Character.UnlockView"></A>
<H3>UnlockView</H3>
<I>(Formerly known as ReleaseCharacterView, which is now obsolete)</I><P>
<PRE>
Character.UnlockView()
</PRE>
Allows the engine to automatically control the character's view, as normal.
Use this once you have finished doing the animation which you started with
the LockView command.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.LockView(12);
cEgo.Animate(0, 0, eOnce, eBlock, eForwards);
cEgo.UnlockView();
</PRE>
will play an animation using loop 0 of view 12, then return the character to its normal view.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.LockView">Character.LockView</A><P>
<P>

<HR>
<A NAME="Character.Walk"></A>
<H3>Walk</H3>
<I>(Formerly known as MoveCharacter, which is now obsolete)</I><br> 
<I>(Formerly known as MoveCharacterBlocking, which is now obsolete)</I><br> 
<I>(Formerly known as MoveCharacterDirect, which is now obsolete)</I><P>
<PRE>
Character.Walk(int x, int y, optional BlockingStyle,
                             optional WalkWhere);
</PRE>
Starts the character moving from its current location to (X,Y), whilst playing
his walking animation.<P>
If <I>blocking</I> is eNoBlock (the default) then control returns to the script immediately, and
the character will move in the background.<P>
If <I>blocking</I> is eBlock then this command will wait for the character
to finish moving before your script resumes.<P>
If <I>walkWhere</I> is eWalkableAreas (the default), then the character will attempt to
get as close a possible to (X,Y) by using the room's walkable areas.<P>
If <I>walkWhere</I> is eAnywhere, then the character will simply walk directly from its
current location to (X,Y), ignoring the room walkable areas.<P>
If you don't want the character's walking animation to play, you can use the
<A HREF="ags49.htm#Character.Move">Move</A> command instead.<P>
<B>NOTE:</B> this function only works with characters which are on the current screen.<P>
<B>NOTE:</B> if you need to find out when the character has reached its destination,
use the <A HREF="ags49.htm#Character.Moving">Moving</A> property.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Walk(155, 122, eBlock);
</PRE>
will make the character walk to 155,122. The script will not continue until the
character has reached his destination.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AddWaypoint">Character.AddWaypoint</A>,
<A HREF="ags49.htm#Character.FaceCharacter">Character.FaceCharacter</A>,
<A HREF="ags49.htm#Character.Move">Character.Move</A>,
<A HREF="ags56.htm#MoveCharacterToObject">MoveCharacterToObject</A>,
<A HREF="ags70.htm#Object.Move">Object.Move</A>,
<A HREF="ags49.htm#Character.StopMoving">Character.StopMoving</A><P>


<HR>
<A NAME="Character.WalkStraight"></A>
<H3>WalkStraight</H3>
<I>(Formerly known as MoveCharacterStraight, which is now obsolete)</I><P>
<PRE>
Character.WalkStraight(int x, int y, optional BlockingStyle);
</PRE>
Moves the character from its current location towards (X,Y) in a straight
line as far as is possible before hitting a non-walkable area. This is
useful for use with the arrow keys for character movement, since it
guarantees that the character will move in a straight line in the direction
specified.<P>
<I>blocking</I> determines whether the function waits for the character to finish moving
before your script resumes. eNoBlock is the default (which means your script
resumes straight away, and the character moves in the background). You can also pass
eBlock, in which case your script will not resume until the character finishes moving.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.WalkStraight(166, 78);
</PRE>
will move the character EGO in a straight line towards co ordinates 166,78 until he
hits a non walkable area.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Walk">Character.Walk</A><P>


<HR>
<A NAME="Character.ActiveInventory"></A>
<H3>ActiveInventory property</H3>
<I>(Formerly known as SetActiveInventory, which is now obsolete)</I> <br> 
<I>(Formerly known as character[].activeinv, which is now obsolete)</I><P>
<PRE>
InventoryItem* Character.ActiveInventory
</PRE>
Gets/sets the character's current active inventory item.
Setting it will update the mouse cursor if appropriate.<P>
This property is useful in "Use inventory on hotspot/character/etc" events, to
find out which inventory item the player is trying to use on the target.<P>
To deselect the current inventory, set it to <I>null</I>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ActiveInventory = iKey;
</PRE>
will make the inventory item iKey active (before you use it make sure that the player
has the inventory item)<P>


<HR>
<A NAME="Character.Animating"></A>
<H3>Animating property (character)</H3>
<I>(Formerly known as character[].animating, which is now obsolete)</I><P>
<PRE>
readonly bool Character.Animating
</PRE>
Returns 1 if the character is currently animating. <br> 
Returns 0 if the character has finished its animation.<P>
This property is read-only. To change character animation, use the
<A HREF="ags49.htm#Character.Animate">Animate</A> command.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Animate(5, 0);
while (cEgo.Animating) Wait(1);
</PRE>
will animate EGO and wait until the animation finishes.<P>
In reality, you would simply use the Blocking parameter of Animate so you wouldn't need
to do this.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Animate">Character.Animate</A>,
<A HREF="ags49.htm#Character.Moving">Character.Moving</A>,
<A HREF="ags49.htm#Character.Speaking">Character.Speaking</A><P>


<HR>
<A NAME="Character.AnimationSpeed"></A>
<H3>AnimationSpeed property</H3>
<I>(Formerly known as character[].animspeed, which is now obsolete)</I><P>
<PRE>
int Character.AnimationSpeed;
</PRE>
Gets/sets the character's animation delay, as set in the editor.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.AnimationSpeed = 4;
</PRE>
will change the player character's animation speed to 4.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SetWalkSpeed">Character.SetWalkSpeed</A>,
<A HREF="ags49.htm#Character.SpeechAnimationDelay">Character.SpeechAnimationDelay</A><P>


<HR>
<A NAME="Character.Baseline"></A>
<H3>Baseline property (character)</H3>
<I>(Formerly known as SetCharacterBaseline, which is now obsolete)</I><P>
<PRE>
int Character.Baseline
</PRE>
Gets/sets the character's baseline. This allows you to set a specific
base line for the character, which works similarly to walk-behind area and
object baselines.<P>
The baseline can be from 1 to the height of the room (normally 200), or set it
to 0 to go back to using the character's feet as the baseline.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Baseline = 120;
</PRE>
will move the character's baseline (which can be used for testing collisions,
or for walk-behinds) to a line positioned at y coordinate = 120.<P>
<I>See Also:</I> <A HREF="ags70.htm#Object.Baseline">Object.Baseline</A>, <A HREF="ags75.htm#SetWalkBehindBase">SetWalkBehindBase</A><P>
<P>

<HR>
<A NAME="Character.BlinkInterval"></A>
<H3>BlinkInterval property</H3>
<I>(Formerly part of SetCharacterBlinkView, which is now obsolete)</I><P>
<PRE>
int Character.BlinkInterval
</PRE>
Gets/sets the character's blinking interval, which specifies how long the game waits
between playing the blinking animation. This is specified in game loops - an interval
of 80 would play the blinking animation about every 2 seconds.<P>
This property has no effect if no <A HREF="ags49.htm#Character.BlinkView">BlinkView</A> has been set.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.BlinkView = 10;
cEgo.BlinkInterval = 160;
</PRE>
will change the character EGO's blink view to view 10, and play the animation every 4 seconds.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlinkView">Character.BlinkView</A>,
<A HREF="ags49.htm#Character.SpeechView">Character.SpeechView</A><P>
<P>

<HR>
<A NAME="Character.BlinkView"></A>
<H3>BlinkView property</H3>
<I>(Formerly part of SetCharacterBlinkView, which is now obsolete)</I><P>
<PRE>
int Character.BlinkView
</PRE>
Gets/sets the character's blinking view. To stop the character from blinking, set
this to -1.<P>
The <A HREF="ags49.htm#Character.BlinkInterval">BlinkInterval</A> property sets how often the blinking
animation is played.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.BlinkView = 10;
cEgo.BlinkInterval = 160;
</PRE>
will change the character EGO's blink view to view 10, and play the animation every 4 seconds.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlinkInterval">Character.BlinkInterval</A>,
<A HREF="ags49.htm#Character.SpeechView">Character.SpeechView</A><P>


<HR>
<A NAME="Character.BlinkWhileThinking"></A>
<H3>BlinkWhileThinking property</H3>
<PRE>
bool Character.BlinkWhileThinking
</PRE>
Gets/sets whether the character can blink while thinking. By default this is set to true,
but if your blinking animation only goes with the talking animation and not the thinking
one, you can stop the character from blinking while Thinking by setting this to false.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.BlinkWhileThinking = false;
</PRE>
will stop EGO from blinking while his thinking animation is playing.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlinkView">Character.BlinkView</A>,
<A HREF="ags49.htm#Character.Think">Character.Think</A><P>


<HR>
<A NAME="Character.BlockingHeight"></A>
<H3>BlockingHeight property (character)</H3>
<PRE>
int Character.BlockingHeight
</PRE>
Gets/sets the character's blocking height.<P>
The blocking height determines how large of a blocking rectangle the character exerts to
stop other characters walking through it. If this is set to 0 (the default), then the
blocking rectangle is automatically calculated to be the character's width, and 5 pixels
high.<P>
You can manually change the setting by entering a blocking height in pixels, which is the
size of walkable area that the character effectively removes by standing on it.<P>
<B>NOTE:</B> This property has no effect unless the <A HREF="ags49.htm#Character.Solid">Solid</A> property
is set to <I>true</I>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.BlockingHeight = 20;
</PRE>
will make EGO block 20 pixels high (10 above and 10 below his baseline)<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlockingWidth">Character.BlockingWidth</A>,
<A HREF="ags49.htm#Character.Solid">Character.Solid</A><P>


<HR>
<A NAME="Character.BlockingWidth"></A>
<H3>BlockingWidth property (character)</H3>
<PRE>
int Character.BlockingWidth
</PRE>
Gets/sets the character's blocking width.<P>
The blocking width determines how large of a blocking rectangle the character exerts to
stop other characters walking through it. If this is set to 0 (the default), then the
blocking rectangle is automatically calculated to be the character's width, and 5 pixels
high.<P>
You can manually change the setting by entering a blocking width in pixels, which is the
size of walkable area that the character effectively removes by standing on it.<P>
<B>NOTE:</B> This property has no effect unless the <A HREF="ags49.htm#Character.Solid">Solid</A> property
is set to <I>true</I>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.BlockingWidth = 50;
</PRE>
will make EGO block 50 pixels wide (25 pixels to the left of his X co-ordinate, and 25 to the right)<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlockingHeight">Character.BlockingHeight</A>,
<A HREF="ags49.htm#Character.Solid">Character.Solid</A><P>


<HR>
<A NAME="Character.Clickable"></A>
<H3>Clickable property (character)</H3>
<I>(Formerly known as SetCharacterClickable, which is now obsolete)</I><P>
<PRE>
bool Character.Clickable
</PRE>
Gets/sets whether the character is recognised as something which the
player can interact with. This allows you to modify the "Clickable"
property set initially in the Editor.<P>
If you set this to <I>true</I> then the player can look at, speak to, and so on
the character (as with the old Sierra games). If you set this to <I>false</I>, then
if the player clicks on the character it will activate whatever is behind
them (as with the old Lucasarts games).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cMan.Clickable = 0;
</PRE>
will make the game ignore clicks on the character MAN.<P>
<I>See Also:</I> <A HREF="ags70.htm#Object.Clickable">Object.Clickable</A><P>


<HR>
<A NAME="Character.DiagonalLoops"></A>
<H3>DiagonalLoops property</H3>
<I>(Formerly part of SetCharacterProperty, which is now obsolete)</I><P>
<PRE>
bool Character.DiagonalLoops
</PRE>
Gets/sets whether diagonal walking loops are used for the character. If this is set
to <I>true</I>, then loops 4-7 will be used as diagonal walking loops. If this is set to
<I>false</I>, then the character will only face in 4 directions and you can use
loops 4-7 for other purposes.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.DiagonalLoops = true;
</PRE>
will enable diagonal walking loops for character EGO.<P>


<HR>
<A NAME="Character.Frame"></A>
<H3>Frame property (character)</H3>
<I>(Formerly known as character[].frame, which is now obsolete)</I><P>
<PRE>
int Character.Frame
</PRE>
Gets/sets the character's current frame number. Usually you won't change this
directly, but will use the Animate command to play an animation.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO currently using frame %d.", cEgo.Frame);
</PRE>
displays EGO's current frame number within his view.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.Animate">Character.Animate</A>,
<A HREF="ags49.htm#Character.Loop">Character.Loop</A>,
<A HREF="ags49.htm#Character.View">Character.View</A><P>


<HR>
<A NAME="Character.HasExplicitTint"></A>
<H3>HasExplicitTint property</H3>
<PRE>
readonly bool Character.HasExplicitTint
</PRE>
Returns <I>true</I> if the character has a tint set explicitly with the 
<A HREF="ags49.htm#Character.Tint">Character.Tint</A> command.<P>
Returns <I>false</I> if the character has no explicit tint, but it may still be
tinted by <A HREF="ags56.htm#SetAmbientTint">SetAmbientTint</A> or a region tint.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (player.HasExplicitTint)
{
  player.RemoveTint();
}
</PRE>
removes the player's tint if it currently has one.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.0</B> and later versions.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.Tint">Character.Tint</A>,
<A HREF="ags49.htm#Character.RemoveTint">Character.RemoveTint</A><P>


<HR>
<A NAME="Character.ID"></A>
<H3>ID property (character)</H3>
<PRE>
readonly int Character.ID
</PRE>
Gets the character's ID number. This is the character's number from the editor, and is
useful if you need to interoperate with legacy code that uses the character's number
rather than name.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
MoveCharacter(cEgo.ID, 100, 50);
</PRE>
uses the obsolete MoveCharacter function to move EGO to (100, 50)<P>


<HR>
<A NAME="Character.IdleView"></A>
<H3>IdleView property</H3>
<PRE>
readonly int Character.IdleView
</PRE>
Gets the character's current idle view. If the character doesn't have one, returns -1.<P>
This property is read-only; to change the view, use the <A HREF="ags49.htm#Character.SetIdleView">SetIdleView</A>
function.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO's idle view is currently view %d.", cEgo.IdleView);
</PRE>
will display EGO's current idle view number.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.SetIdleView">SetIdleView</A><P>


<HR>
<A NAME="Character.IgnoreLighting"></A>
<H3>IgnoreLighting property</H3>
<I>(Formerly known as SetCharacterIgnoreLight, which is now obsolete)</I><P>
<PRE>
bool Character.IgnoreLighting
</PRE>
Allows you to dynamically modify the "ignore lighting" checkbox for the
character. If this is set to 0, the character will be affected by region light
levels and tints; if this is set to 1, then the character will ignore all
region lighting.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.IgnoreLighting = 1;
</PRE>
will make the character look the same no matter if he stands on regions with
different light levels.<P>


<HR>
<A NAME="Character.IgnoreWalkbehinds"></A>
<H3>IgnoreWalkbehinds property (character)</H3>
<I>(Formerly known as SetCharacterIgnoreWalkbehinds, which is now obsolete)</I><P>
<PRE>
bool Character.IgnoreWalkbehinds
</PRE>
Gets/sets whether the character is affected by walkbehind areas. Passing <I>false</I>
(the default setting) means that the character will be placed behind walk-
behind areas according to the relevant baselines.<P>
Passing <I>true</I> means that the character will never be placed behind a walk-behind
area. This is useful if for example you want to use the character as an
overlay to display rain or snow onto a scene.<P>
<B>NOTE:</B> enabling this property does not currently work properly when using
the Direct3D driver. <P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.IgnoreWalkbehinds = true;
</PRE>
will make the character EGO ignore walk-behinds.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Baseline">Character.Baseline</A>,
<A HREF="ags70.htm#Object.IgnoreWalkbehinds">Object.IgnoreWalkbehinds</A><P>


<HR>
<A NAME="Character.InventoryQuantity"></A>
<H3>InventoryQuantity property</H3>
<I>(Formerly known as character[].inv, which is now obsolete)</I><P>
<PRE>
int Character.InventoryQuantity[]
</PRE>
Gets/sets the quantity of the specified inventory item that the character currently has.
The array index is the inventory item number, from the Inventory pane in the editor.<P>
Usually, you should use the AddInventory and LoseInventory functions to modify the
character's inventory; however, if you need to add or remove a large number of items
in one go, directly changing this array can be an easier method.<P>
If you change this array directly, the on-screen inventory will not be updated. In this
case, you must call UpdateInventory to see any new or removed items.<P>
If you just want to quickly check whether the character has a particular item or
not, use the <A HREF="ags49.htm#Character.HasInventory">HasInventory</A> function instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The player has $%d.", player.InventoryQuantity[iCash.ID]);
</PRE>
will display how many inventory items of type iCash the player has.<P>
<I>See Also:</I> <A HREF="ags56.htm#UpdateInventory">UpdateInventory</A>,
<A HREF="ags49.htm#Character.AddInventory">Character.AddInventory</A>,
<A HREF="ags49.htm#Character.HasInventory">Character.HasInventory</A>,
<A HREF="ags49.htm#Character.LoseInventory">Character.LoseInventory</A><P>


<HR>
<A NAME="Character.Loop"></A>
<H3>Loop property (character)</H3>
<I>(Formerly known as character[].loop, which is now obsolete)</I><P>
<PRE>
int Character.Loop
</PRE>
Gets/sets the character's current loop number. Usually you won't change this
directly, but will use the Animate command to play an animation.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO currently using loop %d.", cEgo.Loop);
</PRE>
displays EGO's current loop number within his view.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.Animate">Character.Animate</A>,
<A HREF="ags49.htm#Character.Frame">Character.Frame</A>,
<A HREF="ags49.htm#Character.View">Character.View</A><P>


<HR>
<A NAME="Character.ManualScaling"></A>
<H3>ManualScaling property (character)</H3>
<I>(Formerly known as Character.IgnoreScaling, which is now obsolete)</I> <br> 
<I>(Formerly part of SetCharacterProperty, which is now obsolete)</I><P>
<PRE>
bool Character.ManualScaling
</PRE>
Gets/sets whether the character's scaling level is determined by the walkable area that
he is walking on, or whether it is set manually by the script. This is equivalent
to the "Ignore room area scaling" checkbox in the editor.<P>
If this is set to <I>true</I>, then the character's scaling level is set manually by the
<A HREF="ags49.htm#Character.Scaling">Scaling</A> property (by default this is <TT>100%</TT>).
If it is set to <I>false</I>, then the character will be stretched or shrunk
automatically as appropriate on walkable areas.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ManualScaling = true;
cEgo.Scaling = 50;
</PRE>
will tell EGO to ignore walkable area scaling levels and be fixed to <TT>50%</TT> zoom level.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.Scaling">Character.Scaling</A><P>


<HR>
<A NAME="Character.MovementLinkedToAnimation"></A>
<H3>MovementLinkedToAnimation property</H3>
<PRE>
bool Character.MovementLinkedToAnimation
</PRE>
Gets/sets whether the character's movement is linked to their animation. By default
this is <I>true</I>, which means that when the character is walking their movement across
the screen will be kept in sync with their animation frame changing. Without this, the
character can appear to "glide" across the screen.<P>
In some special cases you may wish to turn this off though, and to do so you can set this
property to <I>false</I>.<P>
In previous versions of AGS, this setting was known as "Anti-glide mode" and was a game-wide
setting.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.MovementLinkedToAnimation = false;
player.Walk(50, 100, eBlock);
player.MovementLinkedToAnimation = true;
</PRE>
will turn off movement-linked animation for the player character, walk him to (50,100),
then turn it back on again.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.1</B> and later versions.<P>
<I>See Also:</I> 
<A HREF="ags49.htm#Character.Move">Character.Move</A>,
<A HREF="ags49.htm#Character.Moving">Character.Moving</A>,
<A HREF="ags49.htm#Character.Walk">Character.Walk</A><P>


<HR>
<A NAME="Character.Moving"></A>
<H3>Moving property (character)</H3>
<I>(Formerly known as character[].walking, which is now obsolete)</I><P>
<PRE>
readonly bool Character.Moving
</PRE>
Returns <I>true</I> if the character is currently moving, or <I>false</I> if not.<P>
This property is read-only; to change the character's movement, use the <A HREF="ags49.htm#Character.Walk">Walk</A>,
<A HREF="ags49.htm#Character.Move">Move</A> and <A HREF="ags49.htm#Character.StopMoving">StopMoving</A> commands.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Walk(125, 40);
while (cEgo.Moving) Wait(1);
</PRE>
will move EGO to 125,40 and return control to the player when he gets there.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Animating">Character.Animating</A>,
<A HREF="ags49.htm#Character.Move">Character.Move</A>,
<A HREF="ags49.htm#Character.Speaking">Character.Speaking</A>,
<A HREF="ags49.htm#Character.StopMoving">Character.StopMoving</A>,
<A HREF="ags49.htm#Character.Walk">Character.Walk</A><P>


<HR>
<A NAME="Character.Name"></A>
<H3>Name property (character)</H3>
<I>(Formerly known as character[].name, which is now obsolete)</I><P>
<PRE>
String Character.Name
</PRE>
Gets/sets the name of the character, as set in the AGS Editor. This is the full name,
not the script name.<P>
Note that character names are limited to 40 characters, so if you set the name it
will be truncated to that length.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("You are controlling %s.", player.Name);
</PRE>
will display the name of the player character<P>


<HR>
<A NAME="Character.NormalView"></A>
<H3>NormalView property</H3>
<I>(Formerly known as character[].defview, which is now obsolete)</I><P>
<PRE>
readonly int Character.NormalView
</PRE>
Gets the character's normal view. This is the character's standard walking view, that
is used when his view is not locked to something else.<P>
This property is read-only; to change it, use the <A HREF="ags49.htm#Character.ChangeView">ChangeView</A> command.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.View == cEgo.NormalView) {
  Display("EGO is not animating, not talking and not idle.");
}
</PRE>
will display a message if EGO is currently displayed using his normal view.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ChangeView">Character.ChangeView</A>,
<A HREF="ags49.htm#Character.View">Character.View</A><P>


<HR>
<A NAME="Character.PreviousRoom"></A>
<H3>PreviousRoom property</H3>
<I>(Formerly known as character[].prevroom, which is now obsolete)</I><P>
<PRE>
readonly int Character.PreviousRoom
</PRE>
Gets the room number that the character was previously in. If the character is still
in the room that they started in, this will be -1. Otherwise, it will be the room number
of the room that they were last in.<P>
This is a read-only property. It is set automatically by <A HREF="ags49.htm#Character.ChangeRoom">ChangeRoom</A>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO's previous room was %d.", cEgo.PreviousRoom);
</PRE>
will display the EGO character's previous room.<P>


<HR>
<A NAME="Character.Room"></A>
<H3>Room property</H3>
<I>(Formerly known as character[].room, which is now obsolete)</I><P>
<PRE>
readonly int Character.Room
</PRE>
Gets the room number that the character is currently in.<P>
This is a read-only property. It is set by <A HREF="ags49.htm#Character.ChangeRoom">ChangeRoom</A>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO is in room %d.", cEgo.Room);
</PRE>
will display the EGO character's current room.<P>


<HR>
<A NAME="Character.ScaleMoveSpeed"></A>
<H3>ScaleMoveSpeed property</H3>
<I>(Formerly part of SetCharacterProperty, which is now obsolete)</I><P>
<PRE>
bool Character.ScaleMoveSpeed
</PRE>
Gets/sets whether the character's movement speed is adjusted in line with his
current scaling level. This allows you to modify the "Adjust speed with scaling" option
from the editor.<P>
If you set this to <I>true</I>, the character's movement speed will be adjusted so that he walks
at a speed relative to his current scaling level. If you set this to <I>false</I>, the character
will always just move at his normal speed.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ScaleMoveSpeed = true;
</PRE>
will mean that EGO's speed is adjusted in line with his scaling<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ScaleVolume">Character.ScaleVolume</A><P>


<HR>
<A NAME="Character.ScaleVolume"></A>
<H3>ScaleVolume property</H3>
<PRE>
bool Character.ScaleVolume
</PRE>
Gets/sets whether the character's volume is adjusted in line with his
current scaling level. This allows you to modify the "Adjust volume with scaling" option
from the editor.<P>
By default, this is <I>false</I>. If you set it to <I>true</I>, then any frame-linked
sounds for the character (for example, footstep sounds) will have their volume
automatically adjusted in line with the character's scaling level. At the normal <TT>100%</TT>
zoom level the sounds will be played at normal volume, but will then get quieter
and louder as appropriate in scaled walkable areas.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ScaleVolume = true;
</PRE>
will mean that EGO's footstep sounds are adjusted in line with his scaling<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ScaleMoveSpeed">Character.ScaleMoveSpeed</A><P>


<HR>
<A NAME="Character.Scaling"></A>
<H3>Scaling property (character)</H3>
<PRE>
int Character.Scaling
</PRE>
Gets/sets the character's current scaling level.<P>
This property can always be read, and returns the character's current zoom level, which
will be between 5 and 200 (the default being 100 if they are not currently scaled).<P>
You can only set the value of this property if <A HREF="ags49.htm#Character.ManualScaling">ManualScaling</A>
is enabled for the character; otherwise, the scaling is determined automatically based on
the walkable area that the character is on.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ManualScaling = true;
cEgo.Scaling = 50;
</PRE>
will tell EGO to ignore walkable area scaling levels and be fixed to <TT>50%</TT> zoom level.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.ManualScaling">Character.ManualScaling</A><P>


<HR>
<A NAME="Character.Solid"></A>
<H3>Solid property (character)</H3>
<I>(Formerly part of SetCharacterProperty, which is now obsolete)</I><P>
<PRE>
bool Character.Solid
</PRE>
Gets/sets whether the character can be walked through by other characters.<P>
If this is set to <I>true</I>, then the character is solid and will block the path of other
characters. If this is set to <I>false</I>, then the character acts like a hologram, and other
characters can walk straight through him.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.Solid = true;
</PRE>
will mean that EGO blocks the path other characters.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.BlockingHeight">Character.BlockingHeight</A>,
<A HREF="ags49.htm#Character.BlockingWidth">Character.BlockingWidth</A><P>


<HR>
<A NAME="Character.Speaking"></A>
<H3>Speaking property</H3>
<PRE>
readonly bool Character.Speaking
</PRE>
Returns true if the character is currently talking, or false if not.<P>
This property is read-only. It will <B>only</B> return true for the active talking character;
that is, it will not return true for any characters talking with the SayBackground command.<P>
Since this property will only be true while the character is speaking, and speaking is
a blocking command, this property will probably only be useful to access from
the repeatedly_execute_always handler.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if ((cEgo.Speaking) && (!cEgo.Animating)) {
  cEgo.Animate(3, 5, eRepeat, eNoBlock);
}
</PRE>
will animate the character using loop 3 while they are talking (only useful with Sierra-style speech).<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Animating">Character.Animating</A>,
<A HREF="ags49.htm#Character.Moving">Character.Moving</A>,
<A HREF="ags49.htm#Character.Say">Character.Say</A>,
<A HREF="ags49.htm#Character.SpeakingFrame">Character.SpeakingFrame</A><P>


<HR>
<A NAME="Character.SpeakingFrame"></A>
<H3>SpeakingFrame property</H3>
<PRE>
readonly int Character.SpeakingFrame
</PRE>
Returns the current frame number of the character's talking animation. This is
useful when using Sierra-style speech, if you want to synchronize events with the
progress of the close-up face talking animation.<P>
This property is read-only. It is only accessible while the character is speaking;
if you attempt to call it when <A HREF="ags49.htm#Character.Speaking">Character.Speaking</A> is
<I>false</I> then it will raise an error.<P>
Since speaking is a blocking command, this property will probably only be useful 
access from the repeatedly_execute_always handler.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (cEgo.Speaking) {
  if (cEgo.SpeakingFrame == 0) {
    cMan.Move(cMan.x + 10, cMan.y, eNoBlock, eAnywhere);
  }
}
</PRE>
will move cMan to the right every time the talking animation loops back to Frame 0. <P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Say">Character.Say</A>,
<A HREF="ags49.htm#Character.Speaking">Character.Speaking</A><P>


<HR>
<A NAME="Character.SpeechAnimationDelay"></A>
<H3>SpeechAnimationDelay property</H3>
<PRE>
int Character.SpeechAnimationDelay;
</PRE>
Gets/sets the character's speech animation delay, as set in the editor. This specifies
how many game loops each frame of the character's speech animation is shown for.<P>
<B>NOTE:</B> This property is ignored if lip sync is enabled.<P>
<B>NOTE:</B> This property <B>cannot</B> be used if the Speech.UseGlobalSpeechAnimationDelay is set to <B>true</B>. In that case, the Speech.GlobalSpeechAnimationDelay property value is used instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
player.SpeechAnimationDelay = 4;
</PRE>
will change the player character's speech animation speed to 4.<P>
<I>Compatibility:</I> Supported by <B>AGS 3.1.2</B> and later versions.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.AnimationSpeed">Character.AnimationSpeed</A>,
<A HREF="ags49.htm#Character.SpeechView">Character.SpeechView</A>,
<A HREF="ags56.htm#Game.TextReadingSpeed">Game.TextReadingSpeed</A>,
<A HREF="ags77.htm#Speech.GlobalSpeechAnimationDelay">Speech.GlobalSpeechAnimationDelay</A>,
<A HREF="ags77.htm#Speech.UseGlobalSpeechAnimationDelay">Speech.UseGlobalSpeechAnimationDelay</A>,<P>


<HR>
<A NAME="Character.SpeechColor"></A>
<H3>SpeechColor property</H3>
<I>(Formerly known as SetTalkingColor, which is now obsolete)</I><P>
<PRE>
int Character.SpeechColor
</PRE>
Gets/sets the character's speech text color. This is set by default in the
editor.<P>
NEWCOLOR is the colour slot index from the Palette Editor. This can be 0-255 for
a 256-colour game, or one of the hi-colour indexes available from the Palette Editor.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.SpeechColor = 14;
</PRE>
will change the character's EGO talking color to yellow.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SpeechView">Character.SpeechView</A><P>


<HR>
<A NAME="Character.SpeechView"></A>
<H3>SpeechView property</H3>
<I>(Formerly known as SetCharacterSpeechView, which is now obsolete)</I><br> 
<I>(Formerly known as character[].talkview, which is now obsolete)</I><P>
<PRE>
int Character.SpeechView
</PRE>
Gets/sets the character's talking view. If you change it, the new view number will
be used as the character's talking view in all future conversations.<P>
You can set this to -1 to disable the character's speech view.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.SpeechView = 10;
</PRE>
will change the character EGO's speech view to view 10.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.ChangeView">Character.ChangeView</A>,
<A HREF="ags49.htm#Character.BlinkView">Character.BlinkView</A>,
<A HREF="ags49.htm#Character.SpeechAnimationDelay">Character.SpeechAnimationDelay</A>,
<A HREF="ags49.htm#Character.SpeechColor">Character.SpeechColor</A><P>


<HR>
<A NAME="Character.ThinkView"></A>
<H3>ThinkView property</H3>
<I>(Formerly known as character[].thinkview, which is now obsolete)</I><P>
<PRE>
int Character.ThinkView
</PRE>
Gets/sets the character's thinking view. This is used to animate the character
when a thought is being displayed.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.ThinkView = 14;
</PRE>
will change the character EGO's thinking view to 14.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.Think">Character.Think</A><P>


<HR>
<A NAME="Character.Transparency"></A>
<H3>Transparency property (character)</H3>
<I>(Formerly known as SetCharacterTransparency, which is now obsolete)</I><P>
<PRE>
int Character.Transparency
</PRE>
Gets/sets the character's transparency. This is specified as a percentage, from 0 to 100.
100 means fully transparent (ie. invisible), and 0 is totally opaque (fully visible). Numbers
in between represent varying levels of transparency.<P>
<B>NOTE:</B> Transparency only works in 16-bit and 32-bit colour games.<P>
<B>NOTE:</B> When using the DirectX 5 driver, a large transparent character can significantly slow
down AGS.<P>
Some rounding is done internally when the transparency is stored -- therefore, if you get
the transparency after setting it, the value you get back might be one out. Therefore, using
a loop with <TT>cEgo.Transparency++;</TT> is not recommended as it will probably
end too quickly.<P>
In order to fade a character in, the best approach is shown in the example below:<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int trans = cEgo.Transparency;
while (trans &lt; 100) {
  trans++;
  cEgo.Transparency = trans;
  Wait(1);
}
</PRE>
will gradually fade out the character from its current transparency level to being fully
invisible.<P>
<I>See Also:</I> <A HREF="ags70.htm#Object.Transparency">Object.Transparency</A><P>


<HR>
<A NAME="Character.TurnBeforeWalking"></A>
<H3>TurnBeforeWalking property</H3>
<I>(Formerly part of SetCharacterProperty, which is now obsolete)</I><P>
<PRE>
bool Character.TurnBeforeWalking
</PRE>
Gets/sets whether the character turns to face his new direction before walking. This
is equivalent (though opposite) to the editor "Do not turn before walking" tick-box.<P>
If you set this to 1, the character will turn on the spot to face his new direction
before setting off on a walk. If you set this to 0, the character will instantly face
in the correct direction and start walking.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
cEgo.TurnBeforeWalking = 1;
</PRE>
will tell EGO to turn to face his new direction before setting off, whenever he walks.<P>


<HR>
<A NAME="Character.View"></A>
<H3>View property (character)</H3>
<PRE>
readonly int Character.View
</PRE>
Gets the view that the character is currently displayed using.<P>
This property is read-only; to change the view, use the ChangeView and LockView functions.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("EGO's view is currently view %d.", cEgo.View);
</PRE>
will display EGO's current view number.<P>
<I>SeeAlso:</I> <A HREF="ags49.htm#Character.ChangeView">Character.ChangeView</A>,
<A HREF="ags49.htm#Character.Frame">Character.Frame</A>,
<A HREF="ags49.htm#Character.LockView">Character.LockView</A>,
<A HREF="ags49.htm#Character.Loop">Character.Loop</A>,
<A HREF="ags49.htm#Character.NormalView">Character.NormalView</A><P>


<HR>
<A NAME="Character.WalkSpeedX"></A>
<H3>WalkSpeedX property</H3>
<PRE>
readonly int Character.WalkSpeedX;
</PRE>
Gets the character's walking speed in the X direction. If using uniform movement,
this will be the same as the Y walking speed.<P>
This property is read-only. To change the walking speed, use the SetWalkSpeed function.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("player's x speed: %d", player.WalkSpeedX);
</PRE>
will display the player's X speed.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SetWalkSpeed">Character.SetWalkSpeed</A>,
<A HREF="ags49.htm#Character.WalkSpeedY">Character.WalkSpeedY</A><P>


<HR>
<A NAME="Character.WalkSpeedY"></A>
<H3>WalkSpeedY property</H3>
<PRE>
readonly int Character.WalkSpeedY;
</PRE>
Gets the character's walking speed in the Y direction. If using uniform movement,
this will be the same as the X walking speed.<P>
This property is read-only. To change the walking speed, use the SetWalkSpeed function.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("player's y speed: %d", player.WalkSpeedY);
</PRE>
will display the player's Y speed.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.SetWalkSpeed">Character.SetWalkSpeed</A>,
<A HREF="ags49.htm#Character.WalkSpeedX">Character.WalkSpeedX</A><P>


<HR>
<A NAME="Character.x"></A>
<H3>x property (character)</H3>
<PRE>
int Character.x;
</PRE>
Gets/sets the character's current X co-ordinate. This is expressed in normal room
co-ordinates, and specifies the centre-bottom of the character's sprite.<P>
<B>NOTE:</B> Do <B>NOT</B> change this property while the character is moving. Make
sure the character is standing still before changing his co-ordinates.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The player is at %d,%d.", player.x, player.y);
</PRE>
displays the player character's current coordinates.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.y">Character.y</A>,
<A HREF="ags49.htm#Character.z">Character.z</A><P>


<HR>
<A NAME="Character.y"></A>
<H3>y property (character)</H3>
<PRE>
int Character.y;
</PRE>
Gets/sets the character's current Y co-ordinate. This is expressed in normal room
co-ordinates, and specifies the centre-bottom of the character's sprite.<P>
<B>NOTE:</B> Do <B>NOT</B> change this property while the character is moving. Make
sure the character is standing still before changing his co-ordinates.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("The player is at %d,%d.", player.x, player.y);
</PRE>
displays the player character's current coordinates.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.x">Character.x</A>,
<A HREF="ags49.htm#Character.z">Character.z</A><P>


<HR>
<A NAME="Character.z"></A>
<H3>z property (character)</H3>
<PRE>
int Character.z;
</PRE>
Gets/sets the character's current Z position. This allows the character to levitate
off the ground, whilst still retaining its normal Y co-ordinate for baseline calculations
and regions.<P>
Normally this is set to 0 (ground-level), but you can increase it to make the character float.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
while (player.z &lt; 20) {
  player.z++;
  Wait(1);
}
</PRE>
gradually levitates the character up to 20 pixels.<P>
<I>See Also:</I> <A HREF="ags49.htm#Character.x">Character.x</A>,
<A HREF="ags49.htm#Character.y">Character.y</A><P>


<HR>
<A NAME="SetCharacterProperty"></A>
<H3>SetCharacterProperty</H3>
<PRE>
SetCharacterProperty (CHARID, PROPERTY, int new_value)
</PRE>
<B>This command is now obsolete. It has been replaced by the following properties:</B><P>
<A HREF="ags49.htm#Character.Clickable">Clickable</A> <br> 
<A HREF="ags49.htm#Character.DiagonalLoops">DiagonalLoops</A> <br> 
<A HREF="ags49.htm#Character.IgnoreLighting">IgnoreLighting</A> <br> 
<A HREF="ags49.htm#Character.ManualScaling">ManualScaling</A> <br> 
<A HREF="ags49.htm#Character.ScaleMoveSpeed">ScaleMoveSpeed</A> <br> 
<A HREF="ags49.htm#Character.Solid">Solid</A> <br> 
<A HREF="ags49.htm#Character.TurnBeforeWalking">TurnBeforeWalking</A><P>
<P>

</BODY></HTML>
