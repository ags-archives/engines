//===================================================================
// *** AGS ROOM SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Room:    Factory Entrance
//              
// Author:  Unknown (unknown)
//          Rick Jafrate (RickJ)    
//
// Abstract
// This  room  is  the entrance to the the AGS Games Factory, a place
// where you can learn something about making games with AGS. 
// 
// Description
// Talk  to  Roger  to get a brief explanation of each section of the
// factory.  Buy a plastic cup to get a couple of points. Explore the
// factory by going through any of the doors.
//
// Scipting Hint - V2.7 Scripting
// The DemoQuest II script  has been converted to the AGS V2.7 script
// language to get the script in this room.  Very few, if any,  other  
// changes have been made.
//
// Revision History
// 05-Mar-15 RickJ,        update for AGS 2.7
// yy-mm-ss  unknown,		original version
// 
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Constant Definitions
//-------------------------------------------------------------------


//===================================================================
// Static Variable Definitions
//-------------------------------------------------------------------
int	GotCup=0;
int	RogerIdle=0;



//===================================================================
// Utility Functions
//-------------------------------------------------------------------


//===================================================================
// Application Functions
//-------------------------------------------------------------------


//===================================================================
// Room - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart room_a  // DO NOT EDIT OR REMOVE THIS LINE
function room_a() {
	// script for room: WALK OFF BOTTOM
	player.ChangeRoom(crmBrokenCurbStreet,235,100);  
}
#sectionend room_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {  // script for room: PLAYER ENTERS SCREEN

	// Make sure graffiti is visible
	oGraffiti.IgnoreWalkbehinds = true;
	
	// This plays the music for the room, you can't play WAV music using PlayMusic()
	Game.StopAudio(eAudioTypeMusic);
  aInterlude.Play(eAudioPriorityNormal, eRepeat);

//	SetDialogOption(0,8,1);  // turn on topic about going beyond the door
	if (GetGlobalInt(gixSpeakToRoger)==0) RemoveWalkableArea(2);		// if you didn't talk to Roger, door not open
	if (GetGlobalInt(gixOpenCircularDoor)==0) RemoveWalkableArea(5);	// if you didn't talk to Roger, door not open

	// Help GUI 
	gHelpTitle.Text = "Factory Entrance";
	gHelpDescription.Text = "Animated backgrounds, Text scripting to create a scene in which characters walk around and talk. DisplaySpeech, MoveCharacter";
	gHelpReference.Text = "Manual Reference:[Animating background scenes, Scripting. Scripting Tutorial";
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_c  // DO NOT EDIT OR REMOVE THIS LINE
function room_c() {
	// script for room: REPEATEDLY EXECUTE

	if(RogerIdle<0) {
		cRoger.Animate(4,2,eOnce);
		cRoger.FaceLocation(160,1000);
		RogerIdle = (Random((GetGameSpeed()*60))+(GetGameSpeed()*30));
	}
	else RogerIdle--;
  
	if (GetGlobalInt(gixSpeakToRoger)==1) {  // this is triggered from Roger's interaction script

		// Desk
		player.Walk(hDesk.WalkToX,hDesk.WalkToY,eNoBlock);
		player.FaceCharacter(cRoger,eNoBlock);
		player.Say("Hello.");
		cRoger.Say("Welcome to the AGS Games Factory!");
		cRoger.Say("I'm your tour guide, Roger.");
		cRoger.Say("Anyway, let me give you the tour.");
		player.Walk(140,146,eNoBlock);
		cRoger.Walk(115,133);
		Wait(80);

		//-------------------------------------------------------------
		// Why do both of the characters walk at the same time? Because
		// MoveCharacter is  a non-blocking command. It only starts the 
		// guy moving toward the x,y  position. The next command starts
		// immediately. That's why I added the Wait(80) there.  That is 
		// a  blocking  command  that  will wait for 80 cycles (about 2 
		// seconds)  before  the  rest  of this  script  continues.  By 
		// contrast,  MoveCharacterToHotspot,  which  I use later, IS a 
		// blocking command. So the script won't continue until the guy 
		// finishes   walking.  Display   and  DisplaySpeech  are  also 
		// blocking, obviously, since  the  game pauses while a Display 
		// box is on the screen.  When making a scripted  sequence, pay 
		// attention to which commands are and aren't blocking.
		//-------------------------------------------------------------

		// Basic Features
		cRoger.Say("Let me open this for you.");
		RestoreWalkableArea(2);
		aBlipBlipBlip.Play();
		oDoor.Move(90,66,1,eBlock,eAnywhere);
		Wait(60);
		oDoor.Visible = false;
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("This is the Basic Features area.");
		cRoger.Say("If you're new here, go to this area first.");
		Display("Through this door you will find rooms that demonstrate the basic features of rooms and game settings. You know, all the stuff that you need to make a typical adventure game.");

		// Hall of GUIs
		cRoger.Walk(hHallway.WalkToX,hHallway.WalkToY,eBlock);
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("This is the fabulous hall of GUIs, or Graphical User Interfaces.");
		Display("The Hall of GUIs demonstrates how to create new kinds of interfaces, including Lucasarts-type interfaces, parser interfaces and more.");
		Display("It also shows you how to make custom game controls and windows."); 

		// Miscellaneous Area
		cRoger.Walk(hSmallDoor.WalkToX,hSmallDoor.WalkToY,eBlock);
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("This small door... uh.. um..");
		Display("I don't know what goes here. Anything we forgot, I guess.");

		// Advanved Area
		cRoger.Walk(260,145,eBlock);
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("Through the round portal, you will find the dangerous ADVANCED area.");
		cRoger.Say("It's locked for your safety.");
		Display("This one's for advanced users. It shows how to use complex text scripting to create things like combat systems, arcade games and so on.");
		Display("It also shows how to use some of the more advanced commands that hardly anybody can figure out.");

		// Media Hall
		cRoger.Walk(hMediaHall.WalkToX,hMediaHall.WalkToY,eBlock);
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("Finally, this passage leads to the Media Hall.");
		Display("In the Media hall you will learn how to use sounds, speech music, FLIC animations, and graphics of various resolutions and color depth in your game.");

		// Open Area 
		cRoger.Walk(187,131,eBlock);
		cRoger.FaceCharacter(player);
		player.FaceCharacter(cRoger);
		cRoger.Say("So please take a look around.");
		SetGlobalInt(10,2);
	}
}
#sectionend room_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_d  // DO NOT EDIT OR REMOVE THIS LINE
function room_d() {
	// script for room: ENTERS SCREEN AFTER FADEIN
	if (AgsTermRequired==AgsTermId[1]) {
		SetGlobalInt(gixOpenCircularDoor,true);
	}
	else {
		SetGlobalInt(gixOpenCircularDoor,false);
	}
	
	if (GetGlobalInt(gixOpenCircularDoor)) {
		RestoreWalkableArea(5);
		oRounddoorl.Move(227,127,1,eNoBlock,eAnywhere);
		oRounddoorr.Move(301,132,1,eBlock,eAnywhere);
		aBlipBlipBlip.Play();
		Wait(80);
		oRounddoorl.Visible = false;
		oRounddoorr.Visible = false;
	}
}
#sectionend room_d  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_e  // DO NOT EDIT OR REMOVE THIS LINE
function room_e() {
	// script for room: WALK OFF LEFT
	player.ChangeRoom(crmFactoryHallOfGuis,285,105);
}
#sectionend room_e  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_f  // DO NOT EDIT OR REMOVE THIS LINE
function room_f() {
	// script for room: First time player enters screen
	Display("This section of the demo game demonstrates various AGS features. It has been written by members of the AGS community, and is currently unfinished, so some areas do not work.");
	player.Say("You can save the game by pressing F5, or choosing the Save icon from the menu bar.");
}
#sectionend room_f  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Glass Tube - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot7_a() {
	// script for hotspot7: LOOK AT HOTSPOT
	Display("Some kind of green liquid flows through these tubes.");
	player.Say("It reminds me of the green slime I saw on the street outside.");
	player.Say("This might be a clue!");
	Display("Actually, it means nothing.");
}
#sectionend hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot7_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot7_b() {
	// script for hotspot7: INTERACT WITH HOTSPOT
	Display("You touch the glass. It feels cold.");
}
#sectionend hotspot7_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot9_a() {
	// script for hotspot9: LOOK AT HOTSPOT
	Display("The tubes run through these modules on the floor.");
	Display("This liquid must be some essential material used in the factory. Or it might just be some kitschy piece of decor, not unlike a lava lamp.");
}
#sectionend hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Doorway - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_a() {
	// script for hotspot1: LOOK AT HOTSPOT
	player.Walk(54,162,eBlock);
	Display("The sign above this hallway says 'The Hall of GUIs'");
	player.Say("I wonder what that means...");
}
#sectionend hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_a() {
	// script for hotspot8: LOOK AT HOTSPOT
	Display("The door leads off into darkness, promising exciting new adventures.");
}
#sectionend hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_b() {
	// script for hotspot8: INTERACT WITH HOTSPOT
	player.Walk(110,90);
	Display("Nothing in here, except you");
}
#sectionend hotspot8_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Desk - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart object0_a  // DO NOT EDIT OR REMOVE THIS LINE
function object0_a() {
	// script for object0: INTERACT WITH OBJECT
Display("Money=%d",player.InventoryQuantity[iMoney.ID]);
	if (GotCup) { // if you already got cup
		Display("You don't really want to buy another one.");
	}
	else {
		player.Walk(hDesk.WalkToX,hDesk.WalkToY);
		player.Say("Can I have one of these?");
		cRoger.Say("That costs 2 gold coins.");
		if (player.InventoryQuantity[iMoney.ID]<2) {  // if player doesn't have enough money
			Display("You can't afford it.");
		}
		else {
			Display("You give Roger two of your coins");
			player.InventoryQuantity[iMoney.ID] = player.InventoryQuantity[iMoney.ID]-2;
			UpdateInventory();
			oBluecups.Graphic = 108;
			player.AddInventory(iBlueCup);
			GiveScore(2);
			GotCup = 1;         //set flag, so you can't buy cup twice.
		}
	}
}
#sectionend object0_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot5_a() {
	// script for hotspot5: Look at hotspot
	Display("The reception desk has a merchandise display on the front.");
	Display("There's some authorized AGS merchandise, mostly blue plastic cups.");
}
#sectionend hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot6_a() {
	// script for hotspot6: Look at hotspot
	Display("The flashing neon sign reads 'AGS Games Factory'.");
}
#sectionend hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Circular Portal - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot10_a() {
	// script for hotspot10: CHARACTER STANDS ON HOTSPOT
	player.ChangeRoom(crmFactoryAdvanced,43,194);
}
#sectionend hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Panel - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_a() {
	// script for hotspot4: Interact with hotspot
	if (GetGlobalInt(gixOpenCircularDoor)==0) {
		AgsTermLocation = 1;
		AgsTermRequired = crmFactoryAdvanced;
		player.ChangeRoom(crmAgsTerminal);
	}
	else Display("You don't need to use the panel again.");
}
#sectionend hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot4_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_b() {
	// script for hotspot4: Look at hotspot
	if (GetGlobalInt(gixOpenCircularDoor)==false) {
		AgsTermLocation = 1;
		AgsTermRequired = crmFactoryAdvanced;
		player.ChangeRoom(crmAgsTerminal);
	}
	else Display("You don't need to use the panel again. %d",AgsTermId[1]);
}
#sectionend hotspot4_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Media Hall - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart region6_a  // DO NOT EDIT OR REMOVE THIS LINE
function region6_a() {
	// script for region6: Player walks onto region
	// Goto media hall
	player.ChangeRoom(crmFactoryMediaWing,10,165); 
}
#sectionend region6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_a() {
	// script for hotspot3: Look at hotspot - Media Hall
	Display("You can hear faint music coming from this passage.");
}
#sectionend hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Small Door - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot2_a() {
	// script for hotspot2: Look at hotspot
	Display("It's a small door.");
}
#sectionend hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot2_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot2_b() {
	// script for hotspot2: Interact hotspot
	Display("It's locked. I guess it's not ready yet.");
}
#sectionend hotspot2_b  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart object4_a  // DO NOT EDIT OR REMOVE THIS LINE
function object4_a() {
	// script for Object 4: Look at object
	player.SayBackground("Hmmm! Somebody has scribbled a number on the wall.  I wonder what it could mean?");
}
#sectionend object4_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_b() {
  // script for Hotspot 1 (hallway): Talk to hotspot
}
#sectionend hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE

function oBluecups_Look()
{
DisplayMessage(5);
}

function oHall_Look()
{
DisplayMessage(3);
}

function oHall_Interact()
{
DisplayMessage(1);
}

function oRounddoorl_Look()
{
DisplayMessage(3);
}

function oRounddoorl_Interact()
{
DisplayMessage(1);
}

function oRounddoorr_Look()
{
DisplayMessage(3);
}

function oRounddoorr_Interact()
{
DisplayMessage(1);
}

function region10_WalksOnto()
{
DisplayMessage(0);
}
