<HTML>
<head><title>DynamicSprite functions and properties</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic51"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags26.htm#topic42"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags39.htm#topic50"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags41.htm#topic52"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>DynamicSprite functions and properties</H2>

<A HREF="#DynamicSprite.CreateFromBackground">CreateFromBackground</A><BR>
<A HREF="#DynamicSprite.CreateFromExistingSprite">CreateFromExistingSprite</A><BR>
<A HREF="#DynamicSprite.CreateFromFile">CreateFromFile</A><BR>
<A HREF="#DynamicSprite.CreateFromSaveGame">CreateFromSaveGame</A><BR>
<A HREF="#DynamicSprite.CreateFromScreenShot">CreateFromScreenShot</A><BR>
<A HREF="#DynamicSprite.Crop">Crop (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Delete">Delete (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Flip">Flip (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Resize">Resize (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Rotate">Rotate (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.SaveToFile">SaveToFile (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.ColorDepth">ColorDepth property (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Graphic">Graphic property (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Height">Height property (dynamic sprite)</A><BR>
<A HREF="#DynamicSprite.Width">Width property (dynamic sprite)</A><BR>
<P>

<HR>
<A NAME="DynamicSprite.CreateFromBackground"></A>
<H3>CreateFromBackground</H3>
<PRE>
static DynamicSprite* DynamicSprite.CreateFromBackground
                      (optional int frame, optional int x, optional int y,
                       optional int width, optional int height)
</PRE>
Creates a new dynamic sprite containing a copy of the specified room background.<P>
The most basic use of this function is to supply no parameters, in which case
the sprite will contain an exact copy of the current room background.<P>
If you want, you can supply the <I>frame</I> only, in which case you will get a
complete copy of that background frame number from the current room.<P>
Optionally, you can specify a portion of the background to grab. You must
either supply all or none of the x, y, width and height parameters; if you
do supply them, this allows you to just get a small portion of the background
image into the new sprite. All co-ordinates are in 320x200-resolution room co-ordinates.<P>
Use the <A HREF="ags40.htm#DynamicSprite.Graphic">Graphic</A> property of the DynamicSprite to
interface with other commands and to use the new sprite in the game.<P>
<B>IMPORTANT:</B> This command loads an extra sprite into memory which is not controlled
by the normal AGS sprite cache and will not be automatically disposed of. Therefore, when
you are finished with the image you <B>MUST</B> call Delete on it to free its memory.<P>
<B>IMPORTANT:</B> If the DynamicSprite instance is released from memory (ie. there is
no longer a DynamicSprite* variable pointing to it), then the sprite will also be
removed from memory. Make sure that you keep a global variable pointer to the sprite
until you are finished with it, and at that point call Delete.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromBackground(GetBackgroundFrame(), 130, 70, 60, 60);
RawDrawImage(0, 0, sprite.Graphic);
sprite.Delete();
</PRE>
creates a copy of the centre 60x60 area on the background, and draws it onto the
top left corner of the background image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A><P>


<HR>
<A NAME="DynamicSprite.CreateFromExistingSprite"></A>
<H3>CreateFromExistingSprite</H3>
<PRE>
static DynamicSprite* DynamicSprite.CreateFromExistingSprite(int slot)
</PRE>
Creates a new dynamic sprite containing a copy of the specified sprite <I>slot</I>.<P>
Returns the DynamicSprite instance representing the new sprite. This function
is useful as it effectively allows you to apply transformations such as resizing to
any sprite in the game.<P>
Use the <A HREF="ags40.htm#DynamicSprite.Graphic">Graphic</A> property of the DynamicSprite to
interface with other commands and to use the new sprite in the game.<P>
<B>IMPORTANT:</B> This command loads an extra sprite into memory which is not controlled
by the normal AGS sprite cache and will not be automatically disposed of. Therefore, when
you are finished with the image you <B>MUST</B> call Delete on it to free its memory.<P>
<B>IMPORTANT:</B> If the DynamicSprite instance is released from memory (ie. there is
no longer a DynamicSprite* variable pointing to it), then the sprite will also be
removed from memory. Make sure that you keep a global variable pointer to the sprite
until you are finished with it, and at that point call Delete.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromExistingSprite(object[0].Graphic);
sprite.Resize(20, 20);
RawDrawImage(100, 80, sprite.Graphic);
sprite.Delete();
</PRE>
creates a copy of object 0's current sprite, resizes it down to 20x20, and then draws
the result onto the background.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A>, 
<A HREF="ags40.htm#DynamicSprite.Resize">DynamicSprite.Resize</A><P>


<HR>
<A NAME="DynamicSprite.CreateFromFile"></A>
<H3>CreateFromFile</H3>
<I>(Formerly known as LoadImageFile, which is now obsolete)</I><P>
<PRE>
static DynamicSprite* DynamicSprite.CreateFromFile(string filename)
</PRE>
Loads an external image FILENAME into memory as a sprite.<P>
Returns the DynamicSprite instance representing the sprite, or <I>null</I> if the image
could not be loaded (file not found or unsupported format).<P>
Only BMP and PCX files can be loaded with this command.<P>
Use the <A HREF="ags40.htm#DynamicSprite.Graphic">Graphic</A> property of the DynamicSprite to
interface with other commands and to use the new sprite in the game.<P>
<B>IMPORTANT:</B> This command loads an extra sprite into memory which is not controlled
by the normal AGS sprite cache and will not be automatically disposed of. Therefore, when
you are finished with the image you <B>MUST</B> call Delete on it to free its memory.<P>
<B>IMPORTANT:</B> If the DynamicSprite instance is released from memory (ie. there is
no longer a DynamicSprite* variable pointing to it), then the sprite will also be
removed from memory. Make sure that you keep a global variable pointer to the sprite
until you are finished with it, and at that point call Delete.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
if (sprite != null) {
  RawDrawImage(100, 80, sprite.Graphic);
  sprite.Delete();
}
</PRE>
will load the file "CustomAvatar.bmp" and if successful draw the image near the middle
of the screen.<P>
Once the image is finished with, Delete should be called on it.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A>, 
<A HREF="ags40.htm#DynamicSprite.CreateFromSaveGame">DynamicSprite.CreateFromSaveGame</A><P>


<HR>
<A NAME="DynamicSprite.CreateFromSaveGame"></A>
<H3>CreateFromSaveGame</H3>
<I>(Formerly known as LoadSaveSlotScreenshot, which is now obsolete)</I><P>
<PRE>
static DynamicSprite* DynamicSprite.CreateFromSaveGame
                        (int saveSlot, int width, int height)
</PRE>
Loads the screenshot for save game SAVESLOT into memory, resizing it to WIDTH x HEIGHT.<P>
Returns the DynamicSprite instance of the image if successful, or returns <I>null</I> if
the screenshot could not be loaded (perhaps the save game didn't include one).<P>
In order for this to work, the "Save screenshots in save games" option must be ticked
in the main Game Settings pane.<P>
<B>IMPORTANT:</B> This command loads an extra sprite into memory which is not controlled
by the normal AGS sprite cache and will not be automatically disposed of. Therefore, when
you are finished with the image you <B>MUST</B> call Delete on it to free its memory.<P>
<B>IMPORTANT:</B> If the DynamicSprite instance is released from memory (ie. there is
no longer a DynamicSprite* variable pointing to it), then the sprite will also be
removed from memory. Make sure that you keep a global variable pointer to the sprite
until you are finished with it, and at that point call Delete.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
// at top of script, outside interactions
DynamicSprite *buttonSprite;  

// inside an interaction
buttonSprite = DynamicSprite.CreateFromSaveGame(1, 50, 50);
if (buttonSprite != null) {
  btnScrnshot.NormalGraphic = buttonSprite.Graphic;
}
</PRE>
will load the screenshot for save game 1 and resize it to 50x50. It then places it onto
the btnScrnshot GUI button.<P>
Once the GUI is disposed of, Delete should be called on the sprite.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A>, 
<A HREF="ags42.htm#Game.GetSaveSlotDescription">Game.GetSaveSlotDescription</A>,
<A HREF="ags40.htm#DynamicSprite.CreateFromFile">DynamicSprite.CreateFromFile</A>,
<A HREF="ags40.htm#DynamicSprite.CreateFromScreenShot">DynamicSprite.CreateFromScreenShot</A><P>


<HR>
<A NAME="DynamicSprite.CreateFromScreenShot"></A>
<H3>CreateFromScreenShot</H3>
<PRE>
static DynamicSprite* DynamicSprite.CreateFromScreenShot
                        (optional int width, optional int height)
</PRE>
Creates a new DynamicSprite instance with a copy of the current screen in it,
resized to WIDTH x HEIGHT. If you do not supply the width or height, then a full screen
sized sprite will be created.<P>
This command can be useful if you're creating a save game screenshots GUI, in order to
display the current game position as well as the saved slot positions.<P>
<B>IMPORTANT:</B> This command loads an extra sprite into memory which is not controlled
by the normal AGS sprite cache and will not be automatically disposed of. Therefore, when
you are finished with the image you <B>MUST</B> call Delete on it to free its memory.<P>
<B>IMPORTANT:</B> If the DynamicSprite instance is released from memory (ie. there is
no longer a DynamicSprite* variable pointing to it), then the sprite will also be
removed from memory. Make sure that you keep a global variable pointer to the sprite
until you are finished with it, and at that point call Delete.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
// at top of script, outside interactions
DynamicSprite *buttonSprite;  

// inside an interaction
buttonSprite = DynamicSprite.CreateFromScreenShot(80, 50);
if (buttonSprite != null) {
  btnScrnshot.NormalGraphic = buttonSprite.Graphic;
}
</PRE>
places a screen grab of the current game session onto btnScrnshot.<P>
Once the GUI is disposed of, Delete should be called on the sprite.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A>, 
<A HREF="ags42.htm#Game.GetSaveSlotDescription">Game.GetSaveSlotDescription</A>,
<A HREF="ags40.htm#DynamicSprite.CreateFromFile">DynamicSprite.CreateFromFile</A>,
<A HREF="ags40.htm#DynamicSprite.CreateFromSaveGame">DynamicSprite.CreateFromSaveGame</A><P>


<HR>
<A NAME="DynamicSprite.Crop"></A>
<H3>Crop (dynamic sprite)</H3>
<PRE>
DynamicSprite.Crop(int x, int y, int width, int height);
</PRE>
Crops the sprite down to <I>width</I> x <I>height</I>, starting from (x,y) in the image.
The width and height are specified in 320x200-resolution units, as usual.<P>
This allows you to trim the edges off a sprite, and perform related tasks. Only the area
with its top-left corner as (x,y) and of WIDTH x HEIGHT in size will remain.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
sprite.Crop(10, 10, sprite.Width - 10, sprite.Height - 10);
RawDrawImage(100, 100, sprite.Graphic);
sprite.Delete();
</PRE>
will load the CustomAvatar.bmp image, cut off the left and top 10 pixels, and then
draw it onto the room background at (100,100).<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Flip">DynamicSprite.Flip</A>,
<A HREF="ags40.htm#DynamicSprite.Height">DynamicSprite.Height</A>,
<A HREF="ags40.htm#DynamicSprite.Width">DynamicSprite.Width</A><P>


<HR>
<A NAME="DynamicSprite.Delete"></A>
<H3>Delete (dynamic sprite)</H3>
<I>(Formerly known as DeleteSprite, which is now obsolete)</I><P>
<PRE>
DynamicSprite.Delete();
</PRE>
Deletes the specified dynamic sprite from memory. Use this when you are no longer displaying
the sprite and it can be safely disposed of.<P>
You do not normally need to delete sprites, since the AGS Sprite Cache manages loading
and deleting sprites automatically.<P>
However, when an extra sprite has been loaded into the game (for example, with the
CreateFromFile or CreateFromScreenShot commands) then AGS does not delete it automatically,
and you must call this command instead.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
object[1].Graphic = sprite.Graphic;
Wait(200);
object[1].Graphic = 22;
sprite.Delete();
</PRE>
will load the file "CustomAvatar.bmp", change Object 1 to display this graphic, wait 5
seconds, then change object 1 back to its old sprite 22 and free the new image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.CreateFromScreenShot">DynamicSprite.CreateFromScreenShot</A>,
<A HREF="ags40.htm#DynamicSprite.Graphic">DynamicSprite.Graphic</A><P>


<HR>
<A NAME="DynamicSprite.Flip"></A>
<H3>Flip (dynamic sprite)</H3>
<PRE>
DynamicSprite.Flip(eFlipDirection);
</PRE>
Flips the dynamic sprite according to the parameter:<P>
<I>eFlipLeftToRight</I> flips the image from left to right <br> 
<I>eFlipUpsideDown</I> flips the image from top to bottom <br> 
<I>eFlipBoth</I> flips the image from top to bottom and left to right<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
sprite.Flip(eFlipUpsideDown);
RawDrawImage(100, 100, sprite.Graphic);
sprite.Delete();
</PRE>
will load the CustomAvatar.bmp image, flip it upside down, and then
draw it onto the room background at (100,100).<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Crop">DynamicSprite.Crop</A>,
<A HREF="ags40.htm#DynamicSprite.Resize">DynamicSprite.Resize</A>,
<A HREF="ags40.htm#DynamicSprite.Rotate">DynamicSprite.Rotate</A><P>


<HR>
<A NAME="DynamicSprite.Resize"></A>
<H3>Resize (dynamic sprite)</H3>
<PRE>
DynamicSprite.Resize(int width, int height);
</PRE>
Resizes an existing dynamic sprite to WIDTH x HEIGHT pixels.<P>
The width and height are specified in 320x200-resolution units, as usual.<P>
<B>NOTE:</B> Resizing is a relatively slow operation, so do not attempt to resize sprites
every game loop; only do it when necessary.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
sprite.Resize(sprite.Width * 2, sprite.Height * 2);
RawDrawImage(100, 100, sprite.Graphic);
sprite.Delete();
</PRE>
will load the CustomAvatar.bmp image, stretch it to double its original size, and then
draw it onto the room background at (100,100).<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Crop">DynamicSprite.Crop</A>,
<A HREF="ags40.htm#DynamicSprite.Flip">DynamicSprite.Flip</A>,
<A HREF="ags40.htm#DynamicSprite.Rotate">DynamicSprite.Rotate</A>,
<A HREF="ags40.htm#DynamicSprite.Height">DynamicSprite.Height</A>,
<A HREF="ags40.htm#DynamicSprite.Width">DynamicSprite.Width</A><P>


<HR>
<A NAME="DynamicSprite.Rotate"></A>
<H3>Rotate (dynamic sprite)</H3>
<PRE>
DynamicSprite.Rotate(int angle, optional int width, optional int height)
</PRE>
Rotates the dynamic sprite by the specified <I>angle</I>. The angle is in degrees,
and must lie between 1 and 359. The image will be rotated clockwise by the specified angle.<P>
Optionally, you can specify the width and height of the rotated image. By default, AGS
will automatically calculate the new size required to hold the rotated image, but
you can override this by passing the parameters in.<P>
Note that specifying a width/height does not stretch the image, it just allows you
to set the image dimensions to crop the rotation.<P>
<B>NOTE:</B> Rotating is a relatively slow operation, so do not attempt to rotate sprites
every game loop; only do it when necessary.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
sprite.Rotate(90);
RawDrawImage(100, 100, sprite.Graphic);
sprite.Delete();
</PRE>
will load the CustomAvatar.bmp image, rotate it 90 degrees clockwise, draw the result
onto the screen, and then delete the image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Flip">DynamicSprite.Flip</A>,
<A HREF="ags40.htm#DynamicSprite.Resize">DynamicSprite.Resize</A>,
<A HREF="ags40.htm#DynamicSprite.Height">DynamicSprite.Height</A>,
<A HREF="ags40.htm#DynamicSprite.Width">DynamicSprite.Width</A><P>


<HR>
<A NAME="DynamicSprite.SaveToFile"></A>
<H3>SaveToFile (dynamic sprite)</H3>
<PRE>
DynamicSprite.SaveToFile(string filename)
</PRE>
Saves the dynamic sprite to the specified file.<P>
The filename you supply must have a .PCX or .BMP extension; they are the only
two file types that the engine supports.<P>
Returns 1 if the sprite was saved successfully, or 0 if it failed.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
sprite.Rotate(90);
sprite.SaveToFile("RotatedAvatar.bmp");
sprite.Delete();
</PRE>
will load the CustomAvatar.bmp image, rotate it 90 degrees clockwise, then
save the result back to the disk.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.CreateFromFile">DynamicSprite.CreateFromFile</A>,
<A HREF="ags42.htm#SaveScreenShot">SaveScreenShot</A><P>


<HR>
<A NAME="DynamicSprite.ColorDepth"></A>
<H3>ColorDepth property (dynamic sprite)</H3>
<PRE>
readonly int DynamicSprite.ColorDepth;
</PRE>
Gets the colour depth of this dynamic sprite. This can be 8, 16 or 32 and is not necessarily the same
as the game colour depth (though this usually will be the case).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
if (sprite != null) {
  Display("The image is %d x %d pixels, at %d-bit depth.", sprite.Width, sprite.Height, sprite.ColorDepth);
  sprite.Delete();
}
</PRE>
displays the colour depth of the CustomAvatar.bmp image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Height">DynamicSprite.Height</A>,
<A HREF="ags40.htm#DynamicSprite.Width">DynamicSprite.Width</A><P>


<HR>
<A NAME="DynamicSprite.Graphic"></A>
<H3>Graphic property (dynamic sprite)</H3>
<PRE>
readonly int DynamicSprite.Graphic;
</PRE>
Gets the sprite slot number in which this dynamic sprite is stored.
This value can then be passed to other functions and properties, such as
<A HREF="ags45.htm#Button.NormalGraphic">Button.NormalGraphic</A>.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* ds = DynamicSprite.CreateFromScreenShot(50, 50);
RawDrawImage(100, 100, ds.Graphic);
ds.Delete();
</PRE>
takes a screen shot, and draws it onto the background scene at (100,100).<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.CreateFromScreenShot">DynamicSprite.CreateFromScreenShot</A>,
<A HREF="ags40.htm#DynamicSprite.Delete">DynamicSprite.Delete</A><P>


<HR>
<A NAME="DynamicSprite.Height"></A>
<H3>Height property (dynamic sprite)</H3>
<PRE>
readonly int DynamicSprite.Height;
</PRE>
Gets the height of this dynamic sprite. The height is always returned in 320x200-resolution units.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
if (sprite != null) {
  Display("The image is %d x %d pixels.", sprite.Width, sprite.Height);
  sprite.Delete();
}
</PRE>
displays the size of the CustomAvatar.bmp image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Resize">DynamicSprite.Resize</A>,
<A HREF="ags40.htm#DynamicSprite.Width">DynamicSprite.Width</A><P>


<HR>
<A NAME="DynamicSprite.Width"></A>
<H3>Width property (dynamic sprite)</H3>
<PRE>
readonly int DynamicSprite.Width;
</PRE>
Gets the width of this dynamic sprite. The width is always returned in 320x200-resolution units.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
DynamicSprite* sprite = DynamicSprite.CreateFromFile("CustomAvatar.bmp");
if (sprite != null) {
  Display("The image is %d x %d pixels.", sprite.Width, sprite.Height);
  sprite.Delete();
}
</PRE>
displays the size of the CustomAvatar.bmp image.<P>
<I>See Also:</I> <A HREF="ags40.htm#DynamicSprite.Height">DynamicSprite.Height</A>,
<A HREF="ags40.htm#DynamicSprite.Resize">DynamicSprite.Resize</A><P>
<P>

</BODY></HTML>
