<HTML>
<head><title>GUI List Box functions and properties</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic57"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags26.htm#topic42"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags47.htm#topic56"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags49.htm#topic58"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>GUI List Box functions and properties</H2>
<A HREF="ags44.htm#GUIControl.Clickable">Clickable property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.Enabled">Enabled property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.Height">Height property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.ID">ID property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.OwningGUI">OwningGUI property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.SetPosition">SetPosition (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.SetSize">SetSize (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.Visible">Visible property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.Width">Width property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.X">X property (inherited)</A><br> 
<A HREF="ags44.htm#GUIControl.Y">Y property (inherited)</A><P>

<A HREF="#ListBox.AddItem">AddItem</A><BR>
<A HREF="#ListBox.Clear">Clear</A><BR>
<A HREF="#ListBox.FillDirList">FillDirList</A><BR>
<A HREF="#ListBox.FillSaveGameList">FillSaveGameList</A><BR>
<A HREF="#ListBox.GetItemAtLocation">GetItemAtLocation</A><BR>
<A HREF="#ListBox.InsertItemAt">InsertItemAt</A><BR>
<A HREF="#ListBox.RemoveItem">RemoveItem</A><BR>
<A HREF="#ListBox.ItemCount">ItemCount property (list box)</A><BR>
<A HREF="#ListBox.Items">Items property</A><BR>
<A HREF="#ListBox.SelectedIndex">SelectedIndex property</A><BR>
<A HREF="#ListBox.TopItem">TopItem property (list box)</A><BR>
<P>

<HR>
<A NAME="ListBox.AddItem"></A>
<H3>AddItem</H3>
<I>(Formerly known as ListBoxAdd, which is now obsolete)</I><P>
<PRE>
ListBox.AddItem(string newitem)
</PRE>
Adds NEWITEM to the specified list box. The item will be appended to
the end of the list.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String input = txtUserInput.Text;
lstChoices.AddItem(input);
</PRE>
will take the input from the user and add it to the listbox.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.Clear">ListBox.Clear</A>,
<A HREF="ags48.htm#ListBox.FillDirList">ListBox.FillDirList</A>,
<A HREF="ags48.htm#ListBox.InsertItemAt">ListBox.InsertItemAt</A>,
<A HREF="ags48.htm#ListBox.Items">ListBox.Items</A>,
<A HREF="ags48.htm#ListBox.RemoveItem">ListBox.RemoveItem</A><P>


<HR>
<A NAME="ListBox.Clear"></A>
<H3>Clear</H3>
<I>(Formerly known as ListBoxClear, which is now obsolete)</I><P>
<PRE>
ListBox.Clear()
</PRE>
Removes all items from the specified list box.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstNoteBook.Clear();
</PRE>
will remove all the items from listbox <I>lstNoteBook</I>.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.AddItem">ListBox.AddItem</A><P>


<HR>
<A NAME="ListBox.FillDirList"></A>
<H3>FillDirList</H3>
<I>(Formerly known as ListBoxDirList, which is now obsolete)</I><P>
<PRE>
ListBox.FillDirList(string filemask)
</PRE>
Fills the list box with a list of filenames matching FILEMASK in
the current directory. This could be useful if you have various
data files and the player can choose which one to load.<P>
FILEMASK is a standard DOS/Windows search expression such as "*.dat"
or "data*.*"<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstSaveGames.FillDirList("agssave.*");
</PRE>
will fill the listbox with the list of the saved games. Note that actually for this
task you would use FillSaveGameList instead.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.AddItem">ListBox.AddItem</A>, <A HREF="ags48.htm#ListBox.Clear">ListBox.Clear</A>,
<A HREF="ags48.htm#ListBox.FillSaveGameList">ListBox.FillSaveGameList</A><P>


<HR>
<A NAME="ListBox.FillSaveGameList"></A>
<H3>FillSaveGameList</H3>
<I>(Formerly known as ListBoxSaveGameList, which is now obsolete)</I><P>
<PRE>
ListBox.FillSaveGameList()
</PRE>
Fills the specified listbox with the save game list, sorted correctly
with the most recent game at the top of the list.<P>
The global <I>savegameindex</I> array is updated with the actual slot numbers
of the entries. So, you could do:
<PRE>
int index = lstSaveGames.SelectedIndex;
RestoreGameSlot(savegameindex[index]);
</PRE>
NOTE: The save game list can only hold 20 save games. If ListBox.ItemCount
returns 20 and you are doing a Save dialog box, you may want to make the
user replace an existing file rather than saving a new one.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstSaveGames.FillSaveGameList();
</PRE>
will fill listbox <I>lstSaveGames</I> with the list of the saved games.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.FillDirList">ListBox.FillDirList</A>,
<A HREF="ags48.htm#ListBox.SelectedIndex">ListBox.SelectedIndex</A>, <A HREF="ags48.htm#ListBox.ItemCount">ListBox.ItemCount</A><P>


<HR>
<A NAME="ListBox.GetItemAtLocation"></A>
<H3>GetItemAtLocation</H3>
<PRE>
ListBox.GetItemAtLocation(int x, int y)
</PRE>
Determines which item in the list box is at the screen co-ordinates (X,Y).
This allows you to find out which item the mouse is hovering over, for instance.<P>
Returns the item index (where the first item is 0), or -1 if the specified co-ordinates
are not over any item or are outside the list box.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int index = lstOptions.GetItemAtLocation(mouse.x, mouse.y);
if (index &lt; 0) {
  Display("The mouse is not over an item!");
}
else {
  String selectedItem = lstOptions.Items[index];
  Display("The mouse is over item '%s'.", selectedItem);
}
</PRE>
will display the item text that the mouse is currently hovering over.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.SelectedIndex">ListBox.SelectedIndex</A><P>


<HR>
<A NAME="ListBox.InsertItemAt"></A>
<H3>InsertItemAt</H3>
<PRE>
ListBox.InsertItemAt(int index, string newitem)
</PRE>
Inserts NEWITEM into the specified list box. The item will be inserted <B>before</B>
the specified index.<P>
Listbox indexes go from 0 (the first item) to ItemCount - 1 (the last item). The new
item will be inserted before the index you specify.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstChoices.AddItem("First item");
lstChoices.AddItem("Second item");
lstChoices.InsertItemAt(1, "Third item");
</PRE>
will insert the Third Item in between the First and Second items.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.AddItem">ListBox.AddItem</A>,
<A HREF="ags48.htm#ListBox.RemoveItem">ListBox.RemoveItem</A><P>


<HR>
<A NAME="ListBox.RemoveItem"></A>
<H3>RemoveItem</H3>
<I>(Formerly known as ListBoxRemove, which is now obsolete)</I><P>
<PRE>
ListBox.RemoveItem(int item)
</PRE>
Removes ITEM from the specified list box. ITEM is the list index of the item to
remove, starting with 0 for the top item.<P>
If you want to remove all items from the list, then use <A HREF="ags48.htm#ListBox.Clear">ListBox.Clear</A>
instead.<P>
<B>NOTE:</B> Calling this function causes other items in the list to get re-numbered, so
make sure you don't keep around any references from ListBox.SelectedIndex and related functions
while using this command.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstTest.AddItem("First item");
lstTest.AddItem("Second item");
lstTest.RemoveItem(0);
</PRE>
the list box will now just contain "Second item".<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.Clear">ListBox.Clear</A>, <A HREF="ags48.htm#ListBox.FillDirList">ListBox.FillDirList</A><P>


<HR>
<A NAME="ListBox.ItemCount"></A>
<H3>ItemCount property (list box)</H3>
<I>(Formerly known as ListBoxGetNumItems, which is now obsolete)</I><P>
<PRE>
readonly int ListBox.ItemCount
</PRE>
Gets the number of items in the specified listbox. Valid item indexes
range from 0 to (numItems - 1).<P>
This property is read-only. To change the item count, use the AddItem and RemoveItem methods.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
int saves = lstSaveGames.ItemCount;
</PRE>
will pass the number of saved games to the int saves.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.Items">ListBox.Items</A><P>


<HR>
<A NAME="ListBox.Items"></A>
<H3>Items property</H3>
<I>(Formerly known as ListBoxGetItemText, which is now obsolete)</I> <br> 
<I>(Formerly known as ListBox.GetItemText, which is now obsolete)</I> <br> 
<I>(Formerly known as ListBox.SetItemText, which is now obsolete)</I><P>
<PRE>
String ListBox.Items[index]
</PRE>
Gets/sets the text of the list box item at INDEX.<P>
List box items are numbered starting from 0, so the first item is 0, the
second is 1, and so on. The highest allowable index is ItemCount minus 1.<P>
If you want to add a new item to the listbox, use the <A HREF="ags48.htm#ListBox.AddItem">ListBox.AddItem</A> method.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String selectedItemText = lstOptions.Items[lstOptions.SelectedIndex];
</PRE>
will get the text of the selected item in the list box.<P>
<I>See Also:</I> <A HREF="ags48.htm#ListBox.SelectedIndex">ListBox.SelectedIndex</A>,
<A HREF="ags48.htm#ListBox.ItemCount">ListBox.ItemCount</A>,
<A HREF="ags48.htm#ListBox.AddItem">ListBox.AddItem</A><P>


<HR>
<A NAME="ListBox.SelectedIndex"></A>
<H3>SelectedIndex property</H3>
<I>(Formerly known as ListBoxGetSelected, which is now obsolete)</I> <br> 
<I>(Formerly known as ListBoxSetSelected, which is now obsolete)</I><P>
<PRE>
int ListBox.SelectedIndex
</PRE>
Gets/sets the index into the list of the currently selected item. The first
item is 0, second is 1, and so on. If no item is selected, this is set to -1.<P>
You can set this to -1 to remove the highlight (ie. un-select all items).<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
String selectedText = lstOptions.Items[lstOptions.SelectedIndex];
</PRE>
will get the text of the selected item in the listbox.<P>


<HR>
<A NAME="ListBox.TopItem"></A>
<H3>TopItem property (list box)</H3>
<I>(Formerly known as ListBoxSetTopItem, which is now obsolete)</I><P>
<PRE>
int ListBox.TopItem
</PRE>
Gets/sets the top item in the list box. The top item is the first item that is visible
within the list box, so changing this effectively scrolls the list up and down.<P>
Indexes for TopItem start from 0 for the first item in the list.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
lstSaveGames.TopItem = 0;
</PRE>
will automatically scroll listbox <I>lstSaveGames</I> back to the top of the list.<P>
<P>

</BODY></HTML>
