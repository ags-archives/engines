// Automatically converted interaction variables
int IntVar_Global_1 = 0;
export IntVar_Global_1;
//===================================================================
// *** AGS GLOBAL SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Author:  Allan Menefe (Holister_Man)
//          Rick Jafrate (RickJ)    
//
// Require: Ags Version: V2.7+, MiniGame V1.00
//
// 1 Abstract
// The  Global  Script is loaded when the game is started and remains
// active for the duration of the session regardless of which room is
// currently active.  
//
// 2 Scripting Hints - Comments 
// Choosing meaningful names of functions and variables help document 
// the script code.  Additional commentary supplements this to give a 
// clear  and  complete understanding of what the script does. In AGS 
// comments  begin  with  two  forward  slash  characters  "//".  The 
// compiler ignores any characters that follow these characters until 
// the end of the line. 
// 
// Comments in  the  early rooms, of this game, are heavily commented 
// to include tutroial materials not  normally required.  Comments in
// later rooms are commented in the recommended and typical manner.
//
// Comments  are  an  important part of programming that shouldn't be 
// overlooked. Think of  it as an exercise in the design process; "If
// you can't explain it to  yourself, it probably won't work". In the 
// long term, good documentation will save a massive amount of time.   
//
// There is an old joke that goes something like this "Real men don't
// do documentation. Only an idiot would forget how his code works!".
// It  doesn't  take  much programming experience to realize that the  
// opposite, of course, is true.  
//
// Comments are inserted into code  using character combinations that 
// delinenate the comment text and inform the compiler to ignore such
// text. There are two methods of acomplishing this. The first method
// utilizes two forward  slash characters, "//", to indicate that the 
// compiler should ignore  any  text on that line subsequent to these
// marker characters as show in the example below.
// 
//   // Everything after these two slashes will be commented out  
//   // until the end of the line.  You can use these to comment 
//   // out single lines.
//
// The second method utilizes the characters "/*" to begin a comment 
// and the characters "*/" to end the comment.
//
//    /*
//    Everything between the above symbol
//    and the symbol below will be commented out.
//    You can use them to easily comment out whole blocks of code,
//    */
//
//    /* or to insert comments in between code */
//
// In  this  game the "//" method has been used exclusively to insert
// comments. The second method was reserved for debug and development
// purposes.  For example, suppose a particular section of code isn't
// workging as it should.  A commonly used  technique of correcting a
// problem such as this is to  selectively disable/enable portions of
// the code block and observe the results using Display().  Since the
// production code has been exclussively commented using "//" it is a 
// simple matter to insert "/*" and "*/" at the appropriate places to
// disable sections of code. If such a section of code contained "/*"
// type comments, the entire section of code would be disabled only 
// until the end of the first /* type comment.
//
// 3 Revision History
// 12-Feb-06 RickJ,			update for AGS 2.72 (String compliance) 
// 05-Mar-15 RickJ,        update for AGS 2.70
// 04-Dec-01 Holister_Man, original version derrived from DQII
//
// 4 License
// This  module  is  free  software;  you  can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as  published  by the Free Software Foundation; either version 2.1 
// of the License, or any later version.
//
// This module is distributed in the hope that it will be useful, but
// WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of 
// MERCHANTABILITY or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You  should  have received a copy of the GNU Lesser General Public
// License along with this library; if not,write to the Free Software
// Foundation, Inc, 59 Temple Place, Suite 330, Boston, MA 02111-1307  
// USA.
//
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Static Variables
//
// Static Variables  are declared outside of any function definitions 
// and retain their values between function calls and may be accessed 
// by any function in the script file.  A static variable's name must
// be  unique within the script in which it is defined. By convention 
// names  of static variables appear  in mixed  case characters where 
// upper case characters are used as word separators.
//
//   // Room or Global Script 
//   int FooBar;                 // Static variable declaration
//-------------------------------------------------------------------
int      PrevKey;						// Used to detect key being held down
int 		PrevKeyCount;				// ...

//===================================================================
// Global Variables
//
// Global variables are unique within the entire application  and are
// declared, in the Global Script, outside the bounds of any function, 
// making  them  static  variables.   Since  the  values  of  dynamic
// variables  are  not defined, outside the bounds of the function in 
// which they are declared, it would make little sense to have global
// access to that variable.  
//
// Declaring  a  variable  in  the  Global Script  does  not  make it
// globally  accessible.  To  make a variable  globally accessible it 
// must be explicitly exported from the  Global Script imported  into 
// every  Room  Script.  This  is  accomplished  by using the keyword 
// export in  the  Global Script and  using the keyword import in the 
// Script Header, as shown in the example below.
//
// Names  of  global  variables appear in mixed case characters where 
// upper case characters are  used  as word separators. A two or more  
// character, lower  case prefix is used to  identify a collection of
// related global functions and variables. This helps make the script 
// more  readable  and  avoids  naming conflicts. The names of global 
// functions  and  variables must be unique across the entire game or
// application.
//
//   // Script Header 
//   import int    pcFooBar;     // Global variable 
//
//   // Global Script 
//   int    pcFooBar;            // Global variable 
//   export pcFooBar;
//
//   // Any Room Script 
//   pcFooBar = 42;
//
//-------------------------------------------------------------------

//-------------------------------------------------------------------
// If this variabl is true Beman won't talk to the player character.
//-------------------------------------------------------------------
int 		BemanIgnoresYou=false;		// true=Disallow conversation with Bman, false=Allow
export	BemanIgnoresYou;

//-------------------------------------------------------------------
// This variable holds the id  of room  selected at the AGS Terminal.
// Since  there may  be a terminal at various locations this variable
// is an array, where each element of the array represents a specific
//-------------------------------------------------------------------
int		AgsTermId[10];					// Define the variable
export	AgsTermId;						// Make it a global variable 


//-------------------------------------------------------------------
// This variable holds the id of the AGS Terminal location.
//-------------------------------------------------------------------
int		AgsTermLocation;				// Define the variable
export	AgsTermLocation;				// Make it a global variable 

//-------------------------------------------------------------------
// In some instances a specific id number is "required" to be entered.  
// This variable is set to the required value before going to the AGS
// Terminal room.  If the player enters a different value the message 
// "Access Denied" will be displayed. If the value of AgsTermRequired
// is set to NONE then any value may be entered by the player.
//-------------------------------------------------------------------
int		AgsTermRequired;				// Define the variable
export	AgsTermRequired;				// Make it a global variable 

//-------------------------------------------------------------------
// This variable is an array that holds the information for each room 
// that may be accessed via programmable portals.
//-------------------------------------------------------------------
AgsTerminal	AgsTerm[1000];				// Define the variable
export		AgsTerm;						// Make it a global variable 


//===================================================================
// Utility Functions
//-------------------------------------------------------------------


//===================================================================
// Application Functions
//-------------------------------------------------------------------
//===================================================================
   function ShowInventoryWindow() {
// 
// This function opens the inventory selection GUI.
//-------------------------------------------------------------------
	mouse.Visible = true;
	gInv.Visible = true;						// Show custom inventory window
	mouse.Mode = eModeInteract;			// switch to the Use cursor (to select items with)
	mouse.UseModeGraphic(eModePointer);	// But, override the appearance to look like the arrow
}

//===================================================================
   function RandomLook(String name) {
// 
// This  function  implements a random response to an unhandled "look 
// at" event. 
//-------------------------------------------------------------------

   //----------------------------------------------------------------
	// Declare a dynamic variable of type int (integer). Dynamic
	// variables are declared within the bounds of a function and
	// retain their values only while the function is executing. 
	// When the function is next executed previous values of dynamic
	// variables are lost.
   //----------------------------------------------------------------
	int random;                           
   
   //----------------------------------------------------------------
	// Generate a random number between 0 and 5. The AGS built-in 
	// function Random() generates a random number between 0 and the
	// value specified by it's parameter, in this case 5, which is
	// then assigned to the dynamic variable random.  
   //----------------------------------------------------------------
	random = Random(5);

   //----------------------------------------------------------------
	// Display a message corresponding to the random number. The "if"
	// and "eles if" statements compare the random number contained in 
	// the variable "random" to each of the possible values. The 
	// built-in AGS function Display() is then used to display the 
	// corresponding message.  
   //----------------------------------------------------------------
	if (random==0) Display ("Trust me, you don't wanna look at the %s.", name);
	else if (random==1) Display ("There's nothing important at the %s.", name);
	else if (random==2) Display ("Looking at the %s is a waste of time.", name);
	else if (random==3) Display ("There are no clues at the %s.", name);
	else if (random==4) Display ("Looking at the %s won't help.", name);
	else if (random==5) Display ( "OK, I looked at %s, now what?", name);
}

//===================================================================
   function RandomUse(String name) {
// 
// This 	function  implements a random response to an unhandled "use" 
// event. 
//-------------------------------------------------------------------
	int random;
   
	// Generate a random number between 0 and 5
	random = Random(5);

	// Display a message corresponding to the random number
	if (random==0) Display ("No time for experiments with the %s.", name);
	else if (random==1) Display ("I can't do anything with the %s.", name);
	else if (random==2) Display ("Using the %s now may freeze your computer.", name);
	else if (random==3) Display ("Are you sure that you want to use the %s?", name);
	else if (random==4) Display ("Use the %s now? You must be kidding.", name);
	else if (random==5) Display ("There's no way you can make me use the %s.", name);
}

//===================================================================
   function PickUp(String name) {
// 
// This function 	implements 	a random response to an unhandled "use" 
// event. 
//-------------------------------------------------------------------
	int random;
   
	// Generate a random number between 0 and 5
	random = Random(5);               

	// Display a message corresponding to the random number
	if (random==0) Display ("I don't wanna carry the %s around.", name);
	else if (random==1) Display ("Having the %s with me won't help.", name);
	else if (random==2) Display ("I can't take the %s, my inventory is full.", name);
	else if (random==3) Display ("Are you sure that you want to pick up the %s?", name);
	else if (random==4) Display ("Pick up the %s? Are you crazy.", name);
	else if (random==5) Display ("I feel to weak. I can't carry the %s.", name);
}

//===================================================================
   function LucasartsStatus() {
//
// This  function  demonstrates  how to do the lucasarts-style status 
// text which changes as you move the mouse over different areas.Here 
// it is mostly used in the icon bar at the top of the screen, but it 
// can be put anywhere, with  minor  changes.  Since this function is 
// called from repeatedly_execute below,this updates the label on the 
// status line every game cycle.
//-------------------------------------------------------------------
	String buf, name;

	// Is mouse over a GUI?
	if (GUI.GetAtScreenXY(mouse.x, mouse.y)==null) { // No! Get name of whatever is under mouse
		name = Game.GetLocationName(mouse.x, mouse.y);

		// Prefix cursor mode verb to name
		if (mouse.Mode==eModeWalkto) {
			buf = String.Format("Walk to %s", name);
		}
		else if (mouse.Mode==eModeLookat) {
			buf = String.Format("Look at %s", name);
		}
		else if (mouse.Mode==eModeInteract) {
			buf = String.Format("Interact with %s", name);
		}
		else if (mouse.Mode==eModeTalkto) {
			buf = String.Format("Talk to %s", name);
		}
		else if (mouse.Mode==eModeUseInv) {
			buf = String.Format("Use %s on %s", player.ActiveInventory.Name, name);
		}
		else {
			buf = name;
		}
	}
	else {                                // Yes! Display a hint then
		buf = "F5:Save Game - F7:Restore Game";
	}							
	gButtonbarStatus.Text = buf;         // Copy text to the ButtonBar Gui
}							

//===================================================================
// Ags Terminal
//
// The Ags Terminal in the  BrokenCurb  room is in fact a programming 
// terminal that  is used to program the adjacent door. Access to the
// terminal is gained by inserting the ID card with a magnetic stripe.
// The room id of the rood can then be entered.This has three effects
// as follows:
//    
//    o The background behind the door is changed to match the entry.
//
//    o The room the door leads to is behind the wall in the Empty-
//      Street room which can be seen through the crack in the wall.
//  
//    o Walking through the door will transport the player to the  
//      room that was entered from the Ags terminal.  
// 
// Global variables are used to keep the information required by both 
// the EmptyStreet and BrokenCurb  rooms so that they can function in 
// a coordinated manner.They have been defined in the global variable 
// section above.   
//-------------------------------------------------------------------
function AgsTerminal::Set(int DoorSpr, int CrackSpr, int X, int Y, int Exists) {
	this.DoorSpr = DoorSpr;
	this.CrackSpr = CrackSpr;
	this.Exists = Exists;
	this.X = X;
	this.Y = Y;		
}

function AgsTermInit() {
	int i;
	while (i<300) {  
		AgsTerm[i].Set(533,523,160,180,false);
		i++;
	}
   AgsTerm[crmEmptyStreet].Set		(31,32,160,110);
   AgsTerm[crmDarsStreet].Set			(37,36,190,140);
   AgsTerm[crmTrashCanStreet].Set	(71,60,160,100);
   AgsTerm[crmBrokenCurbStreet].Set	(72,61,200,100);
   AgsTerm[crmEmptyRoom].Set			(73,62,160,180);
   AgsTerm[crmFutureCity].Set			(74,63,160,180);
   AgsTerm[crmFactoryEntrance].Set	(75,64,228,191);
   AgsTerm[crmFactoryAdvanced].Set	(76,65,213,192);
   AgsTerm[crmFactoryArcade].Set		(77,66,116,158);
   AgsTerm[crmFactoryLooping].Set	(78,67,999,158);
   AgsTerm[crmFactoryHallOfGuis].Set(79,68,160,185);
   AgsTerm[crmFactoryMediaWing].Set	(80,69,116,158);
   AgsTerm[crmWindowsHell].Set		(81,70,115,180);

	AgsTermRequired = NONE;
	AgsTermLocation = 0;
	
	AgsTermId[0] = crmFactoryEntrance;
	AgsTermId[1] = crmFactoryAdvanced;
}

//===================================================================
// Global Functions
//
// Names  of  global  functions appear in mixed case characters where
// upper case characters are used as  word separators.  A two or more 
// character, lower case prefix is used to  identify a collection  of 
// related global functions and variables. This helps make the script 
// more  readable  and  avoids  naming  conflicts.  Names  of  global 
// functions  and  variables must be unique across the entire game or
// application.
//
// Global functions are defined in the  global script file and may be
// subsequently  called  from  within the global script file.  Global
// functions  may also be called from any  room  script.  An "import" 
// statement  in  the  script  header  file  makes  global  functions
// accessible  from  within  room  script files.  The names of global 
// functions must be unique within the entire application or game.  
//
//   // Script Header 
//   import function pcFooBar(); // Import global function 
//
//   // Global Script 
//   function pcFooBar() {       // Declare global function 
//   }
//
//   // Any Room Script 
//   function FooBar() {         // Local application function 
//      pcFooBar();              // Global function
//   }
//-------------------------------------------------------------------
//===================================================================
   function ListMiniGames(String title, String filemask, int show) {
// 
// This function lists all the mini games available whose filenames 
// match the pattern specified by FILEMASK.
//-------------------------------------------------------------------
	gPanel.Visible = show;
	gPanelList.FillDirList(filemask);
	gPanelTitle.Text = title;
}


//===================================================================
// Ags Standard Events                     
//
// Standard  AGS  system  events are contained in this section of the 
// global script. The following functions are AGS event handlers that
// are executed by the AGS game engine in response to events 
// generated during game play.
//-------------------------------------------------------------------
#sectionstart game_start  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function game_start() {
//
// This is the first event that is triggered when the game starts but
// before the first room is loaded into memory. It's purpose is to 
// initialize the game.  
//-------------------------------------------------------------------

	// Initialize a couple of game settings
	SetDigitalMasterVolume(50);
	
   // Initialize the Ags Terminal in the BrokenCurb room
	AgsTermInit();
	
	// Initialize player's money
	player.InventoryQuantity[5] = 0;                      
	UpdateInventory();
}
#sectionend game_start // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function repeatedly_execute() {
//
// This  event  is  triggered each game cycle, except when a blocking 
// function is in progress.  Addition of  code to this should be done 
// carefully to avoid unacceptable performance degradation.  If there 
// is way to avoid putting code in this  event  then  it is generally 
// advisable to do so.
//-------------------------------------------------------------------   	
	// Check for previous key up
	if (!IsKeyPressed(PrevKey)) PrevKeyCount = 0;

   // Update status text at the top of the screen
	LucasartsStatus();


	// Return from mini games
	if (MiniGame.IsReturningFrom("DQSLOT")) {
		player.InventoryQuantity[iMoney.ID] = MiniGame.iGet("Money");
		UpdateInventory();                            
	}
}
#sectionend repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart repeatedly_execute_always  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function repeatedly_execute_always() {
//
// This  event  is  triggered each  game cycle, even  when a blocking 
// routine (eg. speech/cutscene) is in progress.  Blocking  functions 
// cannot be called from this event handler. Addition of code to this
// event should  be  done carefully to avoid unacceptable performance 
// degradation. If there is a way to avoid putting code in this event
// then it is generally advisable to do so.
//-------------------------------------------------------------------
}
#sectionend repeatedly_execute_always// DO NOT EDIT OR REMOVE THIS LINE


#sectionstart on_event  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function on_event (int event, int data) {
//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//
// eEventEnterRoomBeforeFadein
//      called just before room Player Enters Screen event is run.
//      DATA = new room number
// eEventLeaveRoom
//      called just after room Player Leaves Screen event is run.
//      DATA = room number they are leaving
// eEventGotScore  
//      called whenever the player's score changes
//      DATA = number of points they got
// eEventGUIMouseDown
//      called when a mouse button is pressed down over a GUI
//      DATA = GUI number
// eEventGUIMouseUp
//      called when a mouse button is released over a GUI
//      DATA = GUI number
// eEventAddInventory
//      the player just got a new inventory item
//      DATA = inventory item number that was added
// eEventLoseInventory
//      the player just lost an inventory item
//      DATA = inventory item number that was lost
// eEventRestoreGame
//      tells your game that it has just been restored from a save game
//      DATA = save slot number
//-------------------------------------------------------------------

   //----------------------------------------------------------------
   // The  example  below  illustrates  the  usage  of the on_event()
   // function. 
   //----------------------------------------------------------------
	if (event==eEventRestoreGame) {
	}
}
#sectionend on_event  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart on_key_press  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function on_key_press(int keycode) {
//
// This event is triggered whenever a keyboard key is pressed.  The 
// parameter KEYCODE identifies which key was pressed.  All the 
// possible keycodes are given below.  See the AGS manual for more
// details.
//
// 1...,.26  Ctrl+A .. Ctrl+Z
// 8         Backspace (Ctrl+H is also Backspace)
// 9         Tab (Ctrl+I is also Tab)
// 13        Enter (Ctrl+M is also Enter)
// 27        Escape
// 32        Space
// 48....57  '0' key .. '9' key
// 65....90  'A' .. 'Z'  (letters are always passed as uppercase)
// 359..368  F1 .. F10
// 371       Home (numeric pad)
// 372       Up arrow
// 373       PgUp (numeric pad)
// 375       Left arrow
// 376       '5' (numeric pad)
// 377       Right arrow
// 379       End (numeric pad)
// 380       Down arrow
// 381       PgDn (numeric pad)
// 433..434  F11 .. F12
//-------------------------------------------------------------------
	String buf;
	String scrnshotname;
	String globaldebug;
	int    globaldebugint;
  
	// Evaluate the following keypesses even if the game is paused
	if (keycode==434) {                   // F12, Screen Shot, user can input screenshot name
		scrnshotname = Game.InputBox("Type a name for screenshot:");
		scrnshotname.Append(".BMP");
		SaveScreenShot(scrnshotname);
		Display ("Screenshot '%s' saved.", scrnshotname);
	}
	if (keycode==27) QuitGame(false);

	// Don't evaluate the following keypresses if game is paused
	if (IsGamePaused()==1) keycode=0;  

	if (keycode==17)   {                  // Ctrl-Q, Quit Game Dialog
		QuitGame(1);       
	}
	else if (keycode==359) {              // F1, Game Help
		Display("KEYS YOU CAN PRESS[F1: Help display[F5: Save game[F7: Restore game[CTRL-Q: Quit[F10: Bring up '?' Educational window");
		Display("TAB: Show inventory[Arrow keys or numeric keypad: Move character[F12: Take screenshot");
		Display("DEBUG KEYS[WARNING: Using these incorrectly can crash game![CTRL-S Give all inv[CTRL-V Version info[CTRL-A Show walkable areas[CTRL-X Teleport to room[CTRL-G View/change GlobalInts");
	}  
	else if ((keycode==363)&&(player.Room!=crmSplashScreen)) {  // F5 Save Dialog
		SaveGameDialog();
	}
	else if (keycode==365) {              // F7  Restore Dialog
		RestoreGameDialog();
	}
	else if (keycode==368) {              // F10 Help Dialog
		mouse.Mode = eModePointer;
		gHelp.Visible = true;
	}
	else if (keycode==9) {                // Tab, show inventory
		InventoryScreen();                 
	}
	else if (keycode==19) {               // Ctrl-S, give all inventory
		Debug(0,0);                        
	}
	else if (keycode==22) {               // Ctrl-V, version
		Debug(1,0);                        
	}
	else if (keycode==1) {                // Ctrl-A, show walkable areas 
		Debug(2,0);                        
	}
	else if (keycode==24) {               // Ctrl-X, teleport to room
		Debug(3,0);         
	}
	else if (keycode==20) {               // Ctrl-T, save room room for testing
		buf = String.Format("Testing %d",player.Room);
		SaveGameSlot(998,buf);
	}
	else if (keycode==18) {               // Ctrl-R, run test
		RestoreGameSlot(998);
	}
	
	else if ((keycode==7)&&(game.debug_mode)) {  // Ctrl-G, examine/modify GlobalInts
		globaldebug = Game.InputBox("Examine which GlobalInt?");
		globaldebugint = globaldebug.AsInt;
		Display ("GlobalInt %d is currently %d", globaldebugint,GetGlobalInt(globaldebugint));
		globaldebug = Game.InputBox("Change it? (Be careful!) (y/n)");
		if (globaldebug=="y") {                  // if 'y' WAS input
			Display("Changing GlobalInt %d !", globaldebugint);
			globaldebug = Game.InputBox("Change GlobalInt to:");
			SetGlobalInt(globaldebugint,globaldebug.AsInt);
		}
		else {
			Display("Good! Don't mess with things you don't understand!");
		}
	}
	// Process keyboard movement keys
	else if (keycode==372) {											// Up arrow
		if (!player.Moving) {
			player.WalkStraight(player.x,player.y-200);
		}
		else if (PrevKeyCount==0) {
			player.StopMoving();
			player.FaceLocation(STAGE_UP);
		}
	}
	else if (keycode==375) {											// Left arrow
		if (!player.Moving) {
			player.WalkStraight(player.x-300,player.y);
		}
		else if (PrevKeyCount==0) {
			player.StopMoving();
			player.FaceLocation(STAGE_LEFT);
		}
	}
	else if (keycode==377) {											// Right arrow
		if (!player.Moving) {
			player.WalkStraight(player.x+300,player.y);
		}
		else if (PrevKeyCount==0) {
			player.StopMoving();
			player.FaceLocation(STAGE_RIGHT);
		}
	}
	else if (keycode==380) {											// Down arrow
		if (!player.Moving) {
			player.WalkStraight(player.x,player.y+200);
		}
		else if (PrevKeyCount==0) {
			player.StopMoving();
			player.FaceLocation(STAGE_DOWN);
		}
	}
	if (PrevKey==keycode) PrevKeyCount++;    
	PrevKey = keycode;    
}
#sectionend on_key_press  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function on_mouse_click(MouseButton button) {
//
// This  event  is triggered whenever a mouse button is pressed.  The
// BUTTON parameter  identifies  which  mouse button  was  pressed as 
// follows: 
//
//    eMouseLeft,   eMouseLeftInv,    eMouseWheelNorth,
//    eMouseRight,  eMouseRightInv,   eMouseWheelSouth
//    eMouseMiddle
//-------------------------------------------------------------------

	// If the game is paused, don't react to mouse clicks
	if (IsGamePaused() == 1) {
	// Do nothing
	}
	// Execute any interactions attached to a room object, hotspot,
	// characters, etc at this location.
	else if (button==eMouseLeft) {
		ProcessClick(mouse.x, mouse.y, mouse.Mode);
	}
	// If not in intro room right-click, so cycle cursor
	else if ((button==eMouseRight)&&(player.Room!=crmIntroText)) {
		Mouse.SelectNextMode();            
	}
}
#sectionend on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function unhandled_event(int what, int type) {
//
// This  function is called when an interaction is run, but no events
// are listed  in  the  AGS  interaction  window.  The WHAT  and TYPE
// parameters tell you what the player did. Their possible values are 
// listed below:
// 
//    WHAT TYPE Description
//     1    1   Look at hotspot
//     1    2   Interact with hotspot
//     1    3   Use inventory on hotspot
//     1    4   Talk to hotspot
//     1    7   Pick up hotspot
//     1    8   Cursor Mode 8 on hotspot
//     1    9   Cursor Mode 9 on hotspot
//     2    0   Look at object
//     2    1   Interact with object
//     2    2   Talk to object
//     2    3   Use inventory on object
//     2    5   Pick up object
//     2    6   Cursor Mode 8 on object
//     2    7   Cursor Mode 9 on object
//     3    0   Look at character
//     3    1   Interact with character
//     3    2   Speak to character
//     3    3   Use inventory on character
//     3    5   Pick up character
//     3    6   Cursor Mode 8 on character
//     3    7   Cursor Mode 9 on character
//     4    1   Look at nothing (ie. no hotspot)
//     4    2   Interact with nothing
//     4    3   Use inventory with nothing
//     4    4   Talk to nothing
//     5    0   Look at inventory
//     5    1   Interact with inventory (currently not possible)
//     5    2   Speak to inventory
//     5    3   Use an inventory item on another
//     5    4   Other click on inventory
//-------------------------------------------------------------------
	String locname;
	String invname;
   
	locname = Game.GetLocationName(mouse.x,mouse.y);
	if ((what==1)&&(type==1)) {
		RandomLook(locname);
	}
	else if ((what==1)&&(type==2)) {
		RandomUse(locname);
	}
	else if ((what==1)&&(type==3)) {
		invname = player.ActiveInventory.Name;
		Display("I can't use the %s with the %s.", invname, locname);       
	}
	else if ((what==1)&&(type==4)) {
		Display("I can't talk with the %s.", locname);
	} 
	else if ((what==1)&&(type==7)) {
		PickUp(locname);
	} 
	else if ((what==2)&&(type==0)) {
		RandomLook(locname);
	} 
	else if ((what==2)&&(type==1)) {
		RandomUse(locname);
	} 
	else if ((what==2)&&(type==2)) {
		Display("I don't feel like talking with the %s.", locname);
	}
	else if ((what==2)&&(type==3))    {
		invname = player.ActiveInventory.Name;
		Display("I can't use the %s with the %s.", invname, locname);       
	}
	else if ((what==2)&&(type==5)) {
		PickUp(locname);
	}
	else if ((what==3)&&(type==0)) {
		RandomLook(locname);
	} 
	else if ((what==3)&&(type==1)) {
		Display( "I don't think that %s will like this.", locname);
	}
	else if ((what==3)&&(type==2)) {
		Display("Speaking with %s is a waste of time.", locname);
	}
	else if ((what==3)&&(type==3)) {
		invname = player.ActiveInventory.Name;
		Display("I can't use the %s with the %s.", invname, locname);       
	}
}
#sectionend unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart dialog_request  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function dialog_request(int parameter) {
//
// This  function is called when a dialog script line "run-script" is
// processed.  PARAMETER  is  the value  of  the number following the 
// "run-script" on that line of the dialog script. 
//-------------------------------------------------------------------

	// Actiate on_call() function in current Room Script to handle
	// the request
	CallRoomScript(parameter);

	// Handle generic requests here
	if (parameter==evtGivePoints10) {				
		GiveScore(10);
	}
	else if (parameter==evtBemanIgnoresYou) {
		BemanIgnoresYou = true;
	}  
}
#sectionend dialog_request  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Ags GUI Events 
//
// The  following  functions are AGS event handlers that are executed
// by the AGS  game  engine  in  response to  GUI events generated by 
// player interaction with the GUI interface.
//-------------------------------------------------------------------

#sectionstart interface_click  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function interface_click(int interface, int button) {
//
// This interaction function is deprecated. Beginning with AGS 2.7 
// it is possible to assign interaction functions directly to GUI
// controls. In this way a button press causes the interaction 
// function, assigned to the button, to be executed.  
//
// This event is triggered whenever the user clicks on user interface 
// element.  The INTERFACE and BUTTON parameters identify which 
// element was clicked.
//
// The primary DQ3 GUI has been converted to the new methodology.It
// is intended that the remaining contents of this function be moved 
// to seperate mini-games, activated using the RunAGSGame()
// mechanism. Upgrade to the new methodology will be domne at that 
// time.
// 
//-------------------------------------------------------------------
}
#sectionend interface_click  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Custom Inventory GUI 
//
// The following functions are executed in response to entery of text
// into the text box at the bottom of the screen.
//-------------------------------------------------------------------
#sectionstart gInvSelect_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gInvSelect_Click(GUIControl *control, MouseButton button) {
	mouse.Mode = eModeInteract;			// Switch to the Get cursor
	mouse.UseModeGraphic(eModePointer);	// But use pointer graphic
}
#sectionend gInvSelect_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gInvOK_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gInvOK_Click(GUIControl *control, MouseButton button) {
	gInv.Visible = false;					// Close the GUI
	mouse.UseDefaultGraphic();  
}
#sectionend gInvOK_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gInvDown_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gInvDown_Click(GUIControl *control, MouseButton button) {
	gInvWindow.ScrollDown();
}
#sectionend gInvDown_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gInvUp_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gInvUp_Click(GUIControl *control, MouseButton button) {
	gInvWindow.ScrollUp(); 
}
#sectionend gInvUp_Click  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Ctrl GUI (Controls)
//
// The following functions are executed in response to button clicks 
// or slider drags of components in the Controls Dialog Box. 
//-------------------------------------------------------------------
#sectionstart gCtrlSave_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlSave_Click(GUIControl *control, MouseButton button) {
	mouse.EnableMode(eModeWalkto);
	mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeInteract);
	mouse.EnableMode(eModeTalkto);   
	mouse.Mode = eModeWalkto;
	mouse.UseDefaultGraphic();
	gCtrl.Visible = false;
	SaveGameDialog();
}
#sectionend gCtrlSave_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlRestore_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlRestore_Click(GUIControl *control, MouseButton button) {
	mouse.EnableMode(eModeWalkto);
	mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeInteract);
	mouse.EnableMode(eModeTalkto);   
	mouse.Mode = eModeWalkto;
	mouse.UseDefaultGraphic();
	gCtrl.Visible = false;  
	RestoreGameDialog();
}
#sectionend gCtrlRestore_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlRestart_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlRestart_Click(GUIControl *control, MouseButton button) {
	mouse.EnableMode(eModeWalkto);
	mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeInteract);
	mouse.EnableMode(eModeTalkto);   
	mouse.Mode = eModeWalkto;
	mouse.UseDefaultGraphic();
	gCtrl.Visible = false;    
	RestartGame();
}
#sectionend gCtrlRestart_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlQuit_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlQuit_Click(GUIControl *control, MouseButton button) {
	PlaySound(sndBeBop01); 
	// QuitGame(1);
	player.ChangeRoom(crmCredits);
	gCtrl.Visible = false;
}
#sectionend gCtrlQuit_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlAbout_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlAbout_Click(GUIControl *control, MouseButton button) {
	Display("Adventure Game Studio[[Copyright 1995-2004 Chris Jones");  
}
#sectionend gCtrlAbout_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlPlay_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlPlay_Click(GUIControl *control, MouseButton button) {
	mouse.EnableMode(eModeWalkto);
	mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeInteract);
	mouse.EnableMode(eModeTalkto);   
	mouse.Mode = eModeWalkto;
	mouse.UseDefaultGraphic();
	gCtrl.Visible = false;  
}
#sectionend gCtrlPlay_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlGameSpeed_Change  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlGameSpeed_Change(GUIControl *control) {
	SetGameSpeed(gCtrlGameSpeed.Value);
}
#sectionend gCtrlGameSpeed_Change  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlMainVolume_Change  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlMainVolume_Change(GUIControl *control) {
	SetDigitalMasterVolume(gCtrlMainVolume.Value);
}
#sectionend gCtrlMainVolume_Change  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlMusicVolume_Change  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlMusicVolume_Change(GUIControl *control) {
	SetMusicMasterVolume(gCtrlMusicVolume.Value);  
}
#sectionend gCtrlMusicVolume_Change  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gCtrlTextSpeed_Change  // DO NOT EDIT OR REMOVE THIS LINE
function gCtrlTextSpeed_Change(GUIControl *control) {
	game.text_speed = gCtrlTextSpeed.Value;
}
#sectionend gCtrlTextSpeed_Change  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Help Gui
//
// There  are  four  labels on this gui that display help information 
// about the  current  room.  The  apporpiate text is copied to these 
// labels  in  the  "Player Enters Room" interation functions.  These
// labels are named as follows: 
//
//    gHelpRoom        - Contains the current room's filename
//    gHelpTitle       - Contains the current room's name or title
//    gHelpDescription - Contains a description of the room
//    gHelpReference   - Contains keyword references to manual topics
//
// The following functions are executed in response to mouse clicks 
// on the Help Dialog Box.
//-------------------------------------------------------------------
#sectionstart gHelpOk_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gHelpOk_Click(GUIControl *control, MouseButton button) {
	mouse.EnableMode(eModeWalkto);
	mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeInteract);
	mouse.EnableMode(eModeTalkto);   
	mouse.Mode = eModeWalkto;
	mouse.UseDefaultGraphic();
	gHelp.Visible = false;
}
#sectionend gHelpOk_Click  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Button Bar Gui
//
// The  following  functions are executed in response to mouse clicks
// on the Button Bar that  appears  at  the  top of the screen during 
// normal game play.
//-------------------------------------------------------------------
#sectionstart gButtonbarUse_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gButtonbarUse_Click(GUIControl *control, MouseButton button) {
	if (player.ActiveInventory!=null) mouse.Mode = eModeUseInv;
}
#sectionend gButtonbarUse_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gButtonbarInventory_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gButtonbarInventory_Click(GUIControl *control, MouseButton button) {
	// If a dialog boix is already open don't do anything
	if (gCtrl.Visible||gHelp.Visible) return;

	// Inventory selection GUI 
	ShowInventoryWindow();
}
#sectionend gButtonbarInventory_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gButtonbarHelp_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gButtonbarHelp_Click(GUIControl *control, MouseButton button) {

	// If a dialog boix is already open don't do anything
	if (gCtrl.Visible||gHelp.Visible) return;
  
	// Set title text
	gHelpRoom.Text = String.Format("Room %d", player.Room);

	// Open dialog box
	mouse.DisableMode(eModeWalkto);
	mouse.DisableMode(eModeLookat);
	mouse.DisableMode(eModeInteract);
	mouse.DisableMode(eModeTalkto);   
	mouse.Mode = eModePointer;           // change mouse cursor to the arrow
	mouse.UseDefaultGraphic();	
	gHelp.Visible = true;
}
#sectionend gButtonbarHelp_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gButtonbarCtrl_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gButtonbarCtrl_Click(GUIControl *control, MouseButton button) {
   
	// If a dialog box is already open don't do anything
	if (gCtrl.Visible||gHelp.Visible) return;

	// Open dialog box
	mouse.DisableMode(eModeWalkto);
	mouse.DisableMode(eModeLookat);
	mouse.DisableMode(eModeInteract);
	mouse.DisableMode(eModeTalkto);   
	mouse.Mode = eModePointer;           // change mouse cursor to the arrow
	mouse.UseDefaultGraphic();
	gCtrl.Visible = true;
}
#sectionend gButtonbarCtrl_Click  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Menu Gui
//
// The  following functions are executed in  response to mouse clicks
// on the Main Menu that appears at the beginning of the game.
//-------------------------------------------------------------------
#sectionstart gMenuIntro_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gMenuIntro_Click(GUIControl *control, MouseButton button) {
	PlaySound(sndBeBop01);
	player.ChangeRoom(crmIntroText);  
}
#sectionend gMenuIntro_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gMenuLoad_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gMenuLoad_Click(GUIControl *control, MouseButton button) {
	PlaySound(sndBeBop01);
	mouse.Mode = eModeWalkto;
	RestoreGameDialog();
}
#sectionend gMenuLoad_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gMenuPlay_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gMenuPlay_Click(GUIControl *control, MouseButton button) {
	PlaySound(sndBeBop01);
	player.ChangeRoom(crmEmptyStreet);    // player is now updated when PC changes
}
#sectionend gMenuPlay_Click  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart gMenuQuit_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gMenuQuit_Click(GUIControl *control, MouseButton button) {
	PlaySound(sndBeBop01);
	player.ChangeRoom(crmCredits);
}
#sectionend gMenuQuit_Click  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Mini Game Selector Gui
//
// The  following  functions are executed in response to mouse clicks
// on the Mini Game Selector dialofg box.
//-------------------------------------------------------------------
#sectionstart gPanelClose_Click  // DO NOT EDIT OR REMOVE THIS LINE
function gPanelClose_Click(GUIControl *control, MouseButton button) {
	gPanel.Visible = false;
}
#sectionend gPanelClose_Click  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Character Interaction Events
//
// Character  interaction events are contained in this section of the
// global script. The following functions are AGS event handlers that
// are  executed by the  game  engine in response to events generated
// during game play.
//-------------------------------------------------------------------
// Beman
//-------------------------------------------------------------------
#sectionstart character1_a  // DO NOT EDIT OR REMOVE THIS LINE
function character1_a() {
	// script for character1: SPEAK TO CHARACTER
	CallRoomScript(evtStartConversation);
}
#sectionend character1_a  // DO NOT EDIT OR REMOVE THIS LINE

//-------------------------------------------------------------------
// Roger
//-------------------------------------------------------------------
#sectionstart character2_a  // DO NOT EDIT OR REMOVE THIS LINE
function character2_a() {
   //----------------------------------------------------------------
	// Go to the crmFactoryEntrance room's repeatedly_execute() function 
	// and look for "if (GetGlobalInt(10)==1)".  This is so that the
   // long scripted scene is written in the room script instead of 
	// cluttering up the global script.
   //----------------------------------------------------------------
	// Speak to Roger
	if (GetGlobalInt(gixSpeakToRoger)==0) {		// Global int 10 is a flag re: what Roger should say
		SetGlobalInt(gixSpeakToRoger,1);				// Sets a flag. This scene picks up in the
	}
	else if (GetGlobalInt(gixSpeakToRoger)==2) {	// if you already talked to him once
		cRoger.Say("Are you enjoying your tour?");
		player.Say("It's a little hard to understand everything.");
		cRoger.Say("Keep trying!");
		SetGlobalInt(gixSpeakToRoger,3);
	}
	else if (GetGlobalInt(gixSpeakToRoger)==3) {	// if you already talked to him twice
		cRoger.Say("Have you seen Lassi around?");
		player.Say("Who?");
		cRoger.Say("I'm sure he will be here shortly.");
		SetGlobalInt(gixSpeakToRoger,4);
	}
	else {                                			// if you talked to him 3 times or more 
		cRoger.Say("Why don't you explore some other rooms?");
		cRoger.Say("Maybe I'll meet you again later.");
	}
}
#sectionend character2_a  // DO NOT EDIT OR REMOVE THIS LINE

//-------------------------------------------------------------------
// Loopy
//-------------------------------------------------------------------
#sectionstart character12_a  // DO NOT EDIT OR REMOVE THIS LINE
function character12_a() {
   // script for character12: SPEAK TO CHARACTER
	character[LOOPY].Say("If you want to learn more about looping, check out 'looping.txt'.");
	player.Say("You're huge!");
}
#sectionend character12_a  // DO NOT EDIT OR REMOVE THIS LINE

//-------------------------------------------------------------------
// Pirate Bob
//-------------------------------------------------------------------
#sectionstart character15_a  // DO NOT EDIT OR REMOVE THIS LINE
function character15_a() {
	// script for character15: Talk to character
	CallRoomScript(evtStartConversation);
}
#sectionend character15_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart character15_b  // DO NOT EDIT OR REMOVE THIS LINE
function character15_b() {
	// script for character15: Use inventory on character
	CallRoomScript(evtOpenDoor);  
}
#sectionend character15_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Inventory Interaction Events
//
// AGS INVENTOIRY interaction events are contained in this section of
// the  global script. The following functions are AGS event handlers 
// that are  executed by  the  AGS  game engine in response to events 
// generated during game play.
//-------------------------------------------------------------------
#sectionstart inventory5_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory5_a() {
	// script for inventory5: LOOK AT INVENTORY
	if (player.InventoryQuantity[iMoney.ID]==1) Display("You have 1 coin");
	else Display("You have %d coins.", player.InventoryQuantity[iMoney.ID]);
}
#sectionend inventory5_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory6_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory6_a() {
	// script for inventory6: LOOK AT INVENTORY
	player.Say("It's a magnetic ID card.");
}
#sectionend inventory6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory7_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory7_a() {
	// script for inventory7: LOOK AT LEN
	player.Say("It is a lens.");
}
#sectionend inventory7_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory8_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory8_a() {
	// script for inventory8: LOOK AT ENVELOPE
	player.Say(" There's an empty envelope");
}
#sectionend inventory8_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory9_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory9_a() {
	// script for inventory9: LOOK AT HORN
	player.Say("It's a horn");
}
#sectionend inventory9_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory10_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory10_a() {
	// script for inventory10: LOOK AT BOOK
	player.Say("The title says \"AGS Manual\".  Sounds totally useless doesn't it?"); 
	player.Say("Apparently somebody wrote \"RTFM\" across the cover with a red marker pen."); 
	player.Say("Hmmm... I wonder what it could mean?"); 
}
#sectionend inventory10_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory11_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory11_a() {
	// script for inventory11: LOOK AT MIRROR
	player.Say("Damn, I'm looking good"); 
}
#sectionend inventory11_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory12_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory12_a() {
	// script for inventory12: LOOK AT DOOL
	player.Say("This doll looks like Andy P3nish"); 
}
#sectionend inventory12_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory13_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory13_a() {
	// script for inventory13: LOOK AT HAMMER
	player.Say("If I got a hammer, I'd hammer in the morning...");
}
#sectionend inventory13_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart inventory14_a  // DO NOT EDIT OR REMOVE THIS LINE
function inventory14_a() {
	// script for inventory14: LOOK AT NOTE
	Display("There's a number on the paper");
	Display("It reads 4356");
}
#sectionend inventory14_a  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// 
//-------------------------------------------------------------------


function iKey_Look()
{
DisplayMessage(500);
}

function iPinkPoster_Look()
{
DisplayMessage(501);
}

function iTrash_Look()
{
DisplayMessage(502);
}

function iTrash_UseInv()
{
if (player.ActiveInventory == inventory[1]) {
DisplayMessage(503);
}
}

function iBlueCup_Look()
{
DisplayMessage(504);
}

function iIdCard_Look()
{
DisplayMessage(515);
}

function iBottle_Look()
{
DisplayMessage(516);
}

function cEgo_Look()
{
DisplayMessage(999);
}

function cEgo_Interact()
{
DisplayMessage(998);
}

function cEgo_Talk()
{
DisplayMessage(997);
}

function cBman_Look()
{
DisplayMessage(510);
}

function cBman_Interact()
{
DisplayMessage(511);
}

function cRoger_Look()
{
DisplayMessage(520);
}

function cRoger_Interact()
{
DisplayMessage(511);
}

function cToadie_Look()
{
DisplayMessage(521);
}

function cCharacter12_Look()
{
DisplayMessage(512);
}

function cCris_Look()
{
DisplayMessage(999);
}

function cCris_Interact()
{
DisplayMessage(998);
}

function cCris_Talk()
{
DisplayMessage(997);
}

function cCris_UseInv()
{
DisplayMessage(980);
}
