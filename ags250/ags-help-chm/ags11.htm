<HTML>
<head><title>Setting up the game</title></head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic18"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags8.htm#topic7"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags10.htm#topic9"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags12.htm#topic27"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Setting up the game</H2>
Now that you know how to create a room, it's time to set up the game-wide
settings. These include inventory objects, global messages, palette setup
and other things which do not depend on individual rooms.<P>
<A HREF="#PalSetup">Palette setup</A><BR>
<A HREF="#topic19">Inventory</A><BR>
<A HREF="#topic20">Importing your own sprite graphics</A><BR>
<A HREF="#GlobMessages">Global Messages</A><BR>
<A HREF="#topic21">Introduction sequences</A><BR>
<A HREF="#Views">Animations</A><BR>
<A HREF="#topic22">Characters</A><BR>
<A HREF="#topic23">Conversations</A><BR>
<A HREF="#topic24">Game options</A><BR>
<A HREF="#topic25">Cursors</A><BR>
<A HREF="#topic26">Fonts</A><BR>
<P>

<HR>
<A NAME="PalSetup"></A>
<H3>Palette setup</H3>
The first thing you need to do when you create a new game is to decide whether
you want to use 8-bit (palette-based) colour or 16-bit (hi-colour).
If you want to use 16-bit colour, you can still use 256-colour backgrounds and
sprites if you want to, but the engine will only run in a 16-bit colour
resolution, thus slowing it down.<P>
If you want to use 8-bit (because it runs faster), you need to set up the
palette. This is because all sprite and background scene imports rely on the
palette setup to be the same. You <B>CANNOT</B> use hi-colour sprites or backgrounds
in a 256-colour game.<P>
Choose the "Palette" pane. Here you will see the 256-colour
palette displayed in a grid. Most of the slots are marked "X" - these are the
slots reserved for the background pictures, and will be different in each
room. The other colours will be as they look here for the entire game. These
fixed colours allow things like the main character graphics, which must be
displayed on more than one screen, to work.<P>
If you want, you can assign more or less colours to the backgrounds. To toggle
the background assignment on/off, click on the slot, then check the 
"This colour is room-dependant" box to swap the slot's status.<P>
<B>IMPORTANT NOTE:</B> <I>You must set up the palette as you want it before you start
making your game - if you change it later, you will have to re-import all the
sprites and background scenes.</I><P>
You can select multiple colour slots by clicking on the first slot, then
shift-clicking on the last slot in the range you want to select. You can then
toggle the background status of all the selected slots at once.<P>
The "Export pal" button exports the entire palette to a .PAL or PCX file which
you can then use to read back into the Editor in a different game. If you
choose to export to a pcx file, then a screen shot of the Palette Editor will
be saved as the picture. This way you can see all the game-wide colours in
the file.<P>
The "Import pal" button replaces the <B>selected</B> palette entries with those
entries from the PAL or PCX file you choose. It can read standard 768-byte
PAL files, SCI palette resources (renamed to extension .pal) and JASC PSP
palette files.<P>

<HR>
<A NAME="topic19"></A>
<H3>Inventory</H3>
Most adventure games allow the player to carry a set of objects, which he can
then use to solve puzzles. Adventure Game Studio makes this inventory easy
for you to manage.<P>
Every inventory item which the player may carry during the game at one time
or another is listed under the "Inventory" pane. Here, each item
also has a number which you use in interactions to identify the object.
The left hand side of the screen lists all the items in the game.  On the
right is the graphic used for the object in the inventory window. To change
this, click the "Change image" button, then select the new graphic from the dialog
which appears.<P>
If you want the player to start the game with this item in his
inventory, check the "Player starts with this item" check-box.
To create a new item, click the "New item..." button. You will be asked for
the new item's name, and then it will be assigned the next available number.<P>
The last thing to do with the inventory items is to define their interactions:
what happens when the player manipulates them in the inventory window. Click
the "Interaction" button, which brings up a window which works identically
to the <A HREF="ags10.htm#Interaction">hotspot interactions</A>. The available events are
described in the reference section.<P>
<I>NOTE: Several limitations apply to the commands you can use in the Inventory
interactions. This is because they must run from all rooms, and so cannot
have any room-specific commands. In particular, do not use any Object commands, and
if you use a "Display message" command, then it must display a
<A HREF="ags11.htm#GlobMessages">global message</A>.</I><P>
To give the item to the player during the game, you use the "Player - Add inventory"
and maybe "Object - Remove object" commands. The inventory number required by the former
command is the item number from the list described above. Remember that an
inventory item is <B>NOT</B> the same thing as an object.<P>
<I>NOTE: Each character in the game carries their own set of inventory items.
This means, if you want to create a game like Day of the Tentacle, where the
player can control three different characters, each character will have a
seperate inventory. All inventory commands always operate on the <B>current
player character</B>.</I><P>
You have two choices about how the inventory is displayed to the player.
Unfortunately, due to the way the inventory works, the two options are
built-in to the engine and are not customizable.<P>
The default option is the Sierra-style pop-up inventory window, which is
popped up by clicking on the Bag icon on the icon bar (which uses the text
script InventoryScreen function to display it). You can also have the current
inventory item displayed in its own button on the icon bar by creating a
button on the GUI and setting its text to  (INV)  which stretches the item
picture to the button size, or  (INVNS)  which draws the inventory item
picture straight onto the button with no resizing. Finally, (INVSHR) , probably
the best option, will draw it at actual size if it will fit, or shrink it if not.<P>
The other option is a Lucasarts-style inventory window. To use this, you
will need to edit the GUI to add it, so I will explain this later on.
While you are starting off with AGS, it is recommended to use the supplied
standard Sierra-style inventory window.<P>
Finally, you may have noticed a "Draw hotspot dot" checkbox at the bottom of the
Inventory pane. If you check this, then when the player selects an inventory item,
the mouse cursor for it will have a dot and mini-crosshair drawn on it, to show the
player where the hotspot is. You can enter the colour for the centre dot and also for
the surrounding 4 pixels.<P>

<HR>
<A NAME="topic20"></A>
<H3>Importing your own sprite graphics</H3>
When you were choosing the graphics for the object earlier in this tutorial,
you probably noticed that most of the graphics available didn't look up to
much. This is no problem, because you can import your own graphics using
the Sprite Manager.<P>
Go to the <B>Sprite Manager</B> pane, under Visual Settings. Here, you will see
the complete sprite set for the game. There are two ways to import your
graphics - either overwrite an existing slot with your graphic, or
create a new slot for it.<P>
To overwrite an existing sprite, right-click the sprite and select "Import over
this sprite". To import a new slot, right-click on the background to the window
and choose "Import new sprite".<P>
When you choose either of these options, a window appears which has a couple of options
in it, and a big "Import from File" button. If your game is hi-colour, you also get
an option to paste from the clipboard* (see note below).<P>
To import your graphic, click the "Import from File" button. The graphic you
choose must be at the same colour depth as your game (ie. if you are using hi-colour
backgrounds, your sprites must be hi-colour, and vice versa).
The picture is displayed on-screen. <P>
If you move the mouse over the image, you'll notice a rectangle following the cursor
around. This is the portion of the image that will be imported when you click the left
mouse button. To resize the rectangle, click and drag the right mouse button.
Or, you can import the entire image with the "Grab entire image" button.<P>
<I>NOTE (256-colour only):
You may well find that the colours on your graphic look slightly strange in
the Room Editor. This is because the sprites are only allocated, by default,
the first 41 of the palette colours (see the <A HREF="ags11.htm#PalSetup">palette section</A>), so
your graphic will be remapped to this much smaller palette. If you find that
many of your imported sprites look strange, you can increase the number of
colours assigned to sprites, at the expense of background colours (again see
the section above for information on how to do this).<P>
If your sprite will only be used in one room then alternatively you can
use the "use background palette" option, which will remap your graphic to
the palette of the room currently loaded, giving much better results. Note,
however, that if you do this, and then try and use the sprite on another
screen, its colours will most likely be screwed up. To use the room palette,
check the "use bkgrnd pal" check-box. Make sure to un-check this box before
you import any other sprites.</I><P>
NOTE: The transparent colour used by AGS is palette index 0 (for 256-colour
sprites) and RGB (255,0,255) for hi-color. Any pixels you draw on imported
sprites in these colours will be transparent.<P>
You can group imported sprites into folders. This prevents the main sprite
list from becoming very long (and you can only have 200 sprites per folder
anyway). By default, the Sprite Manager displays the Main folder, which
contains some graphics and a sub-folder called "Defaults". Folders work the
same way as Windows folders. Right-click on a folder in the tree to rename
it or make a sub-folder.<P>
At present you cannot move sprites between folders so
they are stuck in the folder in which you create them. (Imported sprites
are placed into the currently displayed folder). Also, you cannot delete
folders.<P>
* <I>NOTE: A few people have experienced problems when importing from clipboard,
in that the image colours get reversed (red becomes blue, blue becomes red, and so on)
when they are running Windows at 24-bit or 32-bit colour. If this happens to you, there
are two solutions: (a) turn down your desktop colour depth to 16-bit to run the AGS Editor,
or (b) import your sprites from files rather than the clipboard.</I><P>
<B>Tiled sprite import</B><P>
You may have noticed a checkbox called "Tiled sprite import". Some people find
this a useful way of importing many frames of a character's animation at once.<P>
In order for this to work, you need to have all your sprites lined up on your
source bitmap at even intervals. Then, click "Import from file" and import it
as usual. Check the "Tiled sprite import" box, and select the upper-left frame.<P>
When you click the left mouse button, the selection rectangle will become un-filled
and now you can drag the mouse to define how many frames to import - they'll all
be enclosed by selection rectangles. Once you have the correct number, click the left
button again and they will all be imported.<P>

<HR>
<A NAME="GlobMessages"></A>
<H3>Global Messages</H3>
While each room has its own set of messages ("local messages"), in some
situations you need to be able to display a message from more than one room,
or in a global game interaction which is not related to a room. For this
purpose global messages are provided.<P>
Choose the "Global messages" pane. Here you are presented with
a list of the 500 available global message slots. By default, they are all
empty except messages 983-999 which contain the default messages for actions
on the player character, the Save Game dialog box, and so on.
Global messages are numbered between 500 and 999 so that they are not
confused with local room messages.<P>
To display a global message, simply use its number in any "Display message"
command.<P>
You can include a couple of variables into global (and local) messages. You
do this by inserting special tokens into the message. When the message is
displayed in the game, the engine replaces the token with its value:
<PRE>
 token   replaced by
 @INx@  number of inventory item x that the player has
 @GIx@  the current value of GlobalInt x (used with SetGlobalInt/GetGlobalInt)
</PRE>
The default global messages are used as follows:
<PRE>
983   text when save/load disabled ('sorry, not now' is the default)
984   text for "Restore" button in Restore game dialog
985   text for "Cancel" button
986   the top "Select a game to restore" text
987   text for "Save" button in Save Game dialog
988   the header "Type a name to save as:" text
989   text for "Replace" button when save folder is full
990   header text "The folder is full, you must replace a game"
991   text header "Replace:"
992   header "With:"
993   text for Quit button in Quit dialog
994   text for Play button in Quit dialog
995   header text "Are you sure you want to quit"
996   message displayed if player clicks Inventory but has no items
997   default interaction for talking to player character
998   default interaction for interacting with player character
999   default interaction for looking at player character
</PRE>
You can of course change any of these messages to customize your game.<P>

<HR>
<A NAME="topic21"></A>
<H3>Introduction sequences</H3>
You can easily add intro, outro and cutscene sequences to your game. There
is no specific function to do these, but using the provided animation and
script commands you can create almost anything you might need.<P>
Normally, the game will start in room 1. However, you can change this to any
room you want. Go to the "Characters" pane. Make sure that the
main character is selected in the list on the left. You will see on the right
hand side "Start in room:" followed by "1". This is the starting room
for the player character, and it is this entry that decides which is the first
room loaded. If you set it to room 0, then a file named INTRO.CRM will be
used (not ROOM0.CRM as you might think). This is for backward compatibility
with AC 1, but it is also good practice and it is suggested that you use this
feature.<P>
Set the starting room to room 0. Now, when you run the game, the intro will
be the first room loaded. In this room, you will probably want to disable
the main character (if you want a logo graphic up first). Remember, you do
this through  Room Editor -&gt; Settings -&gt; Player character visible.<P>
<I>TIP: The starting room facility is also useful when testing your game - you
can make the game start in any room, at the point where you are testing it,
rather than having to keep playing the game through to get there.</I><P>
Cutscenes are created using the normal animation script commands, such as
MoveCharacter, SetObjectView, and so forth. I would suggest you leave this
until you are more comfortable with AGS, and can appreciate how things are done.<P>

<HR>
<A NAME="Views"></A>
<H3>Animations</H3>
In most games you will use some sort of animation during the game, whether
it be a flag waving in the breeze or the player bending over to pick something
up. The term "animation" refers to the ability to change the look of, and
move, objects.<P>
Animations in AGS are managed using Views. A "view" is a set of one or more
"loops". A loop is a set of frames which, when put together, give the effect
of movement. Each frame in the view can be set a graphic and a speed.
Go to the "Views" pane, under Visual Settings. This is the View Editor. Here you will
see the main character's walking view.<P>
Click the "New view" button to create us a new, empty view.
Each loop is displayed horizontally with its number at the left hand side,
frames going out to the right. To add a frame, click the grey "New frame"
button. To delete a frame, right-click it.<P>
To change a frame's graphic, double-left-click it. The sprite list screen
will be displayed (you may remember this from the Object graphic selection)
where you can choose the graphic you want to use for this frame.<P>
Below each frame you will see "SPD:0". This is the frame's *relative* speed,
which you can change by clicking on the word "SPD:". The larger the number,
the longer the frame stays (ie. the slower it is). When the animation is run,
an overall animation speed will be set, so the actual speed of the frame
will be:  overall_speed + frame_speed  . Note that you can use negative
numbers for the frame speed to make it particularly fast, for example setting
it to -3 means that the frame will stay for hardly any time at all.<P>
You will also see something marked "NO SND". If you click this, you can enter
a sound number that will be played when this frame becomes visible on the screen.
This is especially useful for footstep sounds.<P>
You run an animation by using the interaction editor or
text script animation commands, which will be explained in detail later.<P>
To animate an object, you first of all need to set the object's view to the
correct view number (use the SetObjectView script command), and then
use the AnimateObject script command to actually start
the animation. <P>

<HR>
<A NAME="topic22"></A>
<H3>Characters</H3>
Adventure Game Studio makes it easy to add your own non-player characters
into the game. A character is similar to an object, except that it can change
rooms, maintain its own inventory, and take part in conversations (more on
these later). It can also have its own custom animation speed and movement
speed.<P>
Go to the "Characters" pane. You will see on the left of the
screen a list of all the characters in the game.
To create a new character, click the "New character" button.<P>
You will see that there are a lot of options which you can set for each
character. First of all, the "This is the player character" check-box allows
you to change which character the player will control at the start of the
game. When the game starts, the first room loaded will be this character's
starting room. By checking this box for one character, it will be de-selected
for any other character which was previously set.<P>
Secondly, the "Ignore room area scaling" check-box allows you to specify that this
character will not be stretched or shrunk in scaling areas of the screen. This
could be useful if you have a character who always stands still in the same
place, and you want the graphics on-screen to be the same size as you drew
them, even though he is standing on a scaled area.<P>
The "No interaction" check-box tells AGS that you want the character to be
see-through to all interactions. This is like the way the
main character works in Lucasarts games - if you move the cursor over him
or click to look, speak, etc, then the game will ignore the character and
respond to whatever is behind him.<P>
To set which room this character starts in, change the number in the "Start
in room" box. If you set this to room 0 for the player character, he will start in the
intro screen, INTRO.CRM . You can set the
character's location within this room by using the "At X:" and "Y:" textboxes,
typing in the X,Y co-ordinates you want him to start at. These co-ordinates
should be the middle of his feet.<P>
The "Normal view" is where you set what the character looks like. You must
create a view in the <A HREF="ags11.htm#Views">View Editor</A>, and this
view must have either 4 or 8 loops. If you use 4 loops, then when walking
diagonally the closest straight direction is used for the graphics. Each loop
is used for the character walking in one direction, as follows:
<PRE>
 Loop 0 - walking down (towards screen)
 Loop 1 - walking left
 Loop 2 - walking right
 Loop 3 - walking up (away from screen)
 Loop 4 - walking diagonally down-right
 Loop 5 - walking diagonally up-right
 Loop 6 - walking diagonally down-left
 Loop 7 - walking diagonally up-left
</PRE>
Once you set this option, you should see a preview of the character walking
around in the top part of the screen.<P>
To change the rate at which the character animates, change the Animation Speed box.
Here, a smaller number means faster animation. Note that this does NOT
effect the speed at which the character actually moves when walking.<P>
The "Movement speed" option allows you to control how fast the character moves when
walking. Here, a larger number means he walks faster.<P>
The "Talking colour" option specifies which colour is
used for the text when this character is talking. It effects both messages
displayed with "Display message" commands which are set to that character,
and also conversations. You can find out the colour for each number by going
to the "Palette" pane.<P>
The "Idle view" button allows you to set an idle animation for the character.
To do this, create a new view, with one or more loops of the character idle
(eg. smoking, reading a book, etc). Then, click "Idle view" and type in
the view number. If the player stands still for 20 seconds (you can change
the timeout with the SetCharacterIdle text script function), then the current loop
from the view will be played.<P>
On the right of the screen is a button called "Script Name". This
sets the name which the character will be referred to by in text scripts and
in conversation scripting. The difference from the main Name of the character
is that the script name may only contain letters A-Z.<P>
To set what happens when the player interacts with the character, click the
"Interaction" button. You will be presented with the (by now familiar)
interaction window. NOTE that, as with Inventory interactions, you may NOT
use display a local message or use Object commands. Basically, you need to display
global messages or use text scripts to handle character interactions.<P>
You can also set a talking view for the character. To set one, click the
"Talking view" button. If you set a talking view, then
that view will be used to animate the character while they are speaking. You
should generally have about 2-3 frames in each loop (the loops are used for
the same directions as in the main view).<P>
AGS allows you to export your characters to a file, and then import the file into a
different game - so you can share the same main character between games, or
create one for distribution on the internet. When you click the "Export char"
button, you will be asked what you want to call the file, so type a short
name and press ok. The entire character setup, and graphics, will be exported
to the file. This includes the character's walking and talking graphics.
Then, in the editor later (with any game loaded), click the "Import character"
button. The file selector appears, where you should find the CHA file which
you exported earlier. A new character slot will be created and all the settings imported.<P>
<I>NOTE: Because importing always creates a new slot, you cannot use it to
overwrite an existing character.</I><P>

<HR>
<A NAME="topic23"></A>
<H3>Conversations</H3>
While the old Sierra games were mainly based on action and not talking, the
Lucasarts games took the opposite approach.<P>
If you want to create a game with conversations where the player can choose
from a list of optional topics to talk about, you can now with the new Dialog
Editor. Go to the "Dialogs" pane.<P>
Conversations are made up of Topics. A "topic" is a list of choices from
which the player can choose. You may have up to 14 choices in a topic.
However, not all of them need be available to the player at the start of the
game - you can enable various options for conversation once the player has
said or done other things. For example, when you talk to the man in the demo
game, the first option is just "Hi". Once he has said this, however, a new
option becomes available.<P>
The Dialog Editor is quite self-explanitory - you view one topic at a time,
using the list on the left to choose the current topic. Then, you see
the list of options for the current topic on the right. Each option
has a couple of checkboxes to its right:
<UL>

<LI> The "Show" column specifies whether that option is available to the player
at the start of the game.
<LI> The "Say" column defines whether the character
says the option when the player clicks it. The default is on, but if you
want options describing the player's actions rather than the actual words,
you may want to turn this column off for that dialog.
</UL>

You control what happens when the player chooses an option by clicking the
"Edit script" button. This is NOT the same script language as the main text
scripts use - it is a much simplified and easier to understand language
specific to dialogs.<P>
Each topic has its own script file. When you click "Edit script" for the
first time on a topic, all you will see is a number of lines starting with
an '@' symbol. In the dialog script, these signify the starting points of
the script for each option. For example, when the player clicks on option 3,
the script will begin on the line following "@3". There is also a special
starting point, called "@S". This is run when the conversation starts, before
any choices are given to the player. This could be used to display a "Hello"
message or something similar.<P>
To display some speech, you begin the line with the character's SCRIPT NAME
(not full name), followed by a colon, then a space, and then what you want
them to say. For example, if my main character's script name is EGO, I would
write
<PRE>
ego: "I am very happy today because it's my birthday."
</PRE>
The character name is used by the system to choose the correct colour for
the text. You can have as many lines of speech like this as you want within
the script.<P>
You can also use the special character name "narrator", which
displays the text in the pop-up message box instead of as speech text; and the
alias "player", which will say it as the current player character - useful if
you don't know which character the player will be controlling when they speak
the conversation.<P>
If you just use <TT>...</TT> as the text for a character to say, the game will
pause briefly as if they are stopping to think, and nothing will be displayed.<P>
To signal the end of the script for this option, place a "return" command on
the last line of it. For example,
<PRE>
@1
ego: "Hello. How are you?"
narrator: The man looks you in the eye.
otherman: ...
otherman: "I'm fine."
return
</PRE>
This tells the program to go back and display the choices again to the player.
If you use "stop" instead of return, then the conversation is ended. You use
this after the player saying "Goodbye" or something similar.<P>
The dialog commands available are:
<UL>

<LI> <B>add-inv X</B><P>
  Adds inventory item X to the current player's inventory. This does the
  same thing as the AddInventory text script command, but is provided here
  because it is frequently used in dialogs.
  
<LI> <B>goto-dialog X</B><P>
  Switches the current topic to Topic X, and displays the current list of
  choices for that topic.
  
<LI> <B>new-room X</B><P>
  Takes the player to room X, and aborts the conversation. Since this does
  not allow you to specify co-ordinates, you may need to use some Player
  Enters Screen logic in the target screen to place the character properly.
  
<LI> <B>option-off X</B><P>
  Turns option X for the current topic off, meaning it won't be displayed in
  the list of choices next time.
  
<LI> <B>option-off-forever X</B><P>
  Turns option X off permanently. It will never again be displayed, not even
  if an "option-on" command is used.
  
<LI> <B>option-on X</B><P>
  Turns option X for the current topic on, including it in the list of choices
  to the player next time they are displayed.
  
<LI> <B>play-sound X</B><P>
  Plays sound effect SoundX.wav or SoundX.voc. You can use this to add speech
  to your game.
  
<LI> <B>return</B><P>
  Stops the script and returns to the list of choices.
  
<LI> <B>run-script X</B><P>
  Runs global text script function "dialog_request", with X passed as the
  single parameter. This allows you to do more advanced things in a dialog,
  such as adding an inventory item and so on. The "dialog_request" function
  should be placed in your game's global script file, as follows:
  <PRE>

  function dialog_request (int xvalue) {
    // your code here
  }
  </PRE>

  
<LI> <B>set-globalint GI VAL</B><P>
  Changes text script GlobalInt number GI to have the value VAL.
  This is equivalent to the SetGlobalInt text script command, and allows you
  to quickly set things without having to go through a run-script just to set
  an int value.
  
<LI> <B>set-speech-view NAME X</B><P>
  Changes character NAME's talking view to X. NAME must be their script name,
  and X is the number of the new talking view.
  Use this to easily change their facial expression during a conversation.
  
<LI> <B>stop</B><P>
  Stops the conversation and returns the player to the game.
</UL>

For an example of a dialog script, load the demo game into the editor and
look at the script for its topic 0.<P>

<HR>
<A NAME="topic24"></A>
<H3>Game options</H3>
On the Game Settings pane you may have noticed quite a lot of check-boxes.
These set gamewide options, and mean the following things.
Note that some things listed here are explained later in the documentation,
so if you don't understand one of the items in this list, come back to it
later:
<UL>

<LI> <B>Debug Mode</B> - whether the debug keys are active. When debug mode is on,
you can press Ctrl-X to teleport to any room, Ctrl-S to give all inventory
items, Ctrl-A to display walls on the screen, and Ctrl-D to display
statistics about the current room. When debug mode is off, these do nothing.
(More specifically, the text script Debug() function is disabled).
<LI> <B>Play sound on score</B> - controls whether a sound effect is played when
the player scores points. If so, you can set the sound number, which will
play SOUNDx.WAV (or SOUNDx.MP3), where X is the number you set.
<LI> <B>Walk to hotspot in Look mode</B> - controls whether the player will walk
to "walk-to" spots when the player looks at the hotspot. Normally he only
walks on use, speak and use-inv. 
<LI> <B>Conversation on GUI</B> - controls where the player's options for dialog are
displayed. If this option is not checked, then in a conversation, the options
will be displayed at the bottom of the screen. If you check this box, then
instead the options will be displayed on the GUI you specify.
<LI> <B>Use "anti-glide" mode</B> - you may notice that, as the character walks, it
can seem as if he is gliding, especially if you have a slow animation speed
setting. When anti-glide mode is on, the man's position is only updated
when the frame of animation changes. You will need to increase each
character's walking speed if you use this option.
<LI> <B>Text windows use GUI</B> - allows you to customize the standard text window
appearance in the game, using the specified interface element. See <A HREF="ags15.htm#TextWin">here</A>
for more information.
<LI> <B>Pixel gap between options</B> - defines the gap between the options displayed
to the player in a conversation. Normally this is 0, which means the
options are right below each other. Changing it to 1 or 2 can make the
option display look less cluttered; it's a matter of personal preference.
<LI> <B>Player can't skip speech text</B> - prevents the player clicking the mouse
to skip conversation text. They can still use the ESC key to skip the text,
however.
<LI> <B>Buttons off when disabled</B> - specifies that, when an interface button is
disabled, then it is simply not displayed at all. The default action is to
"grey-out" the button by putting alternating black pixels on it.
<LI> <B>Always display as speech</B> - if you select this option, then all normal
text in the game will be displayed above the main character's head as speech
text, much like the way the Lucasarts games worked. If this option is not
checked, then normal text appears in a pop-up message box, like the way that
the Sierra games worked.
<LI> <B>Use Sierra-style speech window</B> - normally, when a character talks, the
speech text is displayed above their head in the game, and the character's
talking view is used to animate the actual character. However, if you set
this option then the talking view is used to display an animating graphic
seperately in the top-left of the screen, with the text on the right of it.
This is similar to the way that Space Quest 5, King's Quest 6 and other
later Sierra games worked. You can also cycle to another option, "Sierra-
style with background", which is the same except a text window is drawn
behind the speech text to make it easier to read.
<LI> <B>Pixel-perfect click detection</B> - normally, when the player clicks the
mouse, AGS just checks to see if the cursor is within the rectangular area
of each character and object on the screen. However, if this option is
checked, then it will further check whether the player clicked on an actual
pixel of the object graphic, or whether it was a transparent part of the
graphic. If this option is enabled and they click on a transparent pixel,
then the hotspot behind the object will be activated instead.
NOTE: This option does not currently work correctly with scaled characters.
<LI> <B>No special walk-mode processing</B> - normally, when you click the mouse in
the Walk mode, the main character will move to where you clicked. However,
if you want to create a game all viewed from a 1st-person perspective, and
so don't have a main character, then selecting this option allows you to
use the Walk mode for other things. If selected, then "Character stands on
hotspot" events are instead triggered by clicking the Walk cursor on the
hotspot.
<LI> <B>Use 320x240 letter-box mode</B> - normally, the available screen resolutions
are 320x200 and 640x400; however, if you select this mode then 320x240 and
 640x480 will be used instead. The screeen will be "letter-boxed" - that is,
there will be a black border top and bottom. You may want to use this option
if you need a square pixel aspect ratio for your graphics.
When this option is enabled, any 640x480 rooms you have will be expanded
to full-screen instead of scrolling.
<LI> <B>Don't modify inventory cursor</B> - normally, when you select an inventory
item the mouse cursor is changed into that item. However, if you want to
create a Lucasarts-style game (where the inventory cursor is always a
cross-hair), check this option and it won't be changed.
<LI> <B>Don't automatically lose inventory</B> - normally, when a "Use inventory"
interaction is run (and Data is not 99), the player loses the inventory
item. However, if you set this option then they will NEVER lose any
inventory items automatically - you must specifically use a "Lose inventory"
command when you want them to lose it.
<LI> <B>Don't scale up fonts</B> - normally, if the player chooses 640x400, then
the fonts will be scaled up to match. However, if you have drawn your fonts
for the 640x400 resolution, use this option to stop them being stretched.
<LI> <B>Split resource files</B> - see <A HREF="ags16.htm#SplitRes">here</A> for information.
<LI> <B>Characters turn before walking</B> - specifies that when a character starts
to walk somewhere, it will first turn round to face the correct direction
using available animation frames, rather than just suddenly switching to
face the right way.
<LI> <B>Handle inventory clicks in script</B> - normally, if the player clicks on
an inventory item, it is processed internally by AGS. However, if you enable this
option, then clicking an inventory item will call your <TT>on_mouse_click</TT>  function 
with LEFTINV or RIGHTINV, and you then need to process it yourself. You can use the
<TT>game.inv_activated</TT> variable to find out what they clicked on.<P>
<B>NOTE:</B> this only works with custom Inventory GUI controls, not with the built-in
InventoryScreen sierra-style window.
<LI> <B>Enable mouse wheel support</B> - if enabled, on_mouse_click can be called with
the values WHEELNORTH and WHEELSOUTH, which signify the user scrolling their mouse
wheel north or south, respectively.<P>
<B>NOTE:</B> Not all mice have mouse wheels, and the DOS engine does not support the
mouse wheel at all. Therefore, your game should never require the mouse wheel in order to
be playable - it should only be used as a handy extra.
</UL>
<P>

<HR>
<A NAME="topic25"></A>
<H3>Cursors</H3>
The Cursors mode of the editor shows you the current mouse cursor modes available in
the game. Each cursor mode performs a different action within the game.<P>
The "Standard cursor mode" checkbox tells AGS that this is a 'normal' cursor mode - ie.
using this cursor will generate an interaction on whatever is clicked on as usual. This
mode applies to the standard Walk, Look, Interact and Talk modes, but you can create
others too. Do not tick it for the Use Inventory mode, since this is a special mode.<P>
The "Animate" checkbox allows you to specify that the mouse cursor will animate while it
is on the screen. Choose a view number, it will use loop 0 of that view. You can make it
animate only when over something (hotspot, object or character) by checking the appropriate box.
The "Only when the mouse is moving" box allows you to do a QFG4-style cursor, where it only
animates while the player is moving it around.<P>
Three of the cursor modes are hard-coded special meanings into AGS:
<UL>

<LI> <B>Mode 4 (Use Inventory)</B>. This is special because the game decides whether to
allow its use or not, depending on whether the player has an active inventory item
selected.
<LI> <B>Mode 6 (Pointer)</B>. This cursor is used whenever a modal dialog is displayed
(ie. a GUI that pauses the game). Normally this is a standard arrow pointer.
<LI> <B>Mode 7 (Wait)</B>. This cursor is used whenever the player cannot control the
action, for example during a scripted cutscene. For a lucasarts-style game where the cursor
disappears completely in this state, simply import a blank graphic over the wait cursor.
</UL>
<P>
For the standard modes,
<UL>

<LI> Mode 0 will cause the player to walk to the mouse pointer location when clicked.
<LI> Mode 1 will run the "Look at" interaction.
<LI> Mode 2 will run the "Interact with" interaction.
<LI> Mode 3 will run the "Speak to" interaction.
<LI> Mode 5 will run the "Pick up" interaction.
</UL>
<P>
Modes 8 and 9 are available for any other uses you may have, but they will only
trigger the "Any click" interactions.<P>

<HR>
<A NAME="topic26"></A>
<H3>Fonts</H3>
Adventure Game Studio allows you to replace the default font and to add your
own. You can use both TrueType (TTF) and SCI fonts (Sierra's font format).
SCI fonts can be created in two ways:
<UL>

<LI> Extract the font from a Sierra game, using the SCI Decoder program
available on the internet.
<LI> Create your own font and save it in SCI Font format, using the
<A HREF="http://scigraphicstudio.cjb.net">SCI Graphic Studio program</A>.
</UL>

There are also some fonts available on the 
<A HREF="http://www.adventuregamestudio.co.uk/fonts">AGS website</A>.<P>
Note that SCI fonts are faster to render than TTF fonts, and so may give your game
a speed advantage. It's preferable to use a SCI font if you can.<P>
Go to the "Fonts" pane. Here you can see all the current fonts
by using the list on the left. You can create a new font
slot by clicking the "New font" button. To import your font into the
current slot, click the "Import font" button.<P>
<I>NOTE:</I> If you go to your Windows Fonts folder, you will not be able to select
any fonts to import, since double-clicking them will open them up in the Windows Font
Viewer. Unfortunately there is nothing I can do about this, you must either type the
filename in manually, or copy the font to another folder and import it from there.<P>
<B>IMPORTANT:</B> The fonts which will be used for speech should generally also have
an outline font. You can see this with the default fonts, font 1 is the speech
font, which is drawn in the character's colour, and font 2 is the outline font,
which is drawn in black behind the speech in the game. This helps avoid any
colour clashes between the font and the background.
To set a font to have an outline font, select the main (coloured) font as the
current font, then enter the font number of the outline font.<P>
<I>NOTE:</I> Font 0 is used as the normal text font, and font 1 is used as the
speech font. To use any additional fonts, the text script functions SetNormalFont
and SetSpeechFont can be used at runtime.<P>

</BODY></HTML>
