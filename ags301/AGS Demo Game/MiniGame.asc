//===================================================================
// *** AGS MODULE SCRIPT ***
//
// Module:  MiniGame
//
// Author:  Richard Jafrate (RickJ)
//
// Require: AGS 2.72
//
// 1 Abstract
// AGS  allows one game to activate another game via the RunAGSGame()
// script function.  This  is useful in implementing arcade sequences
// and other game-within-a-game type things. These can be called Mini
// Games  and  designed  to be run stand-alone or from within another 
// game. This module provides an easy method of calling and returning 
// from mini games.  
//
// 2 Description
// What does  this  module do that RunAGSGame doesn't do? If you were 
// just going to activate one games from the very beginning each time
// then this module wouldn't be necessary.  However, many times it is
// desireable to  call  a mini game and then when the mini game exits 
// retore the player back to his previous game and game state. 
// 
// This  module  provides  call/return,  data passing,  and save slot
// management mechanisms in the form of straight  forward and easy to 
// use  functions.  Examples illustrating the use of these  functions  
// are presented in subsequent sections of this document. 
//
// 2.1 Game Requirements 
// The main game and each mini game it calls must meet the following 
// requirements for this module to function properly. The first five
// items  are  required by the RunAGSGame() script function (see the 
// AGS manual for more information about RunAGSGAme(). The remaining 
// items are required by this module.
// 
//	o AGS Version    - all games are compiled with same AGS version
// o Color Depth    - all games have the same color depth 
// o Resolution     - all games have same screen resolution
// o Game Files     - all game files are in the same folder
//	o Module Version - all games include same version of MiniGame
//	o Black Screen   - all games have room 0 be a black screen
//
//	AGS Version - The  game  you want to launch must have been created
// with  the  same  point-version of AGS as the one you are launching 
// it from.  (version 2.xy - the X must be the same  version  between 
// the two games).
//
// Color Depth - The  game  you run will be loaded at the same colour 
// depth as the current game. If you mismatch colour depth some nasty
// results will occur.
//
// Resolution - The game you run will be loaded at the same resolution 
// as the current game.  
//
// Game Files - The game files (i.e. maingame.exe, minigame.ags, etc)
// must all be in the same folder.  RunAGSGame will not accept a path 
// specification.
//
//	Module Version - The main game  and all mini games that are called
// must include the same version of the MiniGame module.Although this
// should be obvious, it is sometimes easy to overlook.
//
//	o Black Screen - The main game and all mini games must have room 0
// be empty with a black  background.  Due to the manner in which AGS
// starts up a game and the  way  in which RestoreGameSlot() operates,
// an unavoidable double screen transition occurs when returning from
// a  called  mini game.  To mask this quirky behaviour, the MiniGame 
// module, will  force  the  game  to start  with a black screen when 
// returning from a mini game.  Although this solution is not optimal 
// it is the  best that can be done  at the time of this writing (AGS 
// Version 2.72) and it seems to work pretty well.
//
// 2.2 Passing Data
// When a mini game is called it is often desired to pass data to it.
// For example, in some situations it would be desireable to use the 
// player's  money  to  make wagers in the mini game and then return 
// the resulting winings or losses.  The MiniGame module uses a data 
// dictionary to  pass  data to and from mini games. Each data point 
// is associated with a unique name.  Data can be either a string or  
// an integer and is accessed through the following functions.
//
//    MiniGame.sSet(String name, string value)
//    MiniGame.iSet(String name, int value)
//    MiniGame.sGet(String name)
//    MiniGame.iGet(String name)
//
// 2.3 Calling a Mini Game
// Mini games are called  using the MiniGame.Call() function as shown
// below. The parameter FILENAME specifies the  name of the game file 
// to be called. It may or may not include file extensions of ".exe" 
// or ".ags". 
//
//    // Call a mini game (from a room script or the global script)
//    miniGame.iSet("Money",player.InventoryQuanity[iMone.ID]);
//    MiniGame.Call("minigame.exe"); 
// 
// In this example, the amount of money in the player's inventory is
// passed to the mini game. The amount of money is stored in the data
// dictionary with a key of "Money". Next  "minigame.exe" is  called,
// when it  terminates  it  will  return to "mainagame.exe" and if it 
// supports "game save " operations it will use save slots 50-69.
//
// 2.4 Starting a Mini Game
// The  mini  game will be loaded and then started as a result of the 
// above MiniGame.Call(). The next thing to do is to determine if the
// game has been started from the operating  system or if it has been
// called. The function MiniGame.IsCalled() provids for this. A value
// of  true is returned if called from another game and returns false 
// otherwise.  This function is normally used in Global Script's game
// start event handler, game_start(). 
//
//    // Mini Game Global Script
//    function game_start() {
//
//       // Mini Game startup script
//    	if (MiniGame.IsCalled()) {         // Read data dictionary 
// 			Money = MiniGame.iGet("Money"); // Passed from caller 
//    	}
//    	else {                             // Run from OS
// 			Money = 10;                     // Give default amount 
//    	}
//    }
//
// In the example above a global variable, Money, is set to the value
// stored in the data dictionary  under a key "Money" if the game has
// been called.  It is  set  to a value of 10 if the game was started 
// from the OS.
//
// 2.5 Quitting a Mini Game 
// If  the  mini  game has been called then data must be saved in the 
// data dictionary and the calling game re-activated. If the game has 
// been run directly from the OS it can simply quit in the normal way 
// using the QuitGame() function.  The preferred method of doing this  
// is to create a global function in the global script similar to the 
// example below.  This  function is then called from any interaction 
// functions designated as game exit or quit.
// 
//    // Mini Game Global Script
//		function ExitGame(int ask_first) {
//       MiniGame.iSet("Money",Money);      // Save data and ...
// 	   MiniGame.Return(ask_first);        // return to caller 
//    }
//
// In  the  example above  the global variable Money is  saved in the
// data  dictionary  via  MiniGame.iSet(). Next the MiniGame.Return()
// function  determines  if the  game  was  called  or  run  from the 
// operating system. If the game was called then the  calling game is 
// re-activated  and  the data in the data  dictionary is passed back. 
// If the game was run from the operating system then it's terminated 
// normally using the AGS QuitGame() function.
//
// Notice  that  it  is  not necessary to explicitly name the calling 
// game in the return function.  The name was passed in when the mini 
// game  was  originally  called. The  return function just uses that 
// name.
//
// 2.4 Saving a Mini Game 
// The  MiniGame  module makes a call to the Game.SetSaveDirectory().
// The specified directory name is formed by extracting the extension
// from the Game.  FileName string.If this extraction does not result
// in a useable  string then "SaveGames" is used instead. The success
// or  failure of  the Game.SetSaveDirectory() call should be checked 
// before executing SaveGameSlot(),RestoreGameSlot(),DeleteSavSlot(),
// as follows.. 
//
//    // Save the Game
//    if (MiniGame.SaveAllowed()) {
//       SaveGameSlot(slot);
//    }
//    else {
//       Display("Error saving game, save directory not found");
//    }
//
// Perhaps a better  approach is to simply  remove the Save functions
// from the Gui at start up using Gui control prperties.  
//
//    // Remove save functions if not allowed
//    if (!MiniGame.SaveAllowed()) {
//       gOptionsSave.Visible = false;    // Disable the Save button
//       gOptionsRestore.Visible = false; // Disable the Load button
//    }
//
// 2.5 Returning from a Mini Game
// When  returning  from a mini game, any data it passes back must be
// read from  the data dictionary. This is done with a series of "if,
// else-if" statements  in  the  Global Script's repeatedly_execute()
// event handler function. The MiniGame.IsReturningFrom() function is 
// used in the  conditional expression to determine which if any mini 
// game has returned. 
//	
//    // Main Game Global or Room Script
//    function repeatedly_execute() {
//
//       // Script to return from mini game
//       if (MiniGame.IsReturningFrom("minigame.exe")) {
// 		   // Read data dictionary returned by mini game
//          player.InventoryQuantity[iMone.Id] = MiniGame.iGet("Money");
//       }
//       else if (MiniGame.IsReturningFrom("anotherminigame.exe")) {
// 		   // Read data dictionary returned by another mini game
//       }
//    }
//
// Any  data returned by the mini game can be retrieved and copied to
// the appropiate  game variables  using  the MiniGame.iGet() and the
// MiniGame.sGet() functions as shown above.
// 
// Note:  THIS MUST BE DONE IN THE REPEATEDLY EXECUTE HANDLER and not
// in the start game event handler because when returning from a mini
// game a RestoreGameSlot()  operation is  performed to return to the
// point in the game from where the mini game was launched. This will
// overwrite  all game variables, so the data dictionary must be read 
// after this occurs.  The  MiniGame.IsReturningFrom()  function will 
// return true only after the restore opertion is complete.  
// 
// 2.6 Known Issues
// The following issues are known to the author, who can be contacted 
// by posting on the AGS tech forum or by sending PM correspondance.
//
// 2.6.1 Double Screen Transitions
// As of this writing it is not possible to execute RestoreGameSlot()
// before the first screen is displayed.  This  was briefly mentioned
// above.  So instead of returning to the  screen from which the mini 
// game was launched directly, it returns to  ROOM0 whoose background 
// is  momentarily  displayed  before  the  desired screen is finally 
// displayed  as a result of RestoreGameSlot()'s  execution.  To make 
// this less noticable, ROOM0's background image is a single color of
// black and contains no script or interactions.
//    
// So when running directly from the OS ROOM0 is skipped and the game 
// starts in another room as designated by the player character. When
// the game starts after returning from a call the GUI and mouse  are 
// turned off and the player is left waiting in a black room.When the 
// RestoreGameSlot() executes  the palyer is transported  to the room 
// from where he called the mini game. 
// 
// 2.6.2 Nested Calls
// Nested MiniGame.Call()s are  supported but have not been thourghly
// tested as of this release.  Should  someone try to do nested calls 
// it is likely that it would work and that some issues would come to 
// light.
//
// 3 API Documentation
// A summary of this module's functions an Properties is given below.  .
//
// 3.1 Functions Used in the Calling Game
// There are two functions specifically for use in a game that calls
// a mini game.  
//
// static function MiniGame::Call(String filename, int saveslot)
// This  function  actually calls the mini game. The mini game's game
// file and  the  first save slot it can use must be specified.  This 
// function can be used anywhere in the game.
//
// static function MiniGame::IsReturningFrom(String filename)
// This function is used to determine if a mini game has returned and
// to enable the collection of data that may have been returned. This 
// function must be executed from the repeatedly_execute() handler in
// the global or room script and is used in conjunction with the Get/
// Set functions described below.
//
// 3.2 Functions Used in the Called Game
// There  are  two  functions specifically for use in games that have
// been called.
//
// static function MiniGame::Return(int ask_first)
// This function is used to exit the game.   If the game has been run
// from the OS then this function will simply call the AGS QuitGame()
// function to exit as any AGS game normally would.  If thew game has 
// been called  from  another game then this function will return the
// player to the original game and in it's original state.
// 
// static function MiniGame::IsCalled()
// This function  is used to collect any data passed from the calling 
// game. This function is normally in the game_start() handler in the
// global script and is used in conjunction with the Get/Set functions
// described below.
//
// 3.3 Data Passing Functions 
// The following functions are used to pass data to/from a mini game.
// Each data item consists of a name value pair. This data is written
// to and read from a temporary file.    
//
// static function MiniGame::iGet(String name)
// This  function  returns  the  interger  value  associated with the
// specified name.
//
// static function MiniGame::iSet(String name, int value)
// This  function sets the specified name equal to the given interger
// value.
//
// static String   MiniGame::sGet(String name)
// This  function  returns  the  string  value  associated  with  the
// specified name.
//
// static function MiniGame::sSet(String name, String value)
// This  function  sets  the specified name equal to the given string
// value.
//
// static function MiniGame::SaveSlot(int slot)
// The main and mini games share the same save slots. When mini games
// are  called  they  are given the first save slot position they may 
// use.  
// 
// 4 Revision History
// 00-Dec-06 RickJ,      V1.00 release
// 20-Dec-06 RickJ,      Implement save game directory mechanism
// 23-Nov-06 RickJ,      remove return screen transition code from maingame
// 23-Nov-06 RickJ,      add return screen transition code to module
// 23-Nov-06 RickJ,      obsolete MiniGame.Initialize
// 23-Nov-06 RickJ,      use Game.FileName instead of Initialize
// 21-Feb-06 RickJ,      B1.03 release
// 21-Feb-06 RickJ,      add call stack for multiple call levels
// 21-Feb-06 RickJ,      rework repeatedly_execute() state machines
// 06-Feb-12 RickJ,      B1.02 release
// 06-Feb-12 RickJ,      compliance with String
// 05-Jun-10 RickJ,      B1.01 release
// 05-Jun-10 RickJ,      refine/simplify api functions, documentation
// 05-Apr-16 RickJ,      B1.00 release
// 05-Apr-16 RickJ,      created original version
//
// 4.1 ToDo
// x   
// 00% Update mini-games 
//     Module Export
//     Module Template
//     Module Test
//     DemoQuest
//     DemoCycle
//     DemoSlot
//     Agi
//     AgiPnc 
//     Sci0
//     SciPnc 
//     VerbCoin
//     Lucas 
//
// 5 License
// This  module  is  free  software;  you  can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as  published  by the Free Software Foundation; either version 2.1 
// of the License, or any later version.
//
// This module is distributed in the hope that it will be useful, but
// WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of 
// MERCHANTABILITY or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You  should  have received a copy of the GNU Lesser General Public
// License along with this library; if not,write to the Free Software
// Foundation, Inc, 59 Temple Place, Suite 330, Boston, MA 02111-1307  
// USA.
// 
// Copyright (C) 2005  Richard Jafrate
//-------------------------------------------------------------------

//-------------------------------------------------------------------
// Configuration Constants
//-------------------------------------------------------------------

//-------------------------------------------------------------------
// Static Variables 
//-------------------------------------------------------------------
struct stack {
	String	MainFile;
	int		MainRoom;
	int		MainX;
	int		MainY;
	int		MainZ;
	String	MiniFile;
	int		MiniStatus;
};

stack 		CallStack[MiniGame_STACKSIZE];
int 			cs;						// Stack pointer
int 			top;						// Top of stack

String 		IsReturningFrom_Buff;
// int 			FirstSavslot=0;
int 			SaveIsAllowed;
String 		MainFile;				// Calling game

String 		DbName[MiniGame_BUFSIZE];
String 		DbValue[MiniGame_BUFSIZE];

int 			State;
int 			Step;


//-------------------------------------------------------------------
// Utility Functions
//-------------------------------------------------------------------
//-------------------------------------------------------------------
   function file_exists(String filename) {
//
// This function  checks to see if the specified file exists.  If the 
// file exists ture is returned, otherwise false is returned. 
//-------------------------------------------------------------------
	int 	status;
	File *fp;
	
	fp = File.Open(filename, eFileRead);
	if (fp==null) status = false;
	else {
		status = true;
		fp.Close();
	}
	return status;
}

//-------------------------------------------------------------------
   String find_file(String filename) {
//
// This function  checks to see if the specified file exists.  If the 
// file exists ture is returned, otherwise false is returned. 
//-------------------------------------------------------------------
	String	FileName;

	// Sesarch for filename, filename.exe, filename.ags
	if (file_exists(filename)) FileName = filename;
	else if (file_exists(String.Format("%s.exe",filename))) FileName = String.Format("%s.exe",filename);
	else if (file_exists(String.Format("%s.ags",filename))) FileName = String.Format("%s.ags",filename);
	else FileName = "";
	return FileName;
}

//-------------------------------------------------------------------
   function clear_stack_element(int i) {
//
// This function clears the data in the specified stack element.
//-------------------------------------------------------------------
	// Pop data of the stack 
	CallStack[i].MainFile = "";
	CallStack[i].MainRoom = -1;
	CallStack[i].MainX    = -1;
	CallStack[i].MainY    = -1;
	CallStack[i].MainZ    = -1;
	CallStack[i].MiniFile = "";
	CallStack[i].MiniStatus = -1;
}

//-------------------------------------------------------------------
   function clear_buf() {
//
// This function clears the memory buffer as well as the names of the 
// mini and main game.  
//-------------------------------------------------------------------
	int i;

	// Initialize call stack
	i = 0;
	while (i<MiniGame_STACKSIZE) {
		clear_stack_element(i);
		i++;
	}
	top = 998 - MiniGame_STACKSIZE;	// Top of stack

	// Clear data buffer
	i=0;
	while (i<MiniGame_BUFSIZE) {
		DbName[i] = "";
		DbValue[i] = "";
		i++;
	}
	return eMiniGame_Ok;
}

//-------------------------------------------------------------------
   function set_buf(String name, String value) {
//
// This  function  writes a name-value pair to the memory buffer.  If
// the name already exists then  the  value is modified.  If the name 
// does not exist then the pair is added to the end of the buffer.
//-------------------------------------------------------------------
	int i, status;
	
	// Search for variable and modify it's value
	status = false;
	i = 0;
	while ((i<MiniGame_BUFSIZE)&&(status==false)) {
		if ((DbName[i].CompareTo(name,true)==0)||(DbName[i].CompareTo("",true)==0)) {
			DbName[i] = name;
			DbValue[i] = value;
			status = true;
		}
		i++;
	}
	return status;
}

//-------------------------------------------------------------------
   String get_buf(String name) {
//
// This function returns a string containing the value associated with
// the specified name.  If NAME doen't exist a null string is returned. 
//-------------------------------------------------------------------
	int i=0;
	
	// Search for variable and return it's value
	while (i<MiniGame_BUFSIZE){
		if (DbName[i]==name) return DbValue[i];
		i++;
	}
	return null;
}

//-------------------------------------------------------------------
   function write_data(String mininame, int ministatus) {
//
// This function copies the memory buffer to a file named miniame,dat.
// Since  only  one  mini  game can be called at a time then the file 
// name can always be the same.
//-------------------------------------------------------------------
	File	*output;
	int	i;
	int	status;
	
	// Open interface file and write data to it
	output = File.Open("minigame.dat", eFileWrite);
	if (output==null)				// Open file
		status = false;
	else {							// Write data
		status = true;

		// Push return info onto call stack
		CallStack[cs].MainFile = MainFile;
		CallStack[cs].MainRoom = player.Room;
		CallStack[cs].MainX    = player.x;
		CallStack[cs].MainY    = player.y;
		CallStack[cs].MainZ    = player.z;
		CallStack[cs].MiniFile = mininame;
		CallStack[cs].MiniStatus = ministatus;
		
		// Write call stack to data file
		i = 0;
		while (i<MiniGame_STACKSIZE) {
			output.WriteString(CallStack[i].MainFile);
			output.WriteInt(CallStack[i].MainRoom);
			output.WriteInt(CallStack[i].MainX);
			output.WriteInt(CallStack[i].MainY);
			output.WriteInt(CallStack[i].MainZ);
			output.WriteString(CallStack[i].MiniFile);
			output.WriteInt(CallStack[i].MiniStatus);
			i++;
		}

		// Write data parameters to data file
		i=0;
		while (i<MiniGame_BUFSIZE) {
			output.WriteString(DbName[i]);
			output.WriteString(DbValue[i]);
			i++;
		}
		output.Close();
	}
	return status;
}

//-------------------------------------------------------------------
   function read_data() {
//
// This function reads the  file miniame,dat and copies it's contents
// to the memory buffer.
//-------------------------------------------------------------------
	File	*input;
	int	i;
	int	status;
	
	// Open interface file and write data to it
	input = File.Open("MiniGame.dat", eFileRead);
	if (input==null)				// Open file
		status = false;
	else {							// Read data
		status = true;
		clear_buf();

		// Read call stack from data file
		i = 0;
		while (i<MiniGame_STACKSIZE) {
			CallStack[i].MainFile = input.ReadStringBack();
			CallStack[i].MainRoom = input.ReadInt();
			CallStack[i].MainX	 = input.ReadInt();
			CallStack[i].MainY	 = input.ReadInt();
			CallStack[i].MainZ	 = input.ReadInt();
			CallStack[i].MiniFile = input.ReadStringBack();
			CallStack[i].MiniStatus = input.ReadInt();
			i++;
		}

		// Read data parameters from data file
		i=0;
		while (i<MiniGame_BUFSIZE) {
			DbName[i] = input.ReadStringBack();
			DbValue[i] = input.ReadStringBack();
			i++;
		}
		input.Close();
	}
	return status;
}
		

//===================================================================
// Member Functions
//-------------------------------------------------------------------
//===================================================================
   static function MiniGame::Call(String filename) {
//
// This function calls a mini game. The file containing the mini game 
// must be in the same directory as the main game.  It must also have 
// the same resolution and color depth as the calling game.  The file 
// name of the mini game is  given by  the FILENAME parameter.
//
// Save slots are numbered  from 0 to 999.  The game restart function 
// uses slot 999 so it is reserved.The call stack uses save slots 998
// to 998-MiniGame_STACKSIZE. Since seperate directories are now used
// for save games the call stack will be distributed among these save
// directores.
//
// In  debug  mode error messages are displayed if the specified game  
// files do not exist or if  the call  operation  cannot be completed. 
// When debug is  disabled these  messages are surpressed. In  either 
// case the following error status is returned as follows.
//
//    Return:
//    eMiniGame_Ok               - call complete successfully 
//    eMiniGame_MiniFilenameErr  - game file doesn't exist
// 	eMiniGame_MiniGameDatErr   - can't write to minigame.dat file
//-------------------------------------------------------------------
	int 		status;
	String 	gamefile;
	
	Display("There would be a mini-game here, but this version of the demo does not include them.");
	return eMiniGame_MiniFilenameErr;
	
	// Validate minigame file name
	gamefile = find_file(filename);
	if (gamefile=="") {
		if (game.debug_mode) Display("*** Err-MiniGame-Call, game file, %s, does not exist.",filename);
		status = eMiniGame_MiniFilenameErr;
	}
	else {
		if (cs>=MiniGame_STACKSIZE) {
			if (game.debug_mode) Display("*** Err-MiniGame-Call, call stack overflow, max call depth is %d.",MiniGame_STACKSIZE);
			status = eMiniGame_StackOverflowErr;
		}
		else {
//			if (write_data(gamefile, saveslot)==eMiniGame_Ok) {
			if (write_data(gamefile,1)==eMiniGame_Ok) {
				State = eMiniGame_Call;		// Code in repeatedly_execute() responds to 'State' changes
				status = eMiniGame_Ok;
			}
			else {
				if (game.debug_mode) Display("*** Err-MiniGame-Call, can't write to minigame.dat");
				status = eMiniGame_MiniGameDatErr;
			}
		}
	}
	return status;
}

//===================================================================
   static function MiniGame::IsReturningFrom(String filename) {
//
// This function returns true if the game is starting up as result or
// returning from a previously called mini game. This fuinction is to
// be  called  from  the repeatedly_execute() function of the calling 
// game to know when  to  copy  data  from  the memory buffer to game 
// variables.
//
//    Return:
// 	true								- just returned from specified game
// 	false								- did not return from specified game
//-------------------------------------------------------------------
	int 		status;
	
	if ((CallStack[cs].MiniStatus!=-1)&&(State==eMiniGame_Done)) {
		// Check if returning from this mini game
		if (CallStack[cs].MiniFile==find_file(filename)) {	
			CallStack[cs].MiniStatus = -1;
			CallStack[cs].MiniFile = "";
			status = true;
		}
		// Since this will be executing in repeatedly_execute() 
		// lets not keep doing this. If we check the same filename 
		// twice it means that we have returned from a game but
		// it isn't being checked for via IsReturningFrom(). So in 
		// this case we will stop looking.
		else if (IsReturningFrom_Buff=="") {
			IsReturningFrom_Buff = filename;
		}
		else if (IsReturningFrom_Buff==filename) {
			CallStack[cs].MiniStatus = -1;
			CallStack[cs].MiniFile = "";
			IsReturningFrom_Buff = "";
		}
		else status = false;
	}
	return status;
}

//===================================================================
   static function MiniGame::Return(int ask_first) {
//
// This function is called from any interaction or custom function to 
// return to the calling game or to quit if the game was started from 
// the operating system.
//-------------------------------------------------------------------
	if (cs>0) {									// Game was called
		State = eMiniGame_Return;			// RunAGSGame() in repeatedly_execute() below
	}
	else {
		QuitGame(ask_first);					// Quit normally
	}
}
	
//===================================================================
   static function MiniGame::IsCalled() {
//
// This function returns true if the game was started from the OS and
// returns false if it was called by another game or is returning from 
// a called game.
//
//    Return:
// 	false								- game was started directly from OS
// 	true								- game was called from another game
//-------------------------------------------------------------------
	return cs!=0;
}

//===================================================================
   static function MiniGame::SaveAllowed() {
//
// This  function returns true if save games are allowed and false if 
// they are not. If a save game directory was successfully created on 
// game startup then save games are allowed.  Otherwise, the main and
// mini  games are  sharing the same save game space and so conflicts
// will occur.
//-------------------------------------------------------------------
	return SaveIsAllowed;
}

//===================================================================
   static function MiniGame::iGet(String name) {
//
// This function returns the integer value corresponding to NAME.  If
// NAME doesn't exist an error mesage is generated.
//-------------------------------------------------------------------
	String	buf="";
	
	buf = get_buf(name);
	if (buf==null) {
 	   Display("*** Err-MiniGame-iGet, variable, %s, not found",name);
		return 0;
	}
	else {
		return buf.AsInt; 
	}
}

//===================================================================
   static function MiniGame::iSet(String name, int value) {
//
// This function modifies value corresponding to NAME as specified by
// the VALUE integer parameter.  If NAME  doesn't exist the name-vale 
// pair is appended to the end of the memory  buffer.  If there is no
// more room and error message is generated. 
//-------------------------------------------------------------------
	if (set_buf(name,String.Format("%d",value))==false) {
 	   Display("*** Err-MiniGame-iSet, maximum number of variables, %d, exceeded",MiniGame_BUFSIZE);
	}
}

//===================================================================
   static String MiniGame::sGet(String name) {
//
// This function returns the string value corresponding to NAME.  If
// NAME doesn't exist an error mesage is generated and a null string 
// is returned.
//-------------------------------------------------------------------
	String	buf="";
	
	buf = get_buf(name);
	if (buf==null) {
 	   Display("*** Err-MiniGame-sGet, variable, %s, not found",name);
	}
	return buf;
}

//===================================================================
   static function MiniGame::sSet(String name, String value) {
//
// This function modifies value corresponding to NAME as specified by
// the VALUE string  parameter.  If NAME  doesn't exist the name-vale 
// pair is appended to the end of the memory  buffer.  If there is no
// more room and error message is generated. 
//-------------------------------------------------------------------
	if (set_buf(name,value)==false) {
 	   Display("*** Err-MiniGame-sSet, maximum number of variables, %d, exceeded",MiniGame_BUFSIZE);
	}
}


//===================================================================
// Interaction Functions
//
// The  functions in this section provide supporting services for the
// mini game call/return mechanism and are called by the game engine.
// They are not called from from any scripts.
//-------------------------------------------------------------------

//===================================================================
   function game_start() {
//
// This function  is executed by the game engine when the game begins 
// running. The global variable game.previous_game_data contains data
// passed by the RunAGSGame() function.It determines how this game is 
// to be started up.  It's value is interpreted as follows:
//
//   =0 - Started from OS
//   <0 - Returning from a mini game
//   >0 - Mini game is being called
//-------------------------------------------------------------------
	int		i;
	int 		ix;
	String 	savdir, name;
	
	// Initialize some things
	clear_buf();
	IsReturningFrom_Buff = "";

	// Setup save game directory 
	savdir = Game.FileName;
	ix = savdir.Contains(".");
	if (ix>0) savdir = savdir.Substring(0,ix);
	else savdir = "SaveGames";
	SaveIsAllowed = Game.SetSaveGameDirectory(savdir);
	
	// Started Directly from Operating System
	if (game.previous_game_data==0) {				
		cs = 0;		
		MainFile = Game.FileName;
		write_data("", -1);
		State = eMiniGame_Done;
	}
	// Returning from MiniGame
	else if (game.previous_game_data<0) {			
		read_data();										
		cs = -(1000 + game.previous_game_data);	// Restore call stack pointer
		MainFile = CallStack[cs].MiniFile;

		// Tun off any GUIs and wait in blank room for RestoreGame() to execute
		player.ChangeRoom(MiniGame_BLANKROOM);		// Make screen black
		mouse.Visible = false;							// Hide mouse and guis
		i=0;							
		while (i<Game.GUICount) {
			if (gui[i]!=null) gui[i].Visible=false;
			i++;
		}
		
		// Queue RestoreGame() to execute in repeatedly_execute() below
		State = eMiniGame_Returning;			
	}
	// Calling MiniGame 
	else {													
		read_data();								
		cs = game.previous_game_data;
		MainFile = CallStack[cs-1].MiniFile;
		State = eMiniGame_Done;
	}
}

//===================================================================
   function repeatedly_execute() {
//
// This function is executed by the game engine every game cycle. The 
// script below coordinates a number of actions so that they occur in
// the proper sequence.  Normally one could just put instructions one
// after the other in a script function to achieve this.  However the
// SaveGameSlot() and  RestoreGameSlot()  operations are performed by
// the game engine  after  the  script, in which they were requested,
// completes. 
//
// The  following  instructions  implement seceral a sequential state 
// machines.Each game cycle one step of a sequence of actions defined
// for the active state, is executed.This necessary because game save
// and  restore operations execute until after a script is completed.
// The sequentuial state machine is used to execute a sequence across 
// multiple  game  cycles so that operations such as save/restore can
// be included in the sequence.
//-------------------------------------------------------------------

	// Previous state sequence is complete reset step counter
	if (State==eMiniGame_Done) {
		Step = 0;
	}
	// Call the Minigame
	else if (State==eMiniGame_Call) {
		if (Step==0) {
			SaveGameSlot(top+cs,String.Format("%s Return",CallStack[cs].MiniFile));
			Step++;
		}
		else if (Step==1) {
			RunAGSGame(CallStack[cs].MiniFile,0,cs+1); 
			State = eMiniGame_Done;
			Step++;
		}
	}
	// Return to the calling game
	else if (State==eMiniGame_Return) {
		if (Step==0) {
			MainFile = "";
			clear_stack_element(cs);
			write_data("", -1);
			RunAGSGame(CallStack[cs-1].MainFile,0,-(1000+cs-1));
			Step++;
			State = eMiniGame_Done;
		}
	}
	// Restore GAME to point just before calling minigame
	else if (State==eMiniGame_Returning) {
		if (Step==0) {
			// The restore operation will modify the variable State so 
			// it is necessary to catch the eEventRestoreGame event, in 
			// the on_event interaction below, and again set it to "DONE".
			RestoreGameSlot(top+cs);
			Step++;
		}
		else if (Step==1) {
			read_data();
			State = eMiniGame_Done;
			Step++;
		}
	}
}

//===================================================================
	function on_event (EventType event, int data) {
//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//-------------------------------------------------------------------
	if (event==eEventRestoreGame) {
		State = eMiniGame_Returning;  // Finish StateReturning sequence
		Step  = 1;
	}	
}
