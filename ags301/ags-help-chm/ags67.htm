<HTML>
<head><title>Region functions and properties</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic66"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags27.htm#topic39"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags66.htm#topic65"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags68.htm#topic67"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Region functions and properties</H2>

<A HREF="#Region.GetAtRoomXY">GetAtRoomXY (region)</A><BR>
<A HREF="#Region.RunInteraction">RunInteraction (region)</A><BR>
<A HREF="#Region.Tint">Tint (region)</A><BR>
<A HREF="#Region.Enabled">Enabled property (region)</A><BR>
<A HREF="#Region.ID">ID property (region)</A><BR>
<A HREF="#Region.LightLevel">LightLevel property</A><BR>
<A HREF="#Region.TintEnabled">TintEnabled property</A><BR>
<A HREF="#Region.TintBlue">TintBlue property</A><BR>
<A HREF="#Region.TintGreen">TintGreen property</A><BR>
<A HREF="#Region.TintRed">TintRed property</A><BR>
<A HREF="#Region.TintSaturation">TintSaturation property</A><BR>
<P>

<HR>
<A NAME="Region.GetAtRoomXY"></A>
<H3>GetAtRoomXY (region)</H3>
<I>(Formerly known as global function GetRegionAt, which is now obsolete)</I><P>
<PRE>
static Region* Region.GetAtRoomXY(int x, int y)
</PRE>
Returns the region at ROOM co-ordinates (X,Y).
If there is no region there, or if invalid co-ordinates are specified,
the Region* representing region 0 will be returned.<P>
<B>NOTE:</B> Unlike GetHotspotAtLocation, the co-ordinates specified are ROOM co-ordinates. This
means that if you want to use the mouse cursor location, you have to add the
screen offset to make it work in scrolling rooms.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (Region.GetAtRoomXY(player.x, player.y) == region[0])
  Display("The player is not currently standing on a region.");
</PRE>
<I>See Also:</I> <A HREF="ags68.htm#GetWalkableAreaAt">GetWalkableAreaAt</A><P>


<HR>
<A NAME="Region.RunInteraction"></A>
<H3>RunInteraction (region)</H3>
<I>(Formerly known as RunRegionInteraction, which is now obsolete)</I> <P>
<PRE>
Region.RunInteraction(int event)
</PRE>
Processes the interaction list as if the EVENT for the region had been activated.<P>
<B>NOTE:</B> Unlike the other RunInteraction commands, this one does not take a cursor mode.
Instead, it uses an event type as follows:<P>
0  While player stands on region <br> 
1  Player walks onto region <br> 
2  Player walks off region<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
region[4].RunInteraction(1);
</PRE>
will run the actions defined in the interaction editor for "Player walks onto region"
for region 4.<P>
<I>See Also:</I> <A HREF="ags44.htm#Character.RunInteraction">Character.RunInteraction</A>,
<A HREF="ags58.htm#Hotspot.RunInteraction">Hotspot.RunInteraction</A><P>


<HR>
<A NAME="Region.Tint"></A>
<H3>Tint (region)</H3>
<I>(Formerly known as SetRegionTint, which is now obsolete)</I> <P>
<PRE>
Region.Tint(int red, int green, int blue, int amount)
</PRE>
Changes the region to have RGB tint (RED, GREEN, BLUE).<P>
The red, green and blue values are between 0 and 255, and you supply the same
values that you would use in the editor.<P>
AMOUNT determines the extent of the tinting, and is from 1 to 100, reflecting a percentage
figure. 100<TT>%</TT> will completely colourize characters in that area to the specified colour.<P>
<B>NOTE</B>: The tint will be reset when the player leaves the room,
so you need to use it in Player Enters Room if you want a permanent
change.<P>
<B>NOTE:</B> This function only works in hi-colour games.<P>
<B>NOTE</B>: To remove the region tint, set the LightLevel property to 0.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
region[2].Tint(180, 20, 20, 50); 
</PRE>
will set region 2's RGB tint to (180, 20, 20) with 50<TT>%</TT> opacity.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.LightLevel">Region.LightLevel</A><P>
<P>

<HR>
<A NAME="Region.Enabled"></A>
<H3>Enabled property (region)</H3>
<I>(Formerly known as DisableRegion, which is now obsolete)</I> <br> 
<I>(Formerly known as EnableRegion, which is now obsolete)</I> <P>
<PRE>
bool Region.Enabled
</PRE>
Enables/disables the specified region. If you set this to false, then all areas of the screen
that were previously part of the region now act as type 0 (no region). You can turn the region
back on later by setting this to true.<P>
While a region is disabled, it will not be returned by Region.GetAtRoomXY, and if
the character walks onto the region then its interactions will not get run.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
region[3].Enabled = false;
</PRE>
will disable region number 3.<P>
<I>See Also:</I> <A HREF="ags58.htm#Hotspot.Enabled">Hotspot.Enabled</A>,
<A HREF="ags68.htm#RemoveWalkableArea">RemoveWalkableArea</A>,
<A HREF="ags68.htm#RestoreWalkableArea">RestoreWalkableArea</A><P>


<HR>
<A NAME="Region.ID"></A>
<H3>ID property (region)</H3>
<PRE>
readonly int Region.ID
</PRE>
Gets the region number of this region. This allows you to interoperate with old
script using the number-based region functions.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
Display("Region 3 is number %d.", region[3].ID);
</PRE>
displays region 3's number (which will be 3).<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.GetAtRoomXY">Region.GetAtRoomXY</A><P>


<HR>
<A NAME="Region.LightLevel"></A>
<H3>LightLevel property</H3>
<I>(Formerly known as SetAreaLightLevel, which is now obsolete)</I> <P>
<PRE>
int Region.LightLevel
</PRE>
Gets/sets the region's light level. This does the same thing as the Light Level
textbox in the editor, but allows you to change it at run-time.<P>
The light level is from <B>-100 to 100</B>. This is different from the editor, which
takes values from 0 to 200.
Subtract 100 from the value you would use in the editor when calling this function.
The reason for this discrepancy is legacy reasons from the DOS editor days.<P>
To disable region lighting and tinting effects, set LightLevel to 0.<P>
<B>NOTE</B>: The light level will be reset to the editor settings when the player leaves the
room, so you need to use it in Player Enters Room if you want a permanent
change.<P>
<B>NOTE</B>: Setting a light level will disable any RGB tint set for the region.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (GetGlobalInt(10)==1)
    region[2].LightLevel = 100;
</PRE>
will set region 2's level light to 100 if the Global Integer 10 is 1.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A><P>


<HR>
<A NAME="Region.TintEnabled"></A>
<H3>TintEnabled property</H3>
<PRE>
readonly bool Region.TintEnabled
</PRE>
Gets whether the region currently has an RGB tint enabled for it.<P>
Returns <I>true</I> if it does, and <I>false</I> if it does not. If it does not, then
the LightLevel property reflects the region lighting.<P>
If this property is <I>false</I>, then the TintRed, TintGreen, TintBlue and TintSaturation
properties are invalid.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (region[4].TintEnabled) {
  Display("Region 4 is tinted!!");
}
</PRE>
will display a message if region 4 is tinted<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A><P>


<HR>
<A NAME="Region.TintBlue"></A>
<H3>TintBlue property</H3>
<PRE>
readonly int Region.TintBlue
</PRE>
Gets the <I>Blue</I> setting for the region's current tint.<P>
This property is read-only; to change it, use the <A HREF="ags67.htm#Region.Tint">Region.Tint</A> command.<P>
<B>NOTE:</B> If the <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A> property is false, then
this value is meaningless.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (region[4].TintEnabled) {
  Display("Region 4 is tinted RGB (%d,%d,%d) Saturation %d.",
          region[4].TintRed, region[4].TintGreen,
          region[4].TintBlue, region[4].TintSaturation);
}
</PRE>
will display a message with the region's tints.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A>, <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A>,
<A HREF="ags67.htm#Region.TintGreen">Region.TintGreen</A>, <A HREF="ags67.htm#Region.TintRed">Region.TintRed</A><P>


<HR>
<A NAME="Region.TintGreen"></A>
<H3>TintGreen property</H3>
<PRE>
readonly int Region.TintGreen
</PRE>
Gets the <I>Green</I> setting for the region's current tint.<P>
This property is read-only; to change it, use the <A HREF="ags67.htm#Region.Tint">Region.Tint</A> command.<P>
<B>NOTE:</B> If the <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A> property is false, then
this value is meaningless.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (region[4].TintEnabled) {
  Display("Region 4 is tinted RGB (%d,%d,%d) Saturation %d.",
          region[4].TintRed, region[4].TintGreen,
          region[4].TintBlue, region[4].TintSaturation);
}
</PRE>
will display a message with the region's tints.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A>, <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A>,
<A HREF="ags67.htm#Region.TintBlue">Region.TintBlue</A>, <A HREF="ags67.htm#Region.TintRed">Region.TintRed</A><P>


<HR>
<A NAME="Region.TintRed"></A>
<H3>TintRed property</H3>
<PRE>
readonly int Region.TintRed
</PRE>
Gets the <I>Red</I> setting for the region's current tint.<P>
This property is read-only; to change it, use the <A HREF="ags67.htm#Region.Tint">Region.Tint</A> command.<P>
<B>NOTE:</B> If the <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A> property is false, then
this value is meaningless.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (region[4].TintEnabled) {
  Display("Region 4 is tinted RGB (%d,%d,%d) Saturation %d.",
          region[4].TintRed, region[4].TintGreen,
          region[4].TintBlue, region[4].TintSaturation);
}
</PRE>
will display a message with the region's tints.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A>, <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A>,
<A HREF="ags67.htm#Region.TintBlue">Region.TintBlue</A>, <A HREF="ags67.htm#Region.TintGreen">Region.TintGreen</A><P>


<HR>
<A NAME="Region.TintSaturation"></A>
<H3>TintSaturation property</H3>
<PRE>
readonly int Region.TintSaturation
</PRE>
Gets the <I>saturation</I> setting for the region's current tint.<P>
This property is read-only; to change it, use the <A HREF="ags67.htm#Region.Tint">Region.Tint</A> command.<P>
<B>NOTE:</B> If the <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A> property is false, then
this value is meaningless.<P>
<FONT COLOR="#FF0000">Example:</FONT>
<PRE>
if (region[4].TintEnabled) {
  Display("Region 4 is tinted RGB (%d,%d,%d) Saturation %d.",
          region[4].TintRed, region[4].TintGreen,
          region[4].TintBlue, region[4].TintSaturation);
}
</PRE>
will display a message with the region's tints.<P>
<I>See Also:</I> <A HREF="ags67.htm#Region.Tint">Region.Tint</A>, <A HREF="ags67.htm#Region.TintEnabled">Region.TintEnabled</A>,
<A HREF="ags67.htm#Region.TintBlue">Region.TintBlue</A>, <A HREF="ags67.htm#Region.TintGreen">Region.TintGreen</A>
, <A HREF="ags67.htm#Region.TintRed">Region.TintRed</A><P>
<P>

</BODY></HTML>
