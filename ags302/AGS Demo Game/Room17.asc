//===================================================================
// *** AGS ROOM SCRIPT ***
//
// Project: Demo Quest 3 
//          Source of Dreams
//
// Room:    Ags Terminal
//              
// Author:  Rick Jafrate (RickJ)
//          
// Abstract
// This room is a closeup of the AGS Terminal. It's used to program 
// the door in the BrokenCurbStreet room.  
//
// This room is programmed exclusively  using  script  commands. It's
// complex  enough  to  make  programming  with the Iteraction Editor 
// extremely  difficult, if  not  impossible.  A  number of scripting
// techniques are illustrated in this room's script.
//
// Description
// An Id  card  with a magnetic stripe must be inserted into the slot
// to gain access to the terminal.  Once  access  is granted the room 
// number to  which  the  door leads may be entered into the terminal.  
// The "Ent" key is pressed to submit the entry to the machinery. The
// "Clr" key is used to clear the led display.  ressing the "Clr" key
// a second time will cause the Id card to be ejected.
//
// If incorrect invntory items are used on the card  slot  more  than
// three times, on the foruth attempt the item will become stuck in 
// the machine making it inoperable for the remainde of the game.
//
// Once the  "Ent" key is pressed a short animation is played and the
// player is  informed  that the  portal  is active. The card is then 
// ejected from the machine.  The player then interacts with the card
// to return it to the inventory.
//
// Scipting Hint - Application and Utility Functions
// This room illustrats how custom functions are categorized as being
// either application or utility functions. Although this distinction 
// makes no difference to the AGS compiler it is useful in organizing
// the script program so that is easier to read and maintain, and  is 
// less susceptible to errors.
//
// Revision History
// 05-Mar-15 RickJ,        new version, derrived from original DQ
// 
// Copyright (c) 2005 by Chris Jones
//-------------------------------------------------------------------


//===================================================================
// Constant Definitions
//-------------------------------------------------------------------

// Game cycles per StateTic
#define CYCPERTIC									10

// Terminal States (state value is also sprite id)
#define INSERT_CARD								554
#define ACCESS_GRANTED							555
#define ENTER_NUMBER								556
#define ACCESS_DENIED							557
#define WELCOME_TO_AGS							558
#define PORTAL_ACTIVE							559
#define PORTAL_INACTIVE							33
#define AGS_WORKING								560
#define AGS_BLANK									578


//===================================================================
// Static Variable Definitions
//-------------------------------------------------------------------
int 		Ledxxx, Ledxx, Ledx;
int 		State=WELCOME_TO_AGS;
int 		NextState=NONE;
int 		StateChanged=false;
int 		StateTic=CYCPERTIC;
int 		FrameCount=0;
int		AccessGranted=false;
int 		CardState=TAKEN;
int		SlotFailCount=0;
String 	SlotItem;


//===================================================================
// Utility Functions
//-------------------------------------------------------------------
//-------------------------------------------------------------------
   function led_clr() {
//-------------------------------------------------------------------
	int status;
	
	// Return status if LED is already clear
	if ((Ledxxx==10)&&(Ledxx==10)&&(Ledx==10)) {
		status = false;
	}
	// Clear decimal digits
	else {
		Ledxxx = 10;
		Ledxx = 10;
		Ledx = 10;
		status = true;
	}
	return status;
}

//-------------------------------------------------------------------
   function led_off() {
//-------------------------------------------------------------------
	// Turn off led value
	oLed100.Visible = false;
	oLed10.Visible = false;
	oLed1.Visible = false;	
}

//-------------------------------------------------------------------
   function led_on() {
//-------------------------------------------------------------------
	// Turn on led value
	oLed100.Visible = true;
	oLed10.Visible = true;
	oLed1.Visible = true;	
}

//-------------------------------------------------------------------
   function led_to_int() {
//-------------------------------------------------------------------
	int value, xxx, xx, x;
	
	// Get valid led values, in case digit is not displaying a number
	if ((Ledxxx<0)||(Ledxxx>9)) xxx = 0;
	else xxx = Ledxxx;
	if ((Ledxx<0)||(Ledxx>9)) xx = 0;
	else xx = Ledxx;
	if ((Ledx<0)||(Ledx>9)) x = 0;
	else x = Ledx;

	// Convert Led digits to int
	value = (100*xxx)+(10*xx)+(x);
	return value;
}

//-------------------------------------------------------------------
   function int_to_led(int value) {
//-------------------------------------------------------------------
	// Convert Led digits to int
	Ledxxx = value/100;
	Ledxx  = (value-(Ledxxx*100))/10;
	Ledx   = (value-(Ledxxx*100))-(Ledxx*10);
}

//-------------------------------------------------------------------
   function insert_card() {
//-------------------------------------------------------------------
	oCard.SetView(24,3,0);
	PlaySound(sndSplack01);
	oCard.Visible = true;
	oCard.Animate(3,3,eOnce,eBlock,eForwards);
	CardState = IN;
	led_clr();
}

//-------------------------------------------------------------------
   function eject_card() {	
//-------------------------------------------------------------------
	// PlaySound();
	PlaySound(sndSplack01);
	oCard.Visible = true;
	oCard.Animate(3,3,eOnce,eBlock,eBackwards);
	CardState = OUT;
}

//-------------------------------------------------------------------
   function take_card() {	
//-------------------------------------------------------------------
	oCard.SetView(24,3,0);
	oCard.Visible = false;
	CardState = TAKEN;
}

//-------------------------------------------------------------------
   function set_state(int state, int next) {
//-------------------------------------------------------------------
	// Detect state change
	if (state!=State) StateChanged=true;
	else StateChanged=false;
	
	// Set the graphic and remember the state 
	oText.Graphic = state;	
	State = state;
	
	// Reset tic and frame counters
	StateTic = CYCPERTIC;
	FrameCount = 0;

	// Activate specific state
	if (state==INSERT_CARD) {
		led_off();
	}
	else if (state==ACCESS_GRANTED) {
		led_off();
	}
	else if (state==ENTER_NUMBER) {
		led_on();
	}
	else if (state==ACCESS_DENIED) {
		led_off();
	}
	else if (state==WELCOME_TO_AGS) {
		led_off();
	}
	else if (state==PORTAL_ACTIVE) {
		led_on();
	}
	else if (state==PORTAL_INACTIVE) {
		led_off();
	}
	else if (state==AGS_WORKING) {
		led_on();
	}
	else { 
		oText.Graphic = WELCOME_TO_AGS;	
		State = WELCOME_TO_AGS;	
		led_off();
	}
	NextState = next;
}

//===================================================================
// Application Functions
//-------------------------------------------------------------------
//===================================================================
	function SetState(int state) {
//
// This function sets the terminal's state.  
//-------------------------------------------------------------------
	// Set the state 
	set_state(state,NONE);	
}

//===================================================================
   function StateInsertCard() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions when the INSERT_CARD  terminal state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=INSERT_CARD) return;
}

//===================================================================
   function StateAccessGranted() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions when  ACCESS_GRANTED  terminal state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=ACCESS_GRANTED) return;

	// Clear the numeric display and set the AccessGranted flag
	if (FrameCount==0) {
		AccessGranted = true;
		led_clr();
	}		
	// Terminate state after x frames have been displayed
	else if (FrameCount>=200) {
		set_state(WELCOME_TO_AGS,NONE);
	}
	// Increment frame counter
	else FrameCount++;
}

//===================================================================
   function StateEnterNumber() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions when the ENTER_NUMBER terminal state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=ENTER_NUMBER) return;

	// Generate a tic timer for state transitions
	StateTic--;
	if (StateTic<=0) {
		StateTic = CYCPERTIC;
		FrameCount++;
	}
	// Terminate state after x frames have been displayed
	if (FrameCount>=200) set_state(WELCOME_TO_AGS,NONE);
}

//===================================================================
   function StateAccessDenied() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions  when  ACCESS_DENIED  terminal state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=ACCESS_DENIED) return;

	// Generate a tic timer for state transitions
	StateTic--;
	if (StateTic<=0) {
		StateTic = CYCPERTIC;
		FrameCount++;
		AccessGranted = false;
	}
	// Terminate state after x frames have been displayed
	if (FrameCount>=100) {
		set_state(WELCOME_TO_AGS,NONE);
		led_clr();
	}
}

//===================================================================
   function StateWelcomeToAgs() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions when  WELCOME_TO_AGS terminal  state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=WELCOME_TO_AGS) return;

	// Eject the card if is inserted into the machine
	if (CardState==IN) eject_card();
	led_clr();
	AccessGranted = false;
	
	// Generate a tic timer for state transitions
	StateTic--;
	if (StateTic<=0) {
		StateTic = CYCPERTIC;
		FrameCount++;
	}
	// Terminate state after x frames have been displayed
	if (FrameCount>=200) set_state(INSERT_CARD,NONE);
}

//===================================================================
   function StatePortalActive() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs  actions when  PORTAL_ACTIVE terminal  state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=PORTAL_ACTIVE) return;
	
	// Eject card (but do it only once)
	if (CardState==IN) eject_card();

	// Generate a tic timer for state transitions
	StateTic--;
	if (StateTic<=0) {
		StateTic = CYCPERTIC;
		FrameCount++;
	}
	// Terminate animation after x frames have been displayed
	if (FrameCount>=20) set_state(WELCOME_TO_AGS,NONE);
}

//===================================================================
   function StatePortalInactive() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs  actions when  PORTAL_ACTIVE terminal  state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State!=PORTAL_INACTIVE) return;
	
	// Generate a tic timer for state transitions
	StateTic--;
	if (StateTic<=0) {
		led_clr();
		StateTic = CYCPERTIC;
		FrameCount++;
	}
	// Terminate animation after x frames have been displayed
	if (FrameCount>=20) {
		set_state(ENTER_NUMBER,NONE);
	}
}

//===================================================================
   function StateWorking() {
//
// This  function  is  called from the repeatedly execute interaction
// function and performs actions  when the AGS_WORKING terminal state
// is active.  
//-------------------------------------------------------------------
	// If not this state exit
	if (State==AGS_WORKING) {

		// Play sound 
		PlaySound(sndBeeSpac01);
	
		// Generate a tic timer for state transitions
		StateTic--;
		if (StateTic<=0) {
			StateTic = CYCPERTIC;
			FrameCount++;
			// Do the "Working..." text animation
			oText.Graphic = oText.Graphic+1;
			if (oText.Graphic>(AGS_WORKING+5)) oText.Graphic = AGS_WORKING;				
		}
		// Terminate animation after x frames have been displayed
		if (FrameCount>=20) {
			set_state(NextState,NONE);
		}
	}	
}

//===================================================================
   function DisplayLedValue() {
//
// This  function  is  called from the repeatedly execute interaction
// function. The led digits  are  implemented  using room objects and 
// an  animation  loop, where each frame in the loop corresponds to a 
// different  digit value.  The Object.SetView() function selects the 
// frame corresponding to the led digit's value.
//-------------------------------------------------------------------
	// Display decimal digits
	oLed100.SetView(24,2,Ledxxx);
	oLed10.SetView(24,2,Ledxx);
	oLed1.SetView(24,2,Ledx);
}

//===================================================================
   function SetLedValue(int value) {
//
// This function sets the led digits to an integer value.The value is
// specified as a parameter.
//-------------------------------------------------------------------
	int_to_led(value);
}

//===================================================================
   function ClearLedValue() {
//
// This  function is called when the terminal's "Clr" key is pressed,
// It clears  the  led  display,  causing the digits to become blank. 
// Pressing the Clr key twice  will eject  the  card and display the 
// welcome message.
//-------------------------------------------------------------------
	// Make the sound of a key being pressed
	PlaySound(sndDeek01);

	// Check if acces was granted (i.e. card inserted into slot)
	if (AccessGranted) {									// Access was granted 
	
		//-------------------------------------------------------------
		// The led display is cleared. If the display was already 
		// cleared clr_led() returns false, so in this case eject 
		// the card if it is in the slot.
		//-------------------------------------------------------------

		// Clear led display
		if ((led_clr()==false)&&(CardState==IN)) {// Second consecutive Clr
			eject_card();									// Eject card
			set_state(WELCOME_TO_AGS,NONE);			// Display welcome msg
		}
	}
	else 	{													// Access wasn't granted
		set_state(WELCOME_TO_AGS,NONE);				// Display welcome message
	}
}

//===================================================================
   function EnterLedValue() {
//
// This  function  is  called  when  the "Ent" key is pressed on the 
// terminal. The led digits are converted to an integer value, which 
// is then copied to the global variable AgsTermId.  AgstermId is an
// index  into  the global variable array AgsTerm. The inside of the 
// BrokenCurbStreet door and the view throught the crack in the wall
// in the EmptyStreet room.
//-------------------------------------------------------------------
	int value;
	
	// Make the sound of a key being pressed
	PlaySound(sndDeek01);

	// Check if acces was granted (i.e. card inserted into slot)
	if (AccessGranted) {					// Access was granted 
		value = led_to_int();
		
		// Check AgsTermRequired is ok
		if ((AgsTermRequired==NONE)||(AgsTermRequired==value)) {

			//-----------------------------------------------------------
			// If an actual AGS room exists and it was initialized in the 
			// global  script then  update the global indes AgsTermId. If 
			// it doesn't exist then use the EmptyRoom room.
			//-----------------------------------------------------------
			if (AgsTerm[value].Exists) {
				AgsTermId[AgsTermLocation] = value;				// Update AgsTermid index
			}
			else {
				AgsTermId[AgsTermLocation] = crmEmptyRoom;	// Room doesn't exist, use EmptyRoom
				AgsTermId[AgsTermLocation] = crmEmptyRoom;
			}
			set_state(AGS_WORKING,PORTAL_ACTIVE);				// Display working message
		}
		else {
			set_state(AGS_WORKING,PORTAL_INACTIVE);
			AgsTermId[AgsTermLocation] = NONE;
		}
	}
	else {															// Access wasn't granted
		set_state(ACCESS_DENIED,NONE);						// Display denied message
	}	
}

//===================================================================
   function NumericEntry(int value) {
//
// This  function  accepts  input from the terminal's numeric  keypad
// hotspots.  The  hotspot  interaction  functions  below  call  this 
// function with the value corresponding to the keypad key pressed.
//
// When a keypad  key is  pressed led digits are shifted left to make
// room for the new digit in  the right most position.  If access has
// not been previously granted display ACCESS DENIED on the terminal.
//-------------------------------------------------------------------
	// Make the sound of a key being pressed
	PlaySound(sndDeek01);
	
	// Check if acces was granted (i.e. card inserted into slot)
	if (AccessGranted) {					// Access was granted 

		// Display "ENTER NUMBER" if not already done
		if (State!=ENTER_NUMBER) set_state(ENTER_NUMBER,NONE);

		// Shift digits to the left 
		Ledxxx = Ledxx;
		Ledxx  = Ledx;

		// Put new value in right most digit 
		Ledx   = value;
	}
	else {									// Access wasn't granted 
		// Display "ACCESS DENIED"
		set_state(ACCESS_DENIED,NONE);
	}	
}

//===================================================================
   function InsertCard() {
//
// This function controls the interaction and animation of the access
// card being inserted into the terminal's card slot.
//-------------------------------------------------------------------
	insert_card();
}

//===================================================================
   function EjectCard() {
//
// This function controls the interaction and animation of the access
// card being ejected from the terminal's card slot.  The  card exits
// the card slot and remains visible (i.e sticking out of the slot).
//-------------------------------------------------------------------
	eject_card();
}

//===================================================================
   function TakeCard() {
//
// This function controls the interaction and animation of the access
// card being removed from the terminal by the player. After this the
// card is no longer visible.
//-------------------------------------------------------------------
	take_card();
}


//===================================================================
// Room - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart room_a  // DO NOT EDIT OR REMOVE THIS LINE
function room_a() {
  // script for room: Player enters screen (before fadein)

	// Help GUI 
	gHelpTitle.Text = "Ags Terminal";
	gHelpDescription.Text = "Use hotspots and objects to simulate an ATM terminal.";
	gHelpReference.Text = "Manual Reference:[Object,Animate,Graphic,Hotspot";

	// Initialize terminals
	SetState(WELCOME_TO_AGS);
}
#sectionend room_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart room_b  // DO NOT EDIT OR REMOVE THIS LINE
function room_b() {
	// script for room: Repeatedly execute

	// Service terminal state
	DisplayLedValue();  
	StateInsertCard();
	StateAccessGranted();
	StateEnterNumber();
	StateAccessDenied();
	StateWelcomeToAgs();
	StatePortalActive();
	StatePortalInactive();
	StateWorking();
	StateChanged = false;		// It only get to be true for one game cycle

	// Make a blank background or help gui title
	if (gHelp.Visible) oText.Graphic = AGS_BLANK;
	else if (oText.Graphic==AGS_BLANK) oText.Graphic = State;	
}
#sectionend room_b  // DO NOT EDIT OR REMOVE THIS LINE

//===================================================================
// Numeric Keypad - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_a() {
	// script for hotspot1: Interact hotspot
	NumericEntry(1);
}
#sectionend hotspot1_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot1_b() {
	// script for hotspot1: Look at hotspot
	Display("A button with the number 1 printed on it's surface. 'One is the loneliest number there could ever be, number one...' - Three Dog Night");	
}
#sectionend hotspot1_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot2_a() {
	// script for hotspot2: Interact hotspot
	NumericEntry(2);  
}
#sectionend hotspot2_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot2_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot2_b() {
	// script for hotspot2: Look at hotspot
	Display("A button with the number 2 printed on it's surface.  The second half of the answer to...");	
}
#sectionend hotspot2_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_a() {
	// script for hotspot3: Interact hotspot
	NumericEntry(3);  
}
#sectionend hotspot3_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot3_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot3_b() {
	// script for hotspot3: Look at hotspot
	Display("A button with the number 3 printed on it's surface.  The '3' was discovered by a Roman named Ignaramious who just couldn't seem to get the hang of making his 'E's correctly.");		
}
#sectionend hotspot3_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_a() {
	// script for hotspot4: Interact hotspot
	NumericEntry(4);  
}
#sectionend hotspot4_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot4_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot4_b() {
	// script for hotspot4: Look at hotspot
	Display("A button with the number 4 printed on it's surface. The first half of the answer to the ultimate question of...");	
}
#sectionend hotspot4_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot5_a() {
	// script for hotspot5: Interact hotspot
	NumericEntry(5);
}
#sectionend hotspot5_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot5_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot5_b() {
	// script for hotspot5: Look at hotspot
	Display("A button with the number 5 printed on it's surface.  Judging by the humor, this must be the game designers' IQ.");	
}
#sectionend hotspot5_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot6_a() {
	// script for hotspot6: Interact hotspot
	NumericEntry(6);
}
#sectionend hotspot6_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot6_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot6_b() {
	// script for hotspot6: Look at hotspot
	Display("A button with the number 6 printed on it's surface.  Hehe, speak of the devil.");		
}
#sectionend hotspot6_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot7_a() {
	// script for hotspot7: Interact hotspot
	NumericEntry(7);  
}
#sectionend hotspot7_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot7_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot7_b() {
	// script for hotspot7: Look at hotspot
	Display("A button with the number 7 printed on it's surface.  Ahh! Lucky number seven.");	
}
#sectionend hotspot7_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_a() {
	// script for hotspot8: Interact hotspot
	NumericEntry(8);  
}
#sectionend hotspot8_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot8_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot8_b() {
	// script for hotspot8: Look at hotspot
	Display("A button with the number 8 printed on it's surface.  Is eight ever enough?");	
}
#sectionend hotspot8_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot9_a() {
	// script for hotspot9: Interact hotspot
	NumericEntry(9);  
}
#sectionend hotspot9_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot9_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot9_b() {
	// script for hotspot9: Look at hotspot
	Display("A button with the number 9 printed on it's surface.  What could it mean?");
}
#sectionend hotspot9_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot10_a() {
	// script for hotspot10: Interact hotspot
	NumericEntry(0);  
}
#sectionend hotspot10_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot10_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot10_b() {
	// script for hotspot10: Look at hotspot
	Display("A button with the number 0 printed on it's surface. Is zero really necessary?");
}
#sectionend hotspot10_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot11_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot11_b() {
	// script for hotspot11: Interact hotspot
	ClearLedValue();
}
#sectionend hotspot11_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot11_a() {
	// script for hotspot11: Look at hotspot
	Display("A button with 'Clr' printed on it's surface.  Mysterious isn't it?");
}
#sectionend hotspot11_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot12_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot12_b() {
	// script for hotspot12: Interact hotspot
	EnterLedValue();
}
#sectionend hotspot12_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot12_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot12_a() {
	// script for hotspot12: Look at hotspot
	Display("It's a button labeled 'Ent'.  'Ent' must be a secret code for something!!");
}
#sectionend hotspot12_a  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Terminal and Border Outside Terminal - Interaction Handler Functions
//-------------------------------------------------------------------
#sectionstart hotspot14_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot14_a() {
	// script for hotspot14: Look at hotspot
	Display("It looks like an ATM Machine, except that there doesn't appear to be a way of dispensing money.");
}
#sectionend hotspot14_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot14_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot14_b() {
	// script for hotspot14: Interact hotspot
	Display("You rub your hand across the shiny surface of the machine and take a moment to admire the designers of this magnificent device.");  
}
#sectionend hotspot14_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot15_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot15_a() {
	// script for hotspot15: Look at hotspot
	Display("Blackness surrounds the terminal. Click here to leave the terminal.");
}
#sectionend hotspot15_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot15_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot15_b() {
	// script for hotspot15: Interact hotspot
	player.ChangeRoom(player.PreviousRoom);
}
#sectionend hotspot15_b  // DO NOT EDIT OR REMOVE THIS LINE


//===================================================================
// Card Slot
//-------------------------------------------------------------------
#sectionstart hotspot13_a  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot13_a() {
	// script for hotspot13: Look at hotspot
	if (CardState==OUT) {
		Display("An access card is currently hanging outside of the slot. You wonder who could have carelessely left their access card lying around like that.");
	}
	else if (SlotFailCount==4) {
		Display("Some idiot has jammed the %s into the slot, making the terminal un-useable!",SlotItem);
	}
	else {
		Display("There's a long, narrow, horizontal opening in the machine. Apparentently something is supposed to go in or come out.");  
	}
}
#sectionend hotspot13_a  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot13_b  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot13_b() {
	// script for hotspot13: Interact hotspot
	Display("You try to squeeze your finger into the slot. Unfortunately, it won't fit.");  
}
#sectionend hotspot13_b  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart hotspot13_c  // DO NOT EDIT OR REMOVE THIS LINE
function hotspot13_c() {
	// script for hotspot13: Use inventory on hotspot
	String buf;
	
	if ((player.ActiveInventory==iMagneticCard)&&(SlotFailCount<4)) {
		player.LoseInventory(iMagneticCard);
		mouse.Mode = eModeInteract;
		InsertCard();
		SetState(ACCESS_GRANTED);
		SlotFailCount = 0;
	}
	else {
		buf = player.ActiveInventory.Name;
		if (SlotFailCount==0) {
			Display("Well genius!  Jamming the %s into the slot didn't get any results did it?",buf);
			SlotFailCount++;
		}
		else if (SlotFailCount==1) {
			Display("Don't you think you could have thought of something better than putting the %s into the slot?",buf);
			SlotFailCount++;
		}
		else if (SlotFailCount==2) {
			Display("Clearly that slot wasn't designed to insert the %s into it. If you keep this up you're going to break the terminal!",buf);
			SlotFailCount++;
		}
		else if (SlotFailCount==3) {
			Display("That did it!  Your persistence has finally paid off. You finally manage to force the %s into the slot but nothing happens.",buf);
			player.LoseInventory(player.ActiveInventory);
			SlotItem = buf;
			SlotFailCount++;
		}
		else if (SlotFailCount==4) {
			Display("Your attempt to insert the %s into the slot has failed.",buf);  
			Display("Upon closer examination you see that someone has forced the %s into the slot, where it is now hopelessly wedged in.",SlotItem);
			Display("You quietly curse under your breath, whishing that the imbecile who did this to you never finishes this game.");
		}
	}  
}
#sectionend hotspot13_c  // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart object0_a  // DO NOT EDIT OR REMOVE THIS LINE
function object0_a() {
	// script for object0: Interact object
	// Take card if it is out of machine
	if (CardState==OUT) {
		TakeCard();
		SetState(WELCOME_TO_AGS);
		player.AddInventory(iMagneticCard);
		player.ActiveInventory = iMagneticCard;
		mouse.Mode = eModeInteract;
	}
	else {
		Display("It's stuck in the machine.");
	}
}
#sectionend object0_a  // DO NOT EDIT OR REMOVE THIS LINE