<HTML>
<head><title>Predefined global script functions</title><style type="text/css">
<!--
body         { font-family: Verdana; font-size: 10pt }
td           { font-family: Verdana; font-size: 10pt }
a            { font-weight: bold }
-->
</style>
</head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="TextScriptEvents"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags28.htm#topic39"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags41.htm#Gamevariables"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags43.htm#BuiltInEnums"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Predefined global script functions</H2>
In your main global script file, there are some functions which are
automatically added when you create the game. These are global events, and the
function is called when a particular event happens. There are also some
other events which you can add if you want to.<P>
The available event functions are:
<DL>


</TD>
<DT> dialog_request (int parameter)
<DD>
  Called when a dialog script line "run-script" is processed. PARAMETER is
  the value of the number following the "run-script" on that line of the
  dialog script.

</TD>
<DT> game_start ()
<DD>
  Called at the start of the game, before the first room is loaded. You can
  use this to set up the initial positions of characters, and to turn
  GUIs on and off. <B>You cannot run animations or do anything else
  which relies on a room being loaded</B>.

</TD>
<DT> interface_click (int interface, int button)
<DD>
  <B>(Now Obsolete)</B> Called when the player clicks on a button on a GUI which has its
  action set as "Run script". INTERFACE is the number of the GUI which they
  clicked on. BUTTON is the object number of the button within this GUI.

</TD>
<DT> on_event (EventType event, int data)
<DD>
  Called whenever certain game events happen. The value of DATA depends on
  which event has occurred. This allows you to perform checks or update things
  every time the player does something, regardless of which room it is in.
  The possible values of event are:<PRE>

eEventEnterRoomBeforeFadein
      called just before room Player Enters Room event is run.
      DATA = new room number
eEventLeaveRoom
      called just after room Player Leaves Room event is run.
      DATA = room number they are leaving
eEventGotScore  
      called whenever the player's score changes
      DATA = number of points they got
eEventGUIMouseDown
      called when a mouse button is pressed down over a GUI
      DATA = GUI number
eEventGUIMouseUp
      called when a mouse button is released over a GUI
      DATA = GUI number
eEventAddInventory
      the player just got a new inventory item
      DATA = inventory item number that was added
eEventLoseInventory
      the player just lost an inventory item
      DATA = inventory item number that was lost
eEventRestoreGame
      tells your game that it has just been restored from a save game
      DATA = save slot number</PRE>


</TD>
<DT> on_key_press (int keycode)
<DD>
  Called whenever a key is pressed on the keyboard. KEYCODE holds the ASCII
  value of the key. A list of these values is in <A HREF="ags79.htm#ASCIIcodes">this section</A>.

</TD>
<DT> on_mouse_click (MouseButton button)
<DD>
  Called when the player clicks a mouse button. BUTTON is either LEFT,
  RIGHT or MIDDLE, depending on which button was clicked. The "mouse.x" and "mouse.y"
  global variables contain the mouse's position. <br> 
  If 'Handle inventory clicks in script' is enabled in the game options, this
  function can also be called with eMouseLeftInv or eMouseRightInv, which indicate a left or
  right click on an inventory item, respectively. <br> 
  If 'Enable mouse wheel support' is enabled, this function can also be called with
  eMouseWheelNorth or eMouseWheelSouth, which indicate the user moving the mouse wheel north or
  south, respectively.

</TD>
<DT> repeatedly_execute()
<DD>
  Called every game cycle (normally 40 times per second).

</TD>
<DT> repeatedly_execute_always()
<DD>
  Called every game cycle, even when a blocking routine (eg. speech/cutscene) is in
  progress. You <B>cannot</B> call any blocking functions from this event handler. You
  can have a repeatedly_execute_always function in both your global script and in
  any room scripts where you require it.

</TD>
<DT> unhandled_event (int what, int type)
<DD>
  Called when an interaction is run, but no events are listed in the
  interaction window. This could be used to display a default "I can't do
  that" type of message. The values of WHAT and TYPE tell you what the
  player did. <br> 
  The possible values are listed below:<PRE>

 WHAT TYPE Description
  1    1   Look at hotspot
  1    2   Interact with hotspot
  1    3   Use inventory on hotspot
  1    4   Talk to hotspot
  1    7   Pick up hotspot
  1    8   Cursor Mode 8 on hotspot
  1    9   Cursor Mode 9 on hotspot
  2    0   Look at object
  2    1   Interact with object
  2    2   Talk to object
  2    3   Use inventory on object
  2    5   Pick up object
  2    6   Cursor Mode 8 on object
  2    7   Cursor Mode 9 on object
  3    0   Look at character
  3    1   Interact with character
  3    2   Speak to character
  3    3   Use inventory on character
  3    5   Pick up character
  3    6   Cursor Mode 8 on character
  3    7   Cursor Mode 9 on character
  4    1   Look at nothing (ie. no hotspot)
  4    2   Interact with nothing
  4    3   Use inventory with nothing
  4    4   Talk to nothing
  5    0   Look at inventory
  5    1   Interact with inventory (currently not possible)
  5    2   Speak to inventory
  5    3   Use an inventory item on another
  5    4   Other click on inventory</PRE>

  Note that the "Character stands on hotspot" event does not trigger this
  function, and it will not be triggered if there is an "Any click" interaction defined.
  
  This function is <B>not</B> triggered if the player clicks on nothing (hotspot 0).
</DL>
<P>
The <I>on_key_press</I> and <I>on_mouse_click</I> events can also be handled by
individual room scripts. If you add their function definitions to your room script
in a similar way to how they are in the global script, the room script can intercept
the keypress/mouseclick first, and then decide whether to pass it on to the global
script or not. See the <A HREF="ags50.htm#ClaimEvent">ClaimEvent</A> function for more.<P>


</BODY></HTML>
