<HTML>
<head><title>Editing the GUIs</title></head>

<BODY BGCOLOR=#FFFFE1 TEXT=#000000>
<A NAME="topic35"></A><CENTER>
<A HREF="ags.htm"><img align=center src="contents.gif" BORDER=0 ALT="Contents"></A> <A HREF="ags13.htm#topic33"><img align=center src="up.gif" BORDER=0 ALT="Up"></A> <A HREF="ags14.htm#MusAndSound"><img align=center src="back.gif" BORDER=0 ALT="Previous"></A> <A HREF="ags16.htm#DistGame"><img align=center src="forward.gif" BORDER=0 ALT="Next"></A> </CENTER><HR>

<H2>Editing the GUIs</H2>
By default, the game interface is set up to act like Sierra's point-and-click
interface of its 1990-93 games.
To change the interface (recommended for advanced users only), go to the "GUIs"
pane.<P>
The game interface is split up into GUIs. Each GUI is a
rectangular region on the screen which is drawn on top of the background
scene. Each can be set to either:
<UL>

<LI> be always displayed (for example the Sierra status-line)
<LI> pop-up when the mouse moves to a certain position (eg. Sierra icon-bar)
<LI> pop-up on script command only
</UL>

The default interface is made up of two GUIs - the status line, and the
icon bar.<P>
In the GUI Editor, you will see several buttons. The "Export GUI" button
exports the entire interface (ie. all the GUIs, plus button graphics) to a
file, which you can then import later into a different game using "Import GUI".
This allows you to design your interface and then use it in all your games.<P>
On the right of the screen the current GUI element is displayed.
You will notice that a floating window has appeared. This allows you to edit
the various properties of the GUI, and it works something like Visual Basic
(tm)'s Properties window. In the Properties window, you can change the
background colour of the GUI, set a background picture, and set the
location and width/height amongst other things.<P>
The "Visible" property allows you to set when the GUI is displayed. The
default is "Always", which is like the Sierra status-line: always present
on the screen. The "Script only" option means that the GUI will be initially
off and must be turned on by a text script command. (NOTE: With this option,
the game will be paused when the GUI is displayed. If you don't want this
behaviour, set it to "Always" and use GUIOff in game_start). The
"Mouse YPos" option means that the GUI only appears when the mouse vertical
position moves above the y-coordinate set with the "Popup-YP" option.<P>
The "Clickable" check box at the top of the screen allows you to set
whether the GUI and buttons on it respond to mouse clicks. This is on by
default, but if you turn it off and the player clicks on the GUI, the game
will actually process the click as if they clicked behind the GUI onto the
actual screen. Useful for transparent GUIs which are only used to display information.<P>
<A HREF="#topic36">GUI buttons</A><BR>
<A HREF="#topic37">Interface text</A><BR>
<A HREF="#TextWin">Customized Text Windows</A><BR>
<A HREF="#topic38">Lucasarts-style inventory</A><BR>
<A HREF="#topic39">Sliders</A><BR>
<A HREF="#topic40">Text Boxes</A><BR>
<A HREF="#topic41">List Boxes</A><BR>
<P>

<HR>
<A NAME="topic36"></A>
<H3>GUI buttons</H3>
To provide interactivity with the interface, you use buttons. There is no
limit to the number of buttons per GUI, but the game can only contain a total
of 80 GUI buttons.<P>
To add a button, click the "Add button" button, and then drag a rectangle
with the mouse onto the GUI. You will see it displayed as a text button, with
the text "New button" on. Notice that the Properties window is now displaying
properties for your new button rather than the GUI.<P>
Using the Properties window, you can set a picture for the button instead,
and you can also set various other self-explanitory attributes.
You set what happens when the player clicks on the button by using the "Left
click" attribute. This can be set to "Do nothing" (the default), and also "Set
mode", which changes the cursor mode to the mode specified in the "New mode number"
property. The other option, "Run script", runs the "interface_click" text
script function, passing the GUI number and button number of the clicked
button.<P>
To delete a GUI button, select it then press the Delete key on the keyboard.<P>

<HR>
<A NAME="topic37"></A>
<H3>Interface text</H3>
You can easily display static text on interfaces. For example, the Sierra-style
interface displays the score in the status bar.<P>
To add text to a GUI, you add a label. Click the "Add label" button, then
drag out a rectangle like you did when adding a button. You can change the
text displayed in the label by editing the "Text" property. Notice that the
text automatically wraps round to fit inside the rectangle you drew.<P>
As well as typing normal text into the label, you can add some special markers
which allow the text to change during the game. The following tokens will be
replaced with the relevant values in the game:
<PRE>
 @GAMENAME@    The game's name, specified on the Game Settings pane
 @OVERHOTSPOT@ Name of the hotspot which the cursor is over
 @SCORE@       The player's current score
 @SCORETEXT@   The text "Score: X of XX" with the relevant numbers filled in.
 @TOTALSCORE@  The maximum possible score, specified on Game, Misc tab
</PRE>
Example: You have @SCORE@ out of @TOTALSCORE@ points.<P>
The Properties window also allows you to align the text to left, right or
centre, as well as change its font and colour.<P>

<HR>
<A NAME="TextWin"></A>
<H3>Customized Text Windows</H3>
If you want to add a personal touch to the standard white text-boxes which
display all the messages during the game, you can create a border using the
GUI Editor. Create a new GUI, and check the "text window" box for it.<P>
The element will be resized to about 1/4 of the screen, and you will see 8
pictures - one in each corner and one on each side. These are the border
graphics. You change the graphic for a corner in the normal way.<P>
In the game, the corner graphics will be placed in the respective corners of
the text window, and the side graphics will be repeated along the edge of
the window. To tell the game to use your custom text window style, go to the
General Settings pane, and check the "Text windows use GUI" box. Then, enter
the number of the GUI which you used.<P>
You can also set a background picture for the text window. In the GUI editor,
simply set a background picture for the GUI element. The graphic you specify
will not be tiled or stretched in the game; however, it will be clipped to
fit the window. You should use a graphic of at least about 250x80 pixels to
make sure that it fills up the whole window.<P>

<HR>
<A NAME="topic38"></A>
<H3>Lucasarts-style inventory</H3>
Another option you may have noticed in the GUI editor is the Add Inventory
button. This allows you to drag out a rectangle which will display the
player's current inventory, in the same way as the Lucasarts games did. To
make the inventory window scrollable, you will need to add Up and Down arrow
buttons, and attach text script code to those buttons to use the avaialble
variables such as game.top_inv_item, described in section XX.<P>

<HR>
<A NAME="topic39"></A>
<H3>Sliders</H3>
You can now add sliders to your GUIs. This allows you to have a nice interface
for the player to change settings such as volume and game speed.
To add a slider, click the "Add slider" button and drag out its rectangle just
like you would for a button. You can also resize it by dragging the bottom-
right hand corner out in the same way as a button.<P>
Sliders can be either vertical or horizontal. The direction that it is drawn
in is automatic depending on the size that you stretch the slider box to - if
it is wider than it is tall you will get a horizontal slider, otherwise you'll
get a vertical slider.<P>
For the properties of a slider you can set the minimum, maximum and current
values that the slider can have. In the game, the user will be able to drag
the handle from MIN to MAX, and the slider will start off set to VALUE.
For horizontal sliders, MIN is on the left and MAX on the right, for vertical
sliders MAX is at the top and MIN is at the bottom.<P>
Whenever the user moves
the handle's position on the slider, interface_click is called with the GUI
and object numbers of the slider. This means that if they continually drag
the handle up and down, interface_click will get called repeatedly.
Your script can find out the value of the slider using the GetSliderValue
text script command.<P>

<HR>
<A NAME="topic40"></A>
<H3>Text Boxes</H3>
You can now add Text Box controls to your GUI. A text box is a simple device
that allows the player to type information into your game. Adding a text box
works like adding the other types of control.<P>
If a text box is on a currently displayed GUI, all standard keypresses (ie.
letter keys, return and backspace) are diverted to the textbox instead of
being passed to the on_key_press function. When the player presses Return in
the text box, the interface_click function is called with the text box's GUI
and object number. You can then use the GetTextBoxText text script function
to retrieve what they typed in.<P>

<HR>
<A NAME="topic41"></A>
<H3>List Boxes</H3>
List box controls allow you to add a list of items to your GUI. This could
be useful for doing a custom save/load dialog box, allowing the user to
choose between various options, and so forth.<P>
You use the ListBox text script functions to manipulate the list box - for
example, ListBoxAdd to add an item, or ListBoxGetSelected to get the current
selection.<P>
interface_click is fired with the listbox GUI/OBJECT ID's when the player
clicks on an item in the list. You may wish to ignore this or to do something
useful with it.<P>

</BODY></HTML>
